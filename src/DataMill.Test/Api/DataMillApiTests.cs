/* 
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market.  GitHub for SDKs: https://github.com/datamill-solutions 
 *
 * OpenAPI spec version: 1.6.5
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using DataMill.Client;
using DataMill.Api;
using DataMill.Model;

namespace DataMill.Test
{
    /// <summary>
    ///  Class for testing DataMillApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DataMillApiTests
    {
        private DataMillApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DataMillApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DataMillApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DataMillApi
            //Assert.IsInstanceOfType(typeof(DataMillApi), instance, "instance is a DataMillApi");
        }

        
        /// <summary>
        /// Test CheckBIC
        /// </summary>
        [Test]
        public void CheckBICTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string bic = null;
            //var response = instance.CheckBIC(bic);
            //Assert.IsInstanceOf<BicCheckResponse> (response, "response is BicCheckResponse");
        }
        
        /// <summary>
        /// Test CheckEmailDomain
        /// </summary>
        [Test]
        public void CheckEmailDomainTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //var response = instance.CheckEmailDomain(email);
            //Assert.IsInstanceOf<EmailDomainCheckResponse> (response, "response is EmailDomainCheckResponse");
        }
        
        /// <summary>
        /// Test CheckEmailMailbox
        /// </summary>
        [Test]
        public void CheckEmailMailboxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //var response = instance.CheckEmailMailbox(email);
            //Assert.IsInstanceOf<EmailExtendedCheckResponse> (response, "response is EmailExtendedCheckResponse");
        }
        
        /// <summary>
        /// Test CheckEmailSyntax
        /// </summary>
        [Test]
        public void CheckEmailSyntaxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //var response = instance.CheckEmailSyntax(email);
            //Assert.IsInstanceOf<EmailSyntaxCheckResponse> (response, "response is EmailSyntaxCheckResponse");
        }
        
        /// <summary>
        /// Test CheckIBAN
        /// </summary>
        [Test]
        public void CheckIBANTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string iban = null;
            //var response = instance.CheckIBAN(iban);
            //Assert.IsInstanceOf<IbanCheckResponse> (response, "response is IbanCheckResponse");
        }
        
        /// <summary>
        /// Test CheckMobilePhone
        /// </summary>
        [Test]
        public void CheckMobilePhoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string phonenumber = null;
            //string countrycode = null;
            //var response = instance.CheckMobilePhone(phonenumber, countrycode);
            //Assert.IsInstanceOf<PhoneMobileCheckResponse> (response, "response is PhoneMobileCheckResponse");
        }
        
        /// <summary>
        /// Test CheckUrl
        /// </summary>
        [Test]
        public void CheckUrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string url = null;
            //string maxRedirects = null;
            //var response = instance.CheckUrl(url, maxRedirects);
            //Assert.IsInstanceOf<UrlCheckResponse> (response, "response is UrlCheckResponse");
        }
        
        /// <summary>
        /// Test CheckVAT
        /// </summary>
        [Test]
        public void CheckVATTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vatnumber = null;
            //var response = instance.CheckVAT(vatnumber);
            //Assert.IsInstanceOf<VatCheckResponse> (response, "response is VatCheckResponse");
        }
        
        /// <summary>
        /// Test ConvertCapitalFirst
        /// </summary>
        [Test]
        public void ConvertCapitalFirstTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string text = null;
            //var response = instance.ConvertCapitalFirst(text);
            //Assert.IsInstanceOf<ConvertCapitalFirstResponse> (response, "response is ConvertCapitalFirstResponse");
        }
        
        /// <summary>
        /// Test ConvertLowerCase
        /// </summary>
        [Test]
        public void ConvertLowerCaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string text = null;
            //var response = instance.ConvertLowerCase(text);
            //Assert.IsInstanceOf<ConvertLowerCaseResponse> (response, "response is ConvertLowerCaseResponse");
        }
        
        /// <summary>
        /// Test ConvertUpperCase
        /// </summary>
        [Test]
        public void ConvertUpperCaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string text = null;
            //var response = instance.ConvertUpperCase(text);
            //Assert.IsInstanceOf<ConvertUpperCaseResponse> (response, "response is ConvertUpperCaseResponse");
        }
        
        /// <summary>
        /// Test ConvertWrap
        /// </summary>
        [Test]
        public void ConvertWrapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string text = null;
            //int? limit = null;
            //string mode = null;
            //string linebreak = null;
            //var response = instance.ConvertWrap(text, limit, mode, linebreak);
            //Assert.IsInstanceOf<ConvertWrapResponse> (response, "response is ConvertWrapResponse");
        }
        
        /// <summary>
        /// Test ExtractHouseNumber
        /// </summary>
        [Test]
        public void ExtractHouseNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string street = null;
            //string housenumber = null;
            //var response = instance.ExtractHouseNumber(street, housenumber);
            //Assert.IsInstanceOf<AddressHouseNumberExtractResponse> (response, "response is AddressHouseNumberExtractResponse");
        }
        
        /// <summary>
        /// Test FormatPhoneNumber
        /// </summary>
        [Test]
        public void FormatPhoneNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string phonenumber = null;
            //string countrycode = null;
            //string format = null;
            //string directDialingDelimiter = null;
            //string allowedDelimiters = null;
            //var response = instance.FormatPhoneNumber(phonenumber, countrycode, format, directDialingDelimiter, allowedDelimiters);
            //Assert.IsInstanceOf<PhoneFormatResponse> (response, "response is PhoneFormatResponse");
        }
        
        /// <summary>
        /// Test GetDUNSRating
        /// </summary>
        [Test]
        public void GetDUNSRatingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dunsNumber = null;
            //string reasonCode = null;
            //var response = instance.GetDUNSRating(dunsNumber, reasonCode);
            //Assert.IsInstanceOf<BusinessDataDunsRatingResponse> (response, "response is BusinessDataDunsRatingResponse");
        }
        
        /// <summary>
        /// Test GetFirstNames
        /// </summary>
        [Test]
        public void GetFirstNamesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.GetFirstNames(name);
            //Assert.IsInstanceOf<FirstNameGetResponse> (response, "response is FirstNameGetResponse");
        }
        
        /// <summary>
        /// Test GetGender
        /// </summary>
        [Test]
        public void GetGenderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string firstname = null;
            //var response = instance.GetGender(firstname);
            //Assert.IsInstanceOf<GenderGetResponse> (response, "response is GenderGetResponse");
        }
        
        /// <summary>
        /// Test GetGenderExtended
        /// </summary>
        [Test]
        public void GetGenderExtendedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string firstname = null;
            //string countrycode = null;
            //var response = instance.GetGenderExtended(firstname, countrycode);
            //Assert.IsInstanceOf<GenderExtendedGetResponse> (response, "response is GenderExtendedGetResponse");
        }
        
        /// <summary>
        /// Test GetPhoneCountryCode
        /// </summary>
        [Test]
        public void GetPhoneCountryCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string countrycode = null;
            //var response = instance.GetPhoneCountryCode(countrycode);
            //Assert.IsInstanceOf<PhoneCountryCodeGetResponse> (response, "response is PhoneCountryCodeGetResponse");
        }
        
        /// <summary>
        /// Test GetPhoneticCode
        /// </summary>
        [Test]
        public void GetPhoneticCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string text = null;
            //int? phoneticAlgorithm = null;
            //var response = instance.GetPhoneticCode(text, phoneticAlgorithm);
            //Assert.IsInstanceOf<PhoneticCodeGetResponse> (response, "response is PhoneticCodeGetResponse");
        }
        
        /// <summary>
        /// Test GetSocialMediaActivities
        /// </summary>
        [Test]
        public void GetSocialMediaActivitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //var response = instance.GetSocialMediaActivities(email);
            //Assert.IsInstanceOf<SocialMediaActivitiesGetResponse> (response, "response is SocialMediaActivitiesGetResponse");
        }
        
        /// <summary>
        /// Test LocateAddress
        /// </summary>
        [Test]
        public void LocateAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string latitude = null;
            //string longitude = null;
            //string locale = null;
            //var response = instance.LocateAddress(latitude, longitude, locale);
            //Assert.IsInstanceOf<AddressSearchResponse> (response, "response is AddressSearchResponse");
        }
        
        /// <summary>
        /// Test ResolveDUNS
        /// </summary>
        [Test]
        public void ResolveDUNSTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string dunsNumber = null;
            //string reasonCode = null;
            //var response = instance.ResolveDUNS(dunsNumber, reasonCode);
            //Assert.IsInstanceOf<BusinessDataDunsResolveResponse> (response, "response is BusinessDataDunsResolveResponse");
        }
        
        /// <summary>
        /// Test ResolveVAT
        /// </summary>
        [Test]
        public void ResolveVATTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vatnumber = null;
            //string locale = null;
            //var response = instance.ResolveVAT(vatnumber, locale);
            //Assert.IsInstanceOf<VatResolveResponse> (response, "response is VatResolveResponse");
        }
        
        /// <summary>
        /// Test SearchAddress
        /// </summary>
        [Test]
        public void SearchAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string country = null;
            //string state = null;
            //string county = null;
            //string city = null;
            //string zip = null;
            //string district = null;
            //string street = null;
            //string housenumber = null;
            //string locale = null;
            //var response = instance.SearchAddress(address, country, state, county, city, zip, district, street, housenumber, locale);
            //Assert.IsInstanceOf<AddressSearchResponse> (response, "response is AddressSearchResponse");
        }
        
        /// <summary>
        /// Test SearchAddressMultiple
        /// </summary>
        [Test]
        public void SearchAddressMultipleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string locale = null;
            //var response = instance.SearchAddressMultiple(address, locale);
            //Assert.IsInstanceOf<AddressSearchMultipleResponse> (response, "response is AddressSearchMultipleResponse");
        }
        
        /// <summary>
        /// Test SearchDUNS
        /// </summary>
        [Test]
        public void SearchDUNSTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string countryCode = null;
            //string companyName = null;
            //string dunsNumber = null;
            //string state = null;
            //string city = null;
            //string zip = null;
            //string street = null;
            //var response = instance.SearchDUNS(countryCode, companyName, dunsNumber, state, city, zip, street);
            //Assert.IsInstanceOf<BusinessDataDunsSearchResponse> (response, "response is BusinessDataDunsSearchResponse");
        }
        
        /// <summary>
        /// Test SearchUndeliverableContact
        /// </summary>
        [Test]
        public void SearchUndeliverableContactTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string firstName = null;
            //string lastName = null;
            //string countryCode = null;
            //string zip = null;
            //string street = null;
            //string reason = null;
            //var response = instance.SearchUndeliverableContact(firstName, lastName, countryCode, zip, street, reason);
            //Assert.IsInstanceOf<BusinessDataUndeliverableContactsResponse> (response, "response is BusinessDataUndeliverableContactsResponse");
        }
        
        /// <summary>
        /// Test SearchVAT
        /// </summary>
        [Test]
        public void SearchVATTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string company = null;
            //string city = null;
            //string countryCode = null;
            //string limit = null;
            //string minScore = null;
            //var response = instance.SearchVAT(company, city, countryCode, limit, minScore);
            //Assert.IsInstanceOf<VatSearchResponse> (response, "response is VatSearchResponse");
        }
        
    }

}
