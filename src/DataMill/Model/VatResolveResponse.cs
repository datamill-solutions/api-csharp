/* 
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market. 
 *
 * OpenAPI spec version: 1.6.4
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DataMill.Model
{
    /// <summary>
    /// Response of successful transformation request for /vat/resolve
    /// </summary>
    [DataContract]
    public partial class VatResolveResponse :  IEquatable<VatResolveResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VatResolveResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VatResolveResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VatResolveResponse" /> class.
        /// </summary>
        /// <param name="Valid">Flag if the VAT number is valid or not [0, 1] (required).</param>
        /// <param name="Countrycode">ISO 3166-1 alpha-2 country code (required).</param>
        /// <param name="Vatnumber">The verified VAT number without the country code as prefix (required).</param>
        /// <param name="Name">The official company name if VAT number is valid (required).</param>
        /// <param name="Countryname">Country name together with the language information (required).</param>
        /// <param name="State">State name/code together with the language information (required).</param>
        /// <param name="County">County name together with the language information (if available) (required).</param>
        /// <param name="City">City name together with the language information (required).</param>
        /// <param name="Zip">Postal code (required).</param>
        /// <param name="Street">Street name together with the language information (required).</param>
        /// <param name="Housenumber">House number together with the language information (if available) (required).</param>
        /// <param name="AdditionalData">Additional house number information (e.g. floor, apartment, top) (required).</param>
        /// <param name="RawAddress">The raw address of the company received before its split into its address parts (required).</param>
        /// <param name="CountrycodeIso3">ISO 3166-1 alpha-3 country code (required).</param>
        /// <param name="Relevance">Indicates the relevance of the result found. The higher the score the more relevant the alternative. The score is a normalized value between 0 and 100. Every typo or mismatch between the request and response data (e.g. incorrect data, abbreviation, ..) will reduce the relevance.  (required).</param>
        /// <param name="Latitude">Latitude to place a marker indicating the given location on a map (uses a dot as decimal point) (required).</param>
        /// <param name="Longitude">Longitude to place a marker indicating the given location on a map (uses a dot as decimal point) (required).</param>
        /// <param name="Matchlevel">The most detailed address field that matches the geo-coding query: **housenumber**: the whole geo-location including the house number / building name was found. **street**: the whole geo-location excluding the house number / building name was found. Please consider if you do not provide a house number or building name in the request the most detailed address field possible will always be the street. **general**: our service could only resolve a few address parts above the street level (e.g. only country or country + city, ...).  (required).</param>
        public VatResolveResponse(string Valid = null, string Countrycode = null, string Vatnumber = null, string Name = null, string Countryname = null, string State = null, string County = null, string City = null, string Zip = null, string Street = null, string Housenumber = null, string AdditionalData = null, string RawAddress = null, string CountrycodeIso3 = null, string Relevance = null, string Latitude = null, string Longitude = null, string Matchlevel = null)
        {
            // to ensure "Valid" is required (not null)
            if (Valid == null)
            {
                throw new InvalidDataException("Valid is a required property for VatResolveResponse and cannot be null");
            }
            else
            {
                this.Valid = Valid;
            }
            // to ensure "Countrycode" is required (not null)
            if (Countrycode == null)
            {
                throw new InvalidDataException("Countrycode is a required property for VatResolveResponse and cannot be null");
            }
            else
            {
                this.Countrycode = Countrycode;
            }
            // to ensure "Vatnumber" is required (not null)
            if (Vatnumber == null)
            {
                throw new InvalidDataException("Vatnumber is a required property for VatResolveResponse and cannot be null");
            }
            else
            {
                this.Vatnumber = Vatnumber;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for VatResolveResponse and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Countryname" is required (not null)
            if (Countryname == null)
            {
                throw new InvalidDataException("Countryname is a required property for VatResolveResponse and cannot be null");
            }
            else
            {
                this.Countryname = Countryname;
            }
            // to ensure "State" is required (not null)
            if (State == null)
            {
                throw new InvalidDataException("State is a required property for VatResolveResponse and cannot be null");
            }
            else
            {
                this.State = State;
            }
            // to ensure "County" is required (not null)
            if (County == null)
            {
                throw new InvalidDataException("County is a required property for VatResolveResponse and cannot be null");
            }
            else
            {
                this.County = County;
            }
            // to ensure "City" is required (not null)
            if (City == null)
            {
                throw new InvalidDataException("City is a required property for VatResolveResponse and cannot be null");
            }
            else
            {
                this.City = City;
            }
            // to ensure "Zip" is required (not null)
            if (Zip == null)
            {
                throw new InvalidDataException("Zip is a required property for VatResolveResponse and cannot be null");
            }
            else
            {
                this.Zip = Zip;
            }
            // to ensure "Street" is required (not null)
            if (Street == null)
            {
                throw new InvalidDataException("Street is a required property for VatResolveResponse and cannot be null");
            }
            else
            {
                this.Street = Street;
            }
            // to ensure "Housenumber" is required (not null)
            if (Housenumber == null)
            {
                throw new InvalidDataException("Housenumber is a required property for VatResolveResponse and cannot be null");
            }
            else
            {
                this.Housenumber = Housenumber;
            }
            // to ensure "AdditionalData" is required (not null)
            if (AdditionalData == null)
            {
                throw new InvalidDataException("AdditionalData is a required property for VatResolveResponse and cannot be null");
            }
            else
            {
                this.AdditionalData = AdditionalData;
            }
            // to ensure "RawAddress" is required (not null)
            if (RawAddress == null)
            {
                throw new InvalidDataException("RawAddress is a required property for VatResolveResponse and cannot be null");
            }
            else
            {
                this.RawAddress = RawAddress;
            }
            // to ensure "CountrycodeIso3" is required (not null)
            if (CountrycodeIso3 == null)
            {
                throw new InvalidDataException("CountrycodeIso3 is a required property for VatResolveResponse and cannot be null");
            }
            else
            {
                this.CountrycodeIso3 = CountrycodeIso3;
            }
            // to ensure "Relevance" is required (not null)
            if (Relevance == null)
            {
                throw new InvalidDataException("Relevance is a required property for VatResolveResponse and cannot be null");
            }
            else
            {
                this.Relevance = Relevance;
            }
            // to ensure "Latitude" is required (not null)
            if (Latitude == null)
            {
                throw new InvalidDataException("Latitude is a required property for VatResolveResponse and cannot be null");
            }
            else
            {
                this.Latitude = Latitude;
            }
            // to ensure "Longitude" is required (not null)
            if (Longitude == null)
            {
                throw new InvalidDataException("Longitude is a required property for VatResolveResponse and cannot be null");
            }
            else
            {
                this.Longitude = Longitude;
            }
            // to ensure "Matchlevel" is required (not null)
            if (Matchlevel == null)
            {
                throw new InvalidDataException("Matchlevel is a required property for VatResolveResponse and cannot be null");
            }
            else
            {
                this.Matchlevel = Matchlevel;
            }
        }
        
        /// <summary>
        /// Flag if the VAT number is valid or not [0, 1]
        /// </summary>
        /// <value>Flag if the VAT number is valid or not [0, 1]</value>
        [DataMember(Name="valid", EmitDefaultValue=false)]
        public string Valid { get; set; }
        /// <summary>
        /// ISO 3166-1 alpha-2 country code
        /// </summary>
        /// <value>ISO 3166-1 alpha-2 country code</value>
        [DataMember(Name="countrycode", EmitDefaultValue=false)]
        public string Countrycode { get; set; }
        /// <summary>
        /// The verified VAT number without the country code as prefix
        /// </summary>
        /// <value>The verified VAT number without the country code as prefix</value>
        [DataMember(Name="vatnumber", EmitDefaultValue=false)]
        public string Vatnumber { get; set; }
        /// <summary>
        /// The official company name if VAT number is valid
        /// </summary>
        /// <value>The official company name if VAT number is valid</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Country name together with the language information
        /// </summary>
        /// <value>Country name together with the language information</value>
        [DataMember(Name="countryname", EmitDefaultValue=false)]
        public string Countryname { get; set; }
        /// <summary>
        /// State name/code together with the language information
        /// </summary>
        /// <value>State name/code together with the language information</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }
        /// <summary>
        /// County name together with the language information (if available)
        /// </summary>
        /// <value>County name together with the language information (if available)</value>
        [DataMember(Name="county", EmitDefaultValue=false)]
        public string County { get; set; }
        /// <summary>
        /// City name together with the language information
        /// </summary>
        /// <value>City name together with the language information</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }
        /// <summary>
        /// Postal code
        /// </summary>
        /// <value>Postal code</value>
        [DataMember(Name="zip", EmitDefaultValue=false)]
        public string Zip { get; set; }
        /// <summary>
        /// Street name together with the language information
        /// </summary>
        /// <value>Street name together with the language information</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }
        /// <summary>
        /// House number together with the language information (if available)
        /// </summary>
        /// <value>House number together with the language information (if available)</value>
        [DataMember(Name="housenumber", EmitDefaultValue=false)]
        public string Housenumber { get; set; }
        /// <summary>
        /// Additional house number information (e.g. floor, apartment, top)
        /// </summary>
        /// <value>Additional house number information (e.g. floor, apartment, top)</value>
        [DataMember(Name="additional_data", EmitDefaultValue=false)]
        public string AdditionalData { get; set; }
        /// <summary>
        /// The raw address of the company received before its split into its address parts
        /// </summary>
        /// <value>The raw address of the company received before its split into its address parts</value>
        [DataMember(Name="raw_address", EmitDefaultValue=false)]
        public string RawAddress { get; set; }
        /// <summary>
        /// ISO 3166-1 alpha-3 country code
        /// </summary>
        /// <value>ISO 3166-1 alpha-3 country code</value>
        [DataMember(Name="countrycode_iso_3", EmitDefaultValue=false)]
        public string CountrycodeIso3 { get; set; }
        /// <summary>
        /// Indicates the relevance of the result found. The higher the score the more relevant the alternative. The score is a normalized value between 0 and 100. Every typo or mismatch between the request and response data (e.g. incorrect data, abbreviation, ..) will reduce the relevance. 
        /// </summary>
        /// <value>Indicates the relevance of the result found. The higher the score the more relevant the alternative. The score is a normalized value between 0 and 100. Every typo or mismatch between the request and response data (e.g. incorrect data, abbreviation, ..) will reduce the relevance. </value>
        [DataMember(Name="relevance", EmitDefaultValue=false)]
        public string Relevance { get; set; }
        /// <summary>
        /// Latitude to place a marker indicating the given location on a map (uses a dot as decimal point)
        /// </summary>
        /// <value>Latitude to place a marker indicating the given location on a map (uses a dot as decimal point)</value>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public string Latitude { get; set; }
        /// <summary>
        /// Longitude to place a marker indicating the given location on a map (uses a dot as decimal point)
        /// </summary>
        /// <value>Longitude to place a marker indicating the given location on a map (uses a dot as decimal point)</value>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public string Longitude { get; set; }
        /// <summary>
        /// The most detailed address field that matches the geo-coding query: **housenumber**: the whole geo-location including the house number / building name was found. **street**: the whole geo-location excluding the house number / building name was found. Please consider if you do not provide a house number or building name in the request the most detailed address field possible will always be the street. **general**: our service could only resolve a few address parts above the street level (e.g. only country or country + city, ...). 
        /// </summary>
        /// <value>The most detailed address field that matches the geo-coding query: **housenumber**: the whole geo-location including the house number / building name was found. **street**: the whole geo-location excluding the house number / building name was found. Please consider if you do not provide a house number or building name in the request the most detailed address field possible will always be the street. **general**: our service could only resolve a few address parts above the street level (e.g. only country or country + city, ...). </value>
        [DataMember(Name="matchlevel", EmitDefaultValue=false)]
        public string Matchlevel { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VatResolveResponse {\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  Countrycode: ").Append(Countrycode).Append("\n");
            sb.Append("  Vatnumber: ").Append(Vatnumber).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Countryname: ").Append(Countryname).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  County: ").Append(County).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Housenumber: ").Append(Housenumber).Append("\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  RawAddress: ").Append(RawAddress).Append("\n");
            sb.Append("  CountrycodeIso3: ").Append(CountrycodeIso3).Append("\n");
            sb.Append("  Relevance: ").Append(Relevance).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Matchlevel: ").Append(Matchlevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as VatResolveResponse);
        }

        /// <summary>
        /// Returns true if VatResolveResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of VatResolveResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VatResolveResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Valid == other.Valid ||
                    this.Valid != null &&
                    this.Valid.Equals(other.Valid)
                ) && 
                (
                    this.Countrycode == other.Countrycode ||
                    this.Countrycode != null &&
                    this.Countrycode.Equals(other.Countrycode)
                ) && 
                (
                    this.Vatnumber == other.Vatnumber ||
                    this.Vatnumber != null &&
                    this.Vatnumber.Equals(other.Vatnumber)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Countryname == other.Countryname ||
                    this.Countryname != null &&
                    this.Countryname.Equals(other.Countryname)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.County == other.County ||
                    this.County != null &&
                    this.County.Equals(other.County)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.Zip == other.Zip ||
                    this.Zip != null &&
                    this.Zip.Equals(other.Zip)
                ) && 
                (
                    this.Street == other.Street ||
                    this.Street != null &&
                    this.Street.Equals(other.Street)
                ) && 
                (
                    this.Housenumber == other.Housenumber ||
                    this.Housenumber != null &&
                    this.Housenumber.Equals(other.Housenumber)
                ) && 
                (
                    this.AdditionalData == other.AdditionalData ||
                    this.AdditionalData != null &&
                    this.AdditionalData.Equals(other.AdditionalData)
                ) && 
                (
                    this.RawAddress == other.RawAddress ||
                    this.RawAddress != null &&
                    this.RawAddress.Equals(other.RawAddress)
                ) && 
                (
                    this.CountrycodeIso3 == other.CountrycodeIso3 ||
                    this.CountrycodeIso3 != null &&
                    this.CountrycodeIso3.Equals(other.CountrycodeIso3)
                ) && 
                (
                    this.Relevance == other.Relevance ||
                    this.Relevance != null &&
                    this.Relevance.Equals(other.Relevance)
                ) && 
                (
                    this.Latitude == other.Latitude ||
                    this.Latitude != null &&
                    this.Latitude.Equals(other.Latitude)
                ) && 
                (
                    this.Longitude == other.Longitude ||
                    this.Longitude != null &&
                    this.Longitude.Equals(other.Longitude)
                ) && 
                (
                    this.Matchlevel == other.Matchlevel ||
                    this.Matchlevel != null &&
                    this.Matchlevel.Equals(other.Matchlevel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Valid != null)
                    hash = hash * 59 + this.Valid.GetHashCode();
                if (this.Countrycode != null)
                    hash = hash * 59 + this.Countrycode.GetHashCode();
                if (this.Vatnumber != null)
                    hash = hash * 59 + this.Vatnumber.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Countryname != null)
                    hash = hash * 59 + this.Countryname.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.County != null)
                    hash = hash * 59 + this.County.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.Zip != null)
                    hash = hash * 59 + this.Zip.GetHashCode();
                if (this.Street != null)
                    hash = hash * 59 + this.Street.GetHashCode();
                if (this.Housenumber != null)
                    hash = hash * 59 + this.Housenumber.GetHashCode();
                if (this.AdditionalData != null)
                    hash = hash * 59 + this.AdditionalData.GetHashCode();
                if (this.RawAddress != null)
                    hash = hash * 59 + this.RawAddress.GetHashCode();
                if (this.CountrycodeIso3 != null)
                    hash = hash * 59 + this.CountrycodeIso3.GetHashCode();
                if (this.Relevance != null)
                    hash = hash * 59 + this.Relevance.GetHashCode();
                if (this.Latitude != null)
                    hash = hash * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hash = hash * 59 + this.Longitude.GetHashCode();
                if (this.Matchlevel != null)
                    hash = hash * 59 + this.Matchlevel.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
