/* 
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market. 
 *
 * OpenAPI spec version: 1.6.4
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DataMill.Model
{
    /// <summary>
    /// Response of successful transformation request for /business-data/duns/rating
    /// </summary>
    [DataContract]
    public partial class BusinessDataDunsRatingResponse :  IEquatable<BusinessDataDunsRatingResponse>, IValidatableObject
    {
        /// <summary>
        /// Flag if a company was found by its D-U-N-S number or not [**0**, **1**] 
        /// </summary>
        /// <value>Flag if a company was found by its D-U-N-S number or not [**0**, **1**] </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum _0 for "0"
            /// </summary>
            [EnumMember(Value = "0")]
            _0,
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1
        }

        /// <summary>
        /// Describes if a company was found or if the specified D-U-N-S number could not be resolved. Possible values are: **company not found**, **company found**, **invalid duns number** 
        /// </summary>
        /// <value>Describes if a company was found or if the specified D-U-N-S number could not be resolved. Possible values are: **company not found**, **company found**, **invalid duns number** </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusDescriptionEnum
        {
            
            /// <summary>
            /// Enum Companyfound for "company found"
            /// </summary>
            [EnumMember(Value = "company found")]
            Companyfound,
            
            /// <summary>
            /// Enum Companynotfound for "company not found"
            /// </summary>
            [EnumMember(Value = "company not found")]
            Companynotfound,
            
            /// <summary>
            /// Enum Invaliddunsnumber for "invalid duns number"
            /// </summary>
            [EnumMember(Value = "invalid duns number")]
            Invaliddunsnumber
        }

        /// <summary>
        /// Indicator if subsidiaries are included or not **A**: subsidiaries are not included **B**: total value including subsidiaries 
        /// </summary>
        /// <value>Indicator if subsidiaries are included or not **A**: subsidiaries are not included **B**: total value including subsidiaries </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TotalEmployeesIndicatorEnum
        {
            
            /// <summary>
            /// Enum A for "A"
            /// </summary>
            [EnumMember(Value = "A")]
            A,
            
            /// <summary>
            /// Enum B for "B"
            /// </summary>
            [EnumMember(Value = "B")]
            B
        }

        /// <summary>
        /// Flag if a company was found by its D-U-N-S number or not [**0**, **1**] 
        /// </summary>
        /// <value>Flag if a company was found by its D-U-N-S number or not [**0**, **1**] </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Describes if a company was found or if the specified D-U-N-S number could not be resolved. Possible values are: **company not found**, **company found**, **invalid duns number** 
        /// </summary>
        /// <value>Describes if a company was found or if the specified D-U-N-S number could not be resolved. Possible values are: **company not found**, **company found**, **invalid duns number** </value>
        [DataMember(Name="status_description", EmitDefaultValue=false)]
        public StatusDescriptionEnum? StatusDescription { get; set; }
        /// <summary>
        /// Indicator if subsidiaries are included or not **A**: subsidiaries are not included **B**: total value including subsidiaries 
        /// </summary>
        /// <value>Indicator if subsidiaries are included or not **A**: subsidiaries are not included **B**: total value including subsidiaries </value>
        [DataMember(Name="total_employees_indicator", EmitDefaultValue=false)]
        public TotalEmployeesIndicatorEnum? TotalEmployeesIndicator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessDataDunsRatingResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BusinessDataDunsRatingResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessDataDunsRatingResponse" /> class.
        /// </summary>
        /// <param name="Status">Flag if a company was found by its D-U-N-S number or not [**0**, **1**]  (required).</param>
        /// <param name="StatusDescription">Describes if a company was found or if the specified D-U-N-S number could not be resolved. Possible values are: **company not found**, **company found**, **invalid duns number**  (required).</param>
        /// <param name="DunsNumber">The DUNS number of the company. The same ase the input parameter if company was found..</param>
        /// <param name="CompanyName">The company&#39;s official name.</param>
        /// <param name="ContinentName">Continent name of the company&#39;s headquarters.</param>
        /// <param name="CountryCode">ISO 3166-1 alpha-2 country code of the company&#39;s headquarters.</param>
        /// <param name="CountryCode3">ISO 3166-1 alpha-3 country code of the company&#39;s headquarters.</param>
        /// <param name="CountryName">Country name together with the language information.</param>
        /// <param name="Zip">Postal code of the company&#39;s headquarters.</param>
        /// <param name="City">City of the company&#39;s headquarters.</param>
        /// <param name="Street">Street name of the company&#39;s headquarters.</param>
        /// <param name="HouseNumber">House number of the company&#39;s headquarters.</param>
        /// <param name="PhoneNumber">Phone number of the company&#39;s headquarters.</param>
        /// <param name="FaxNumber">Fax number of the company&#39;s headquarters.</param>
        /// <param name="StateName">State name of the company&#39;s headquarters.</param>
        /// <param name="CeoName">Name of the company&#39;s CEO (Chief Executive Officer).</param>
        /// <param name="CeoTitle">Position / Business title of the company&#39;s CEO.</param>
        /// <param name="SicCode">The company&#39;s international SIC (Standard Industrial Classification) code.</param>
        /// <param name="SicDescription">Description of the SIC code.</param>
        /// <param name="SicVersion">The version of SIC (either 1972, 1977 or 1987).</param>
        /// <param name="YearStarted">Year of establishment.</param>
        /// <param name="NetWorth">The company&#39;s net worth (net value) in its local currency (may be NULL if unset).</param>
        /// <param name="CurrencyCode">The local currency code of the company&#39;s headquarters country.</param>
        /// <param name="CurrencyName">The local currency name of the company&#39;s headquarters country.</param>
        /// <param name="TotalEmployees">The total number of employees (may be NULL if unset).</param>
        /// <param name="TotalEmployeesIndicator">Indicator if subsidiaries are included or not **A**: subsidiaries are not included **B**: total value including subsidiaries .</param>
        /// <param name="TotalEmployeesIndicatorDescription">Description of the total number of employees indicator.</param>
        /// <param name="LegalFormCode">Code of the company&#39;s legal form.</param>
        /// <param name="LegalFormDescription">Description of the legal form code.</param>
        /// <param name="ReportDate">Timestamp when the company&#39;s information were updated the last time.</param>
        /// <param name="IsOutOfBusiness">Flag if the company is already out of business.</param>
        /// <param name="IsBranch">Flag if the company found is a branch or the main headquarter.</param>
        /// <param name="BusinessRegistrationNumber">Primary business identification number assigned to the business by government agency.</param>
        /// <param name="BusinessRegistrationType">Type of identification number assigned to the business (e.g. Registration number, Judicial number, ...).</param>
        /// <param name="IncorporationYear">Year business incorporated.</param>
        /// <param name="TradeStyles">Array with other names of the company.</param>
        /// <param name="EnquiryDuns">The D-U-N-S number of the enquiry. May vary from the specified D-U-N-S number if the headquarters data are returned.</param>
        /// <param name="Sales">Net sales for the period after returns, allowances and discounts are deducted (may be NULL if unset).</param>
        /// <param name="SalesEstimatedDescription">Qualifies the annual sales volume (actual, estimated, forecast, projected or calculated).</param>
        /// <param name="PaydexScore">D&amp;B® PAYDEX® for the last 2 months experiences (not for all countries) (may be NULL if unset).</param>
        /// <param name="PaydexScoreDescription">Description about the D&amp;B® PAYDEX® score (either Anticipate, Discount, Prompt, X days beyond terms or Unavailable) (may be NULL if unset).</param>
        /// <param name="PaydexNorm">Industry D&amp;B® PAYDEX® median or average (may be NULL if unset).</param>
        /// <param name="IntangibleAssets">Total of intangible assets (may be NULL if unset).</param>
        /// <param name="MaxCreditRecommendation">Maximum amount of credit recommended by Dun &amp; Bradstreet (Europe only) (may be NULL if unset).</param>
        /// <param name="DubRating">Rating assigned by Dun &amp; Bradstreet (meaning varies by country).</param>
        /// <param name="DubRatingFinancialStrength">Part of the Dun &amp; Bradstreet rating which indicates the financial strength of the business (from - to in USD).</param>
        /// <param name="DubRatingRisk">Part of the Dun &amp; Bradstreet rating which indicates the risk of a potential business cooperation: **1**: minimal risk, **2**: low risk, **3**: greater than average risk, **4**: significant level of risk, **&lt;other values&gt;**: insufficient information to define a risk indicator .</param>
        /// <param name="DubRatingRiskDescription">Part of the Dun &amp; Bradstreet rating which indicates the risk of a potential business cooperation: **1**: proceed with transaction - offer terms required, **2**: proceed with transaction, **3**: process with transaction, but monitor closely, **4**: take suitable assurances before extending credit, **&lt;other values&gt;**: no public information or D&amp;B proprietary information .</param>
        /// <param name="HasOpenClaims">Flag if open claims, legal claims, liens, protested bills or equivalent exists.</param>
        /// <param name="HasCriminalProceedings">Flag if criminal proceedings exists.</param>
        /// <param name="HasDisasterEvent">Flag if special events concerning disasters such as fire, hurricanes etc. exists.</param>
        /// <param name="HasFinancialEmbarrassment">Flag if open bankruptcy, receivership liquidation or equivalent exists.</param>
        /// <param name="HasFinancialLegalEvent">Flag if special events available including financial embarrassment and legal fillings exists.</param>
        /// <param name="HasSpecialEvent">Flag if special events are available concerning changes to operational aspects including name changes, management changes, etc..</param>
        /// <param name="HasOtherEvent">Flag if special events exists that are not otherwise specified.</param>
        /// <param name="HasSecuredFilings">Flag if open secured filing such as UCC filings, secured charges or equivalent exists.</param>
        /// <param name="HasLawsuit">Flag if open suit(s), judgement(s), petitions or payment remarks exists.</param>
        /// <param name="AreEmployeesEstimated">Flag if the total number of employees is estimated or actual.</param>
        /// <param name="AreSalesEstimated">Flag if the annual sales volume is estimated or actual.</param>
        public BusinessDataDunsRatingResponse(StatusEnum? Status = null, StatusDescriptionEnum? StatusDescription = null, string DunsNumber = null, string CompanyName = null, string ContinentName = null, string CountryCode = null, string CountryCode3 = null, string CountryName = null, string Zip = null, string City = null, string Street = null, string HouseNumber = null, string PhoneNumber = null, string FaxNumber = null, string StateName = null, string CeoName = null, string CeoTitle = null, string SicCode = null, string SicDescription = null, string SicVersion = null, string YearStarted = null, int? NetWorth = null, string CurrencyCode = null, string CurrencyName = null, long? TotalEmployees = null, TotalEmployeesIndicatorEnum? TotalEmployeesIndicator = null, string TotalEmployeesIndicatorDescription = null, long? LegalFormCode = null, string LegalFormDescription = null, DateTime? ReportDate = null, bool? IsOutOfBusiness = null, bool? IsBranch = null, string BusinessRegistrationNumber = null, string BusinessRegistrationType = null, string IncorporationYear = null, List<string> TradeStyles = null, string EnquiryDuns = null, long? Sales = null, string SalesEstimatedDescription = null, long? PaydexScore = null, string PaydexScoreDescription = null, long? PaydexNorm = null, long? IntangibleAssets = null, long? MaxCreditRecommendation = null, string DubRating = null, string DubRatingFinancialStrength = null, string DubRatingRisk = null, string DubRatingRiskDescription = null, bool? HasOpenClaims = null, bool? HasCriminalProceedings = null, bool? HasDisasterEvent = null, bool? HasFinancialEmbarrassment = null, bool? HasFinancialLegalEvent = null, bool? HasSpecialEvent = null, bool? HasOtherEvent = null, bool? HasSecuredFilings = null, bool? HasLawsuit = null, bool? AreEmployeesEstimated = null, bool? AreSalesEstimated = null)
        {
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for BusinessDataDunsRatingResponse and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "StatusDescription" is required (not null)
            if (StatusDescription == null)
            {
                throw new InvalidDataException("StatusDescription is a required property for BusinessDataDunsRatingResponse and cannot be null");
            }
            else
            {
                this.StatusDescription = StatusDescription;
            }
            this.DunsNumber = DunsNumber;
            this.CompanyName = CompanyName;
            this.ContinentName = ContinentName;
            this.CountryCode = CountryCode;
            this.CountryCode3 = CountryCode3;
            this.CountryName = CountryName;
            this.Zip = Zip;
            this.City = City;
            this.Street = Street;
            this.HouseNumber = HouseNumber;
            this.PhoneNumber = PhoneNumber;
            this.FaxNumber = FaxNumber;
            this.StateName = StateName;
            this.CeoName = CeoName;
            this.CeoTitle = CeoTitle;
            this.SicCode = SicCode;
            this.SicDescription = SicDescription;
            this.SicVersion = SicVersion;
            this.YearStarted = YearStarted;
            this.NetWorth = NetWorth;
            this.CurrencyCode = CurrencyCode;
            this.CurrencyName = CurrencyName;
            this.TotalEmployees = TotalEmployees;
            this.TotalEmployeesIndicator = TotalEmployeesIndicator;
            this.TotalEmployeesIndicatorDescription = TotalEmployeesIndicatorDescription;
            this.LegalFormCode = LegalFormCode;
            this.LegalFormDescription = LegalFormDescription;
            this.ReportDate = ReportDate;
            this.IsOutOfBusiness = IsOutOfBusiness;
            this.IsBranch = IsBranch;
            this.BusinessRegistrationNumber = BusinessRegistrationNumber;
            this.BusinessRegistrationType = BusinessRegistrationType;
            this.IncorporationYear = IncorporationYear;
            this.TradeStyles = TradeStyles;
            this.EnquiryDuns = EnquiryDuns;
            this.Sales = Sales;
            this.SalesEstimatedDescription = SalesEstimatedDescription;
            this.PaydexScore = PaydexScore;
            this.PaydexScoreDescription = PaydexScoreDescription;
            this.PaydexNorm = PaydexNorm;
            this.IntangibleAssets = IntangibleAssets;
            this.MaxCreditRecommendation = MaxCreditRecommendation;
            this.DubRating = DubRating;
            this.DubRatingFinancialStrength = DubRatingFinancialStrength;
            this.DubRatingRisk = DubRatingRisk;
            this.DubRatingRiskDescription = DubRatingRiskDescription;
            this.HasOpenClaims = HasOpenClaims;
            this.HasCriminalProceedings = HasCriminalProceedings;
            this.HasDisasterEvent = HasDisasterEvent;
            this.HasFinancialEmbarrassment = HasFinancialEmbarrassment;
            this.HasFinancialLegalEvent = HasFinancialLegalEvent;
            this.HasSpecialEvent = HasSpecialEvent;
            this.HasOtherEvent = HasOtherEvent;
            this.HasSecuredFilings = HasSecuredFilings;
            this.HasLawsuit = HasLawsuit;
            this.AreEmployeesEstimated = AreEmployeesEstimated;
            this.AreSalesEstimated = AreSalesEstimated;
        }
        
        /// <summary>
        /// The DUNS number of the company. The same ase the input parameter if company was found.
        /// </summary>
        /// <value>The DUNS number of the company. The same ase the input parameter if company was found.</value>
        [DataMember(Name="duns_number", EmitDefaultValue=false)]
        public string DunsNumber { get; set; }
        /// <summary>
        /// The company&#39;s official name
        /// </summary>
        /// <value>The company&#39;s official name</value>
        [DataMember(Name="company_name", EmitDefaultValue=false)]
        public string CompanyName { get; set; }
        /// <summary>
        /// Continent name of the company&#39;s headquarters
        /// </summary>
        /// <value>Continent name of the company&#39;s headquarters</value>
        [DataMember(Name="continent_name", EmitDefaultValue=false)]
        public string ContinentName { get; set; }
        /// <summary>
        /// ISO 3166-1 alpha-2 country code of the company&#39;s headquarters
        /// </summary>
        /// <value>ISO 3166-1 alpha-2 country code of the company&#39;s headquarters</value>
        [DataMember(Name="country_code", EmitDefaultValue=false)]
        public string CountryCode { get; set; }
        /// <summary>
        /// ISO 3166-1 alpha-3 country code of the company&#39;s headquarters
        /// </summary>
        /// <value>ISO 3166-1 alpha-3 country code of the company&#39;s headquarters</value>
        [DataMember(Name="country_code_3", EmitDefaultValue=false)]
        public string CountryCode3 { get; set; }
        /// <summary>
        /// Country name together with the language information
        /// </summary>
        /// <value>Country name together with the language information</value>
        [DataMember(Name="country_name", EmitDefaultValue=false)]
        public string CountryName { get; set; }
        /// <summary>
        /// Postal code of the company&#39;s headquarters
        /// </summary>
        /// <value>Postal code of the company&#39;s headquarters</value>
        [DataMember(Name="zip", EmitDefaultValue=false)]
        public string Zip { get; set; }
        /// <summary>
        /// City of the company&#39;s headquarters
        /// </summary>
        /// <value>City of the company&#39;s headquarters</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }
        /// <summary>
        /// Street name of the company&#39;s headquarters
        /// </summary>
        /// <value>Street name of the company&#39;s headquarters</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }
        /// <summary>
        /// House number of the company&#39;s headquarters
        /// </summary>
        /// <value>House number of the company&#39;s headquarters</value>
        [DataMember(Name="house_number", EmitDefaultValue=false)]
        public string HouseNumber { get; set; }
        /// <summary>
        /// Phone number of the company&#39;s headquarters
        /// </summary>
        /// <value>Phone number of the company&#39;s headquarters</value>
        [DataMember(Name="phone_number", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }
        /// <summary>
        /// Fax number of the company&#39;s headquarters
        /// </summary>
        /// <value>Fax number of the company&#39;s headquarters</value>
        [DataMember(Name="fax_number", EmitDefaultValue=false)]
        public string FaxNumber { get; set; }
        /// <summary>
        /// State name of the company&#39;s headquarters
        /// </summary>
        /// <value>State name of the company&#39;s headquarters</value>
        [DataMember(Name="state_name", EmitDefaultValue=false)]
        public string StateName { get; set; }
        /// <summary>
        /// Name of the company&#39;s CEO (Chief Executive Officer)
        /// </summary>
        /// <value>Name of the company&#39;s CEO (Chief Executive Officer)</value>
        [DataMember(Name="ceo_name", EmitDefaultValue=false)]
        public string CeoName { get; set; }
        /// <summary>
        /// Position / Business title of the company&#39;s CEO
        /// </summary>
        /// <value>Position / Business title of the company&#39;s CEO</value>
        [DataMember(Name="ceo_title", EmitDefaultValue=false)]
        public string CeoTitle { get; set; }
        /// <summary>
        /// The company&#39;s international SIC (Standard Industrial Classification) code
        /// </summary>
        /// <value>The company&#39;s international SIC (Standard Industrial Classification) code</value>
        [DataMember(Name="sic_code", EmitDefaultValue=false)]
        public string SicCode { get; set; }
        /// <summary>
        /// Description of the SIC code
        /// </summary>
        /// <value>Description of the SIC code</value>
        [DataMember(Name="sic_description", EmitDefaultValue=false)]
        public string SicDescription { get; set; }
        /// <summary>
        /// The version of SIC (either 1972, 1977 or 1987)
        /// </summary>
        /// <value>The version of SIC (either 1972, 1977 or 1987)</value>
        [DataMember(Name="sic_version", EmitDefaultValue=false)]
        public string SicVersion { get; set; }
        /// <summary>
        /// Year of establishment
        /// </summary>
        /// <value>Year of establishment</value>
        [DataMember(Name="year_started", EmitDefaultValue=false)]
        public string YearStarted { get; set; }
        /// <summary>
        /// The company&#39;s net worth (net value) in its local currency (may be NULL if unset)
        /// </summary>
        /// <value>The company&#39;s net worth (net value) in its local currency (may be NULL if unset)</value>
        [DataMember(Name="net_worth", EmitDefaultValue=false)]
        public int? NetWorth { get; set; }
        /// <summary>
        /// The local currency code of the company&#39;s headquarters country
        /// </summary>
        /// <value>The local currency code of the company&#39;s headquarters country</value>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }
        /// <summary>
        /// The local currency name of the company&#39;s headquarters country
        /// </summary>
        /// <value>The local currency name of the company&#39;s headquarters country</value>
        [DataMember(Name="currency_name", EmitDefaultValue=false)]
        public string CurrencyName { get; set; }
        /// <summary>
        /// The total number of employees (may be NULL if unset)
        /// </summary>
        /// <value>The total number of employees (may be NULL if unset)</value>
        [DataMember(Name="total_employees", EmitDefaultValue=false)]
        public long? TotalEmployees { get; set; }
        /// <summary>
        /// Description of the total number of employees indicator
        /// </summary>
        /// <value>Description of the total number of employees indicator</value>
        [DataMember(Name="total_employees_indicator_description", EmitDefaultValue=false)]
        public string TotalEmployeesIndicatorDescription { get; set; }
        /// <summary>
        /// Code of the company&#39;s legal form
        /// </summary>
        /// <value>Code of the company&#39;s legal form</value>
        [DataMember(Name="legal_form_code", EmitDefaultValue=false)]
        public long? LegalFormCode { get; set; }
        /// <summary>
        /// Description of the legal form code
        /// </summary>
        /// <value>Description of the legal form code</value>
        [DataMember(Name="legal_form_description", EmitDefaultValue=false)]
        public string LegalFormDescription { get; set; }
        /// <summary>
        /// Timestamp when the company&#39;s information were updated the last time
        /// </summary>
        /// <value>Timestamp when the company&#39;s information were updated the last time</value>
        [DataMember(Name="report_date", EmitDefaultValue=false)]
        public DateTime? ReportDate { get; set; }
        /// <summary>
        /// Flag if the company is already out of business
        /// </summary>
        /// <value>Flag if the company is already out of business</value>
        [DataMember(Name="is_out_of_business", EmitDefaultValue=false)]
        public bool? IsOutOfBusiness { get; set; }
        /// <summary>
        /// Flag if the company found is a branch or the main headquarter
        /// </summary>
        /// <value>Flag if the company found is a branch or the main headquarter</value>
        [DataMember(Name="is_branch", EmitDefaultValue=false)]
        public bool? IsBranch { get; set; }
        /// <summary>
        /// Primary business identification number assigned to the business by government agency
        /// </summary>
        /// <value>Primary business identification number assigned to the business by government agency</value>
        [DataMember(Name="business_registration_number", EmitDefaultValue=false)]
        public string BusinessRegistrationNumber { get; set; }
        /// <summary>
        /// Type of identification number assigned to the business (e.g. Registration number, Judicial number, ...)
        /// </summary>
        /// <value>Type of identification number assigned to the business (e.g. Registration number, Judicial number, ...)</value>
        [DataMember(Name="business_registration_type", EmitDefaultValue=false)]
        public string BusinessRegistrationType { get; set; }
        /// <summary>
        /// Year business incorporated
        /// </summary>
        /// <value>Year business incorporated</value>
        [DataMember(Name="incorporation_year", EmitDefaultValue=false)]
        public string IncorporationYear { get; set; }
        /// <summary>
        /// Array with other names of the company
        /// </summary>
        /// <value>Array with other names of the company</value>
        [DataMember(Name="trade_styles", EmitDefaultValue=false)]
        public List<string> TradeStyles { get; set; }
        /// <summary>
        /// The D-U-N-S number of the enquiry. May vary from the specified D-U-N-S number if the headquarters data are returned
        /// </summary>
        /// <value>The D-U-N-S number of the enquiry. May vary from the specified D-U-N-S number if the headquarters data are returned</value>
        [DataMember(Name="enquiry_duns", EmitDefaultValue=false)]
        public string EnquiryDuns { get; set; }
        /// <summary>
        /// Net sales for the period after returns, allowances and discounts are deducted (may be NULL if unset)
        /// </summary>
        /// <value>Net sales for the period after returns, allowances and discounts are deducted (may be NULL if unset)</value>
        [DataMember(Name="sales", EmitDefaultValue=false)]
        public long? Sales { get; set; }
        /// <summary>
        /// Qualifies the annual sales volume (actual, estimated, forecast, projected or calculated)
        /// </summary>
        /// <value>Qualifies the annual sales volume (actual, estimated, forecast, projected or calculated)</value>
        [DataMember(Name="sales_estimated_description", EmitDefaultValue=false)]
        public string SalesEstimatedDescription { get; set; }
        /// <summary>
        /// D&amp;B® PAYDEX® for the last 2 months experiences (not for all countries) (may be NULL if unset)
        /// </summary>
        /// <value>D&amp;B® PAYDEX® for the last 2 months experiences (not for all countries) (may be NULL if unset)</value>
        [DataMember(Name="paydex_score", EmitDefaultValue=false)]
        public long? PaydexScore { get; set; }
        /// <summary>
        /// Description about the D&amp;B® PAYDEX® score (either Anticipate, Discount, Prompt, X days beyond terms or Unavailable) (may be NULL if unset)
        /// </summary>
        /// <value>Description about the D&amp;B® PAYDEX® score (either Anticipate, Discount, Prompt, X days beyond terms or Unavailable) (may be NULL if unset)</value>
        [DataMember(Name="paydex_score_description", EmitDefaultValue=false)]
        public string PaydexScoreDescription { get; set; }
        /// <summary>
        /// Industry D&amp;B® PAYDEX® median or average (may be NULL if unset)
        /// </summary>
        /// <value>Industry D&amp;B® PAYDEX® median or average (may be NULL if unset)</value>
        [DataMember(Name="paydex_norm", EmitDefaultValue=false)]
        public long? PaydexNorm { get; set; }
        /// <summary>
        /// Total of intangible assets (may be NULL if unset)
        /// </summary>
        /// <value>Total of intangible assets (may be NULL if unset)</value>
        [DataMember(Name="intangible_assets", EmitDefaultValue=false)]
        public long? IntangibleAssets { get; set; }
        /// <summary>
        /// Maximum amount of credit recommended by Dun &amp; Bradstreet (Europe only) (may be NULL if unset)
        /// </summary>
        /// <value>Maximum amount of credit recommended by Dun &amp; Bradstreet (Europe only) (may be NULL if unset)</value>
        [DataMember(Name="max_credit_recommendation", EmitDefaultValue=false)]
        public long? MaxCreditRecommendation { get; set; }
        /// <summary>
        /// Rating assigned by Dun &amp; Bradstreet (meaning varies by country)
        /// </summary>
        /// <value>Rating assigned by Dun &amp; Bradstreet (meaning varies by country)</value>
        [DataMember(Name="dub_rating", EmitDefaultValue=false)]
        public string DubRating { get; set; }
        /// <summary>
        /// Part of the Dun &amp; Bradstreet rating which indicates the financial strength of the business (from - to in USD)
        /// </summary>
        /// <value>Part of the Dun &amp; Bradstreet rating which indicates the financial strength of the business (from - to in USD)</value>
        [DataMember(Name="dub_rating_financial_strength", EmitDefaultValue=false)]
        public string DubRatingFinancialStrength { get; set; }
        /// <summary>
        /// Part of the Dun &amp; Bradstreet rating which indicates the risk of a potential business cooperation: **1**: minimal risk, **2**: low risk, **3**: greater than average risk, **4**: significant level of risk, **&lt;other values&gt;**: insufficient information to define a risk indicator 
        /// </summary>
        /// <value>Part of the Dun &amp; Bradstreet rating which indicates the risk of a potential business cooperation: **1**: minimal risk, **2**: low risk, **3**: greater than average risk, **4**: significant level of risk, **&lt;other values&gt;**: insufficient information to define a risk indicator </value>
        [DataMember(Name="dub_rating_risk", EmitDefaultValue=false)]
        public string DubRatingRisk { get; set; }
        /// <summary>
        /// Part of the Dun &amp; Bradstreet rating which indicates the risk of a potential business cooperation: **1**: proceed with transaction - offer terms required, **2**: proceed with transaction, **3**: process with transaction, but monitor closely, **4**: take suitable assurances before extending credit, **&lt;other values&gt;**: no public information or D&amp;B proprietary information 
        /// </summary>
        /// <value>Part of the Dun &amp; Bradstreet rating which indicates the risk of a potential business cooperation: **1**: proceed with transaction - offer terms required, **2**: proceed with transaction, **3**: process with transaction, but monitor closely, **4**: take suitable assurances before extending credit, **&lt;other values&gt;**: no public information or D&amp;B proprietary information </value>
        [DataMember(Name="dub_rating_risk_description", EmitDefaultValue=false)]
        public string DubRatingRiskDescription { get; set; }
        /// <summary>
        /// Flag if open claims, legal claims, liens, protested bills or equivalent exists
        /// </summary>
        /// <value>Flag if open claims, legal claims, liens, protested bills or equivalent exists</value>
        [DataMember(Name="has_open_claims", EmitDefaultValue=false)]
        public bool? HasOpenClaims { get; set; }
        /// <summary>
        /// Flag if criminal proceedings exists
        /// </summary>
        /// <value>Flag if criminal proceedings exists</value>
        [DataMember(Name="has_criminal_proceedings", EmitDefaultValue=false)]
        public bool? HasCriminalProceedings { get; set; }
        /// <summary>
        /// Flag if special events concerning disasters such as fire, hurricanes etc. exists
        /// </summary>
        /// <value>Flag if special events concerning disasters such as fire, hurricanes etc. exists</value>
        [DataMember(Name="has_disaster_event", EmitDefaultValue=false)]
        public bool? HasDisasterEvent { get; set; }
        /// <summary>
        /// Flag if open bankruptcy, receivership liquidation or equivalent exists
        /// </summary>
        /// <value>Flag if open bankruptcy, receivership liquidation or equivalent exists</value>
        [DataMember(Name="has_financial_embarrassment", EmitDefaultValue=false)]
        public bool? HasFinancialEmbarrassment { get; set; }
        /// <summary>
        /// Flag if special events available including financial embarrassment and legal fillings exists
        /// </summary>
        /// <value>Flag if special events available including financial embarrassment and legal fillings exists</value>
        [DataMember(Name="has_financial_legal_event", EmitDefaultValue=false)]
        public bool? HasFinancialLegalEvent { get; set; }
        /// <summary>
        /// Flag if special events are available concerning changes to operational aspects including name changes, management changes, etc.
        /// </summary>
        /// <value>Flag if special events are available concerning changes to operational aspects including name changes, management changes, etc.</value>
        [DataMember(Name="has_special_event", EmitDefaultValue=false)]
        public bool? HasSpecialEvent { get; set; }
        /// <summary>
        /// Flag if special events exists that are not otherwise specified
        /// </summary>
        /// <value>Flag if special events exists that are not otherwise specified</value>
        [DataMember(Name="has_other_event", EmitDefaultValue=false)]
        public bool? HasOtherEvent { get; set; }
        /// <summary>
        /// Flag if open secured filing such as UCC filings, secured charges or equivalent exists
        /// </summary>
        /// <value>Flag if open secured filing such as UCC filings, secured charges or equivalent exists</value>
        [DataMember(Name="has_secured_filings", EmitDefaultValue=false)]
        public bool? HasSecuredFilings { get; set; }
        /// <summary>
        /// Flag if open suit(s), judgement(s), petitions or payment remarks exists
        /// </summary>
        /// <value>Flag if open suit(s), judgement(s), petitions or payment remarks exists</value>
        [DataMember(Name="has_lawsuit", EmitDefaultValue=false)]
        public bool? HasLawsuit { get; set; }
        /// <summary>
        /// Flag if the total number of employees is estimated or actual
        /// </summary>
        /// <value>Flag if the total number of employees is estimated or actual</value>
        [DataMember(Name="are_employees_estimated", EmitDefaultValue=false)]
        public bool? AreEmployeesEstimated { get; set; }
        /// <summary>
        /// Flag if the annual sales volume is estimated or actual
        /// </summary>
        /// <value>Flag if the annual sales volume is estimated or actual</value>
        [DataMember(Name="are_sales_estimated", EmitDefaultValue=false)]
        public bool? AreSalesEstimated { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BusinessDataDunsRatingResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("  DunsNumber: ").Append(DunsNumber).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  ContinentName: ").Append(ContinentName).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CountryCode3: ").Append(CountryCode3).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  HouseNumber: ").Append(HouseNumber).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  StateName: ").Append(StateName).Append("\n");
            sb.Append("  CeoName: ").Append(CeoName).Append("\n");
            sb.Append("  CeoTitle: ").Append(CeoTitle).Append("\n");
            sb.Append("  SicCode: ").Append(SicCode).Append("\n");
            sb.Append("  SicDescription: ").Append(SicDescription).Append("\n");
            sb.Append("  SicVersion: ").Append(SicVersion).Append("\n");
            sb.Append("  YearStarted: ").Append(YearStarted).Append("\n");
            sb.Append("  NetWorth: ").Append(NetWorth).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  TotalEmployees: ").Append(TotalEmployees).Append("\n");
            sb.Append("  TotalEmployeesIndicator: ").Append(TotalEmployeesIndicator).Append("\n");
            sb.Append("  TotalEmployeesIndicatorDescription: ").Append(TotalEmployeesIndicatorDescription).Append("\n");
            sb.Append("  LegalFormCode: ").Append(LegalFormCode).Append("\n");
            sb.Append("  LegalFormDescription: ").Append(LegalFormDescription).Append("\n");
            sb.Append("  ReportDate: ").Append(ReportDate).Append("\n");
            sb.Append("  IsOutOfBusiness: ").Append(IsOutOfBusiness).Append("\n");
            sb.Append("  IsBranch: ").Append(IsBranch).Append("\n");
            sb.Append("  BusinessRegistrationNumber: ").Append(BusinessRegistrationNumber).Append("\n");
            sb.Append("  BusinessRegistrationType: ").Append(BusinessRegistrationType).Append("\n");
            sb.Append("  IncorporationYear: ").Append(IncorporationYear).Append("\n");
            sb.Append("  TradeStyles: ").Append(TradeStyles).Append("\n");
            sb.Append("  EnquiryDuns: ").Append(EnquiryDuns).Append("\n");
            sb.Append("  Sales: ").Append(Sales).Append("\n");
            sb.Append("  SalesEstimatedDescription: ").Append(SalesEstimatedDescription).Append("\n");
            sb.Append("  PaydexScore: ").Append(PaydexScore).Append("\n");
            sb.Append("  PaydexScoreDescription: ").Append(PaydexScoreDescription).Append("\n");
            sb.Append("  PaydexNorm: ").Append(PaydexNorm).Append("\n");
            sb.Append("  IntangibleAssets: ").Append(IntangibleAssets).Append("\n");
            sb.Append("  MaxCreditRecommendation: ").Append(MaxCreditRecommendation).Append("\n");
            sb.Append("  DubRating: ").Append(DubRating).Append("\n");
            sb.Append("  DubRatingFinancialStrength: ").Append(DubRatingFinancialStrength).Append("\n");
            sb.Append("  DubRatingRisk: ").Append(DubRatingRisk).Append("\n");
            sb.Append("  DubRatingRiskDescription: ").Append(DubRatingRiskDescription).Append("\n");
            sb.Append("  HasOpenClaims: ").Append(HasOpenClaims).Append("\n");
            sb.Append("  HasCriminalProceedings: ").Append(HasCriminalProceedings).Append("\n");
            sb.Append("  HasDisasterEvent: ").Append(HasDisasterEvent).Append("\n");
            sb.Append("  HasFinancialEmbarrassment: ").Append(HasFinancialEmbarrassment).Append("\n");
            sb.Append("  HasFinancialLegalEvent: ").Append(HasFinancialLegalEvent).Append("\n");
            sb.Append("  HasSpecialEvent: ").Append(HasSpecialEvent).Append("\n");
            sb.Append("  HasOtherEvent: ").Append(HasOtherEvent).Append("\n");
            sb.Append("  HasSecuredFilings: ").Append(HasSecuredFilings).Append("\n");
            sb.Append("  HasLawsuit: ").Append(HasLawsuit).Append("\n");
            sb.Append("  AreEmployeesEstimated: ").Append(AreEmployeesEstimated).Append("\n");
            sb.Append("  AreSalesEstimated: ").Append(AreSalesEstimated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BusinessDataDunsRatingResponse);
        }

        /// <summary>
        /// Returns true if BusinessDataDunsRatingResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of BusinessDataDunsRatingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BusinessDataDunsRatingResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.StatusDescription == other.StatusDescription ||
                    this.StatusDescription != null &&
                    this.StatusDescription.Equals(other.StatusDescription)
                ) && 
                (
                    this.DunsNumber == other.DunsNumber ||
                    this.DunsNumber != null &&
                    this.DunsNumber.Equals(other.DunsNumber)
                ) && 
                (
                    this.CompanyName == other.CompanyName ||
                    this.CompanyName != null &&
                    this.CompanyName.Equals(other.CompanyName)
                ) && 
                (
                    this.ContinentName == other.ContinentName ||
                    this.ContinentName != null &&
                    this.ContinentName.Equals(other.ContinentName)
                ) && 
                (
                    this.CountryCode == other.CountryCode ||
                    this.CountryCode != null &&
                    this.CountryCode.Equals(other.CountryCode)
                ) && 
                (
                    this.CountryCode3 == other.CountryCode3 ||
                    this.CountryCode3 != null &&
                    this.CountryCode3.Equals(other.CountryCode3)
                ) && 
                (
                    this.CountryName == other.CountryName ||
                    this.CountryName != null &&
                    this.CountryName.Equals(other.CountryName)
                ) && 
                (
                    this.Zip == other.Zip ||
                    this.Zip != null &&
                    this.Zip.Equals(other.Zip)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.Street == other.Street ||
                    this.Street != null &&
                    this.Street.Equals(other.Street)
                ) && 
                (
                    this.HouseNumber == other.HouseNumber ||
                    this.HouseNumber != null &&
                    this.HouseNumber.Equals(other.HouseNumber)
                ) && 
                (
                    this.PhoneNumber == other.PhoneNumber ||
                    this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    this.FaxNumber == other.FaxNumber ||
                    this.FaxNumber != null &&
                    this.FaxNumber.Equals(other.FaxNumber)
                ) && 
                (
                    this.StateName == other.StateName ||
                    this.StateName != null &&
                    this.StateName.Equals(other.StateName)
                ) && 
                (
                    this.CeoName == other.CeoName ||
                    this.CeoName != null &&
                    this.CeoName.Equals(other.CeoName)
                ) && 
                (
                    this.CeoTitle == other.CeoTitle ||
                    this.CeoTitle != null &&
                    this.CeoTitle.Equals(other.CeoTitle)
                ) && 
                (
                    this.SicCode == other.SicCode ||
                    this.SicCode != null &&
                    this.SicCode.Equals(other.SicCode)
                ) && 
                (
                    this.SicDescription == other.SicDescription ||
                    this.SicDescription != null &&
                    this.SicDescription.Equals(other.SicDescription)
                ) && 
                (
                    this.SicVersion == other.SicVersion ||
                    this.SicVersion != null &&
                    this.SicVersion.Equals(other.SicVersion)
                ) && 
                (
                    this.YearStarted == other.YearStarted ||
                    this.YearStarted != null &&
                    this.YearStarted.Equals(other.YearStarted)
                ) && 
                (
                    this.NetWorth == other.NetWorth ||
                    this.NetWorth != null &&
                    this.NetWorth.Equals(other.NetWorth)
                ) && 
                (
                    this.CurrencyCode == other.CurrencyCode ||
                    this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(other.CurrencyCode)
                ) && 
                (
                    this.CurrencyName == other.CurrencyName ||
                    this.CurrencyName != null &&
                    this.CurrencyName.Equals(other.CurrencyName)
                ) && 
                (
                    this.TotalEmployees == other.TotalEmployees ||
                    this.TotalEmployees != null &&
                    this.TotalEmployees.Equals(other.TotalEmployees)
                ) && 
                (
                    this.TotalEmployeesIndicator == other.TotalEmployeesIndicator ||
                    this.TotalEmployeesIndicator != null &&
                    this.TotalEmployeesIndicator.Equals(other.TotalEmployeesIndicator)
                ) && 
                (
                    this.TotalEmployeesIndicatorDescription == other.TotalEmployeesIndicatorDescription ||
                    this.TotalEmployeesIndicatorDescription != null &&
                    this.TotalEmployeesIndicatorDescription.Equals(other.TotalEmployeesIndicatorDescription)
                ) && 
                (
                    this.LegalFormCode == other.LegalFormCode ||
                    this.LegalFormCode != null &&
                    this.LegalFormCode.Equals(other.LegalFormCode)
                ) && 
                (
                    this.LegalFormDescription == other.LegalFormDescription ||
                    this.LegalFormDescription != null &&
                    this.LegalFormDescription.Equals(other.LegalFormDescription)
                ) && 
                (
                    this.ReportDate == other.ReportDate ||
                    this.ReportDate != null &&
                    this.ReportDate.Equals(other.ReportDate)
                ) && 
                (
                    this.IsOutOfBusiness == other.IsOutOfBusiness ||
                    this.IsOutOfBusiness != null &&
                    this.IsOutOfBusiness.Equals(other.IsOutOfBusiness)
                ) && 
                (
                    this.IsBranch == other.IsBranch ||
                    this.IsBranch != null &&
                    this.IsBranch.Equals(other.IsBranch)
                ) && 
                (
                    this.BusinessRegistrationNumber == other.BusinessRegistrationNumber ||
                    this.BusinessRegistrationNumber != null &&
                    this.BusinessRegistrationNumber.Equals(other.BusinessRegistrationNumber)
                ) && 
                (
                    this.BusinessRegistrationType == other.BusinessRegistrationType ||
                    this.BusinessRegistrationType != null &&
                    this.BusinessRegistrationType.Equals(other.BusinessRegistrationType)
                ) && 
                (
                    this.IncorporationYear == other.IncorporationYear ||
                    this.IncorporationYear != null &&
                    this.IncorporationYear.Equals(other.IncorporationYear)
                ) && 
                (
                    this.TradeStyles == other.TradeStyles ||
                    this.TradeStyles != null &&
                    this.TradeStyles.SequenceEqual(other.TradeStyles)
                ) && 
                (
                    this.EnquiryDuns == other.EnquiryDuns ||
                    this.EnquiryDuns != null &&
                    this.EnquiryDuns.Equals(other.EnquiryDuns)
                ) && 
                (
                    this.Sales == other.Sales ||
                    this.Sales != null &&
                    this.Sales.Equals(other.Sales)
                ) && 
                (
                    this.SalesEstimatedDescription == other.SalesEstimatedDescription ||
                    this.SalesEstimatedDescription != null &&
                    this.SalesEstimatedDescription.Equals(other.SalesEstimatedDescription)
                ) && 
                (
                    this.PaydexScore == other.PaydexScore ||
                    this.PaydexScore != null &&
                    this.PaydexScore.Equals(other.PaydexScore)
                ) && 
                (
                    this.PaydexScoreDescription == other.PaydexScoreDescription ||
                    this.PaydexScoreDescription != null &&
                    this.PaydexScoreDescription.Equals(other.PaydexScoreDescription)
                ) && 
                (
                    this.PaydexNorm == other.PaydexNorm ||
                    this.PaydexNorm != null &&
                    this.PaydexNorm.Equals(other.PaydexNorm)
                ) && 
                (
                    this.IntangibleAssets == other.IntangibleAssets ||
                    this.IntangibleAssets != null &&
                    this.IntangibleAssets.Equals(other.IntangibleAssets)
                ) && 
                (
                    this.MaxCreditRecommendation == other.MaxCreditRecommendation ||
                    this.MaxCreditRecommendation != null &&
                    this.MaxCreditRecommendation.Equals(other.MaxCreditRecommendation)
                ) && 
                (
                    this.DubRating == other.DubRating ||
                    this.DubRating != null &&
                    this.DubRating.Equals(other.DubRating)
                ) && 
                (
                    this.DubRatingFinancialStrength == other.DubRatingFinancialStrength ||
                    this.DubRatingFinancialStrength != null &&
                    this.DubRatingFinancialStrength.Equals(other.DubRatingFinancialStrength)
                ) && 
                (
                    this.DubRatingRisk == other.DubRatingRisk ||
                    this.DubRatingRisk != null &&
                    this.DubRatingRisk.Equals(other.DubRatingRisk)
                ) && 
                (
                    this.DubRatingRiskDescription == other.DubRatingRiskDescription ||
                    this.DubRatingRiskDescription != null &&
                    this.DubRatingRiskDescription.Equals(other.DubRatingRiskDescription)
                ) && 
                (
                    this.HasOpenClaims == other.HasOpenClaims ||
                    this.HasOpenClaims != null &&
                    this.HasOpenClaims.Equals(other.HasOpenClaims)
                ) && 
                (
                    this.HasCriminalProceedings == other.HasCriminalProceedings ||
                    this.HasCriminalProceedings != null &&
                    this.HasCriminalProceedings.Equals(other.HasCriminalProceedings)
                ) && 
                (
                    this.HasDisasterEvent == other.HasDisasterEvent ||
                    this.HasDisasterEvent != null &&
                    this.HasDisasterEvent.Equals(other.HasDisasterEvent)
                ) && 
                (
                    this.HasFinancialEmbarrassment == other.HasFinancialEmbarrassment ||
                    this.HasFinancialEmbarrassment != null &&
                    this.HasFinancialEmbarrassment.Equals(other.HasFinancialEmbarrassment)
                ) && 
                (
                    this.HasFinancialLegalEvent == other.HasFinancialLegalEvent ||
                    this.HasFinancialLegalEvent != null &&
                    this.HasFinancialLegalEvent.Equals(other.HasFinancialLegalEvent)
                ) && 
                (
                    this.HasSpecialEvent == other.HasSpecialEvent ||
                    this.HasSpecialEvent != null &&
                    this.HasSpecialEvent.Equals(other.HasSpecialEvent)
                ) && 
                (
                    this.HasOtherEvent == other.HasOtherEvent ||
                    this.HasOtherEvent != null &&
                    this.HasOtherEvent.Equals(other.HasOtherEvent)
                ) && 
                (
                    this.HasSecuredFilings == other.HasSecuredFilings ||
                    this.HasSecuredFilings != null &&
                    this.HasSecuredFilings.Equals(other.HasSecuredFilings)
                ) && 
                (
                    this.HasLawsuit == other.HasLawsuit ||
                    this.HasLawsuit != null &&
                    this.HasLawsuit.Equals(other.HasLawsuit)
                ) && 
                (
                    this.AreEmployeesEstimated == other.AreEmployeesEstimated ||
                    this.AreEmployeesEstimated != null &&
                    this.AreEmployeesEstimated.Equals(other.AreEmployeesEstimated)
                ) && 
                (
                    this.AreSalesEstimated == other.AreSalesEstimated ||
                    this.AreSalesEstimated != null &&
                    this.AreSalesEstimated.Equals(other.AreSalesEstimated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.StatusDescription != null)
                    hash = hash * 59 + this.StatusDescription.GetHashCode();
                if (this.DunsNumber != null)
                    hash = hash * 59 + this.DunsNumber.GetHashCode();
                if (this.CompanyName != null)
                    hash = hash * 59 + this.CompanyName.GetHashCode();
                if (this.ContinentName != null)
                    hash = hash * 59 + this.ContinentName.GetHashCode();
                if (this.CountryCode != null)
                    hash = hash * 59 + this.CountryCode.GetHashCode();
                if (this.CountryCode3 != null)
                    hash = hash * 59 + this.CountryCode3.GetHashCode();
                if (this.CountryName != null)
                    hash = hash * 59 + this.CountryName.GetHashCode();
                if (this.Zip != null)
                    hash = hash * 59 + this.Zip.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.Street != null)
                    hash = hash * 59 + this.Street.GetHashCode();
                if (this.HouseNumber != null)
                    hash = hash * 59 + this.HouseNumber.GetHashCode();
                if (this.PhoneNumber != null)
                    hash = hash * 59 + this.PhoneNumber.GetHashCode();
                if (this.FaxNumber != null)
                    hash = hash * 59 + this.FaxNumber.GetHashCode();
                if (this.StateName != null)
                    hash = hash * 59 + this.StateName.GetHashCode();
                if (this.CeoName != null)
                    hash = hash * 59 + this.CeoName.GetHashCode();
                if (this.CeoTitle != null)
                    hash = hash * 59 + this.CeoTitle.GetHashCode();
                if (this.SicCode != null)
                    hash = hash * 59 + this.SicCode.GetHashCode();
                if (this.SicDescription != null)
                    hash = hash * 59 + this.SicDescription.GetHashCode();
                if (this.SicVersion != null)
                    hash = hash * 59 + this.SicVersion.GetHashCode();
                if (this.YearStarted != null)
                    hash = hash * 59 + this.YearStarted.GetHashCode();
                if (this.NetWorth != null)
                    hash = hash * 59 + this.NetWorth.GetHashCode();
                if (this.CurrencyCode != null)
                    hash = hash * 59 + this.CurrencyCode.GetHashCode();
                if (this.CurrencyName != null)
                    hash = hash * 59 + this.CurrencyName.GetHashCode();
                if (this.TotalEmployees != null)
                    hash = hash * 59 + this.TotalEmployees.GetHashCode();
                if (this.TotalEmployeesIndicator != null)
                    hash = hash * 59 + this.TotalEmployeesIndicator.GetHashCode();
                if (this.TotalEmployeesIndicatorDescription != null)
                    hash = hash * 59 + this.TotalEmployeesIndicatorDescription.GetHashCode();
                if (this.LegalFormCode != null)
                    hash = hash * 59 + this.LegalFormCode.GetHashCode();
                if (this.LegalFormDescription != null)
                    hash = hash * 59 + this.LegalFormDescription.GetHashCode();
                if (this.ReportDate != null)
                    hash = hash * 59 + this.ReportDate.GetHashCode();
                if (this.IsOutOfBusiness != null)
                    hash = hash * 59 + this.IsOutOfBusiness.GetHashCode();
                if (this.IsBranch != null)
                    hash = hash * 59 + this.IsBranch.GetHashCode();
                if (this.BusinessRegistrationNumber != null)
                    hash = hash * 59 + this.BusinessRegistrationNumber.GetHashCode();
                if (this.BusinessRegistrationType != null)
                    hash = hash * 59 + this.BusinessRegistrationType.GetHashCode();
                if (this.IncorporationYear != null)
                    hash = hash * 59 + this.IncorporationYear.GetHashCode();
                if (this.TradeStyles != null)
                    hash = hash * 59 + this.TradeStyles.GetHashCode();
                if (this.EnquiryDuns != null)
                    hash = hash * 59 + this.EnquiryDuns.GetHashCode();
                if (this.Sales != null)
                    hash = hash * 59 + this.Sales.GetHashCode();
                if (this.SalesEstimatedDescription != null)
                    hash = hash * 59 + this.SalesEstimatedDescription.GetHashCode();
                if (this.PaydexScore != null)
                    hash = hash * 59 + this.PaydexScore.GetHashCode();
                if (this.PaydexScoreDescription != null)
                    hash = hash * 59 + this.PaydexScoreDescription.GetHashCode();
                if (this.PaydexNorm != null)
                    hash = hash * 59 + this.PaydexNorm.GetHashCode();
                if (this.IntangibleAssets != null)
                    hash = hash * 59 + this.IntangibleAssets.GetHashCode();
                if (this.MaxCreditRecommendation != null)
                    hash = hash * 59 + this.MaxCreditRecommendation.GetHashCode();
                if (this.DubRating != null)
                    hash = hash * 59 + this.DubRating.GetHashCode();
                if (this.DubRatingFinancialStrength != null)
                    hash = hash * 59 + this.DubRatingFinancialStrength.GetHashCode();
                if (this.DubRatingRisk != null)
                    hash = hash * 59 + this.DubRatingRisk.GetHashCode();
                if (this.DubRatingRiskDescription != null)
                    hash = hash * 59 + this.DubRatingRiskDescription.GetHashCode();
                if (this.HasOpenClaims != null)
                    hash = hash * 59 + this.HasOpenClaims.GetHashCode();
                if (this.HasCriminalProceedings != null)
                    hash = hash * 59 + this.HasCriminalProceedings.GetHashCode();
                if (this.HasDisasterEvent != null)
                    hash = hash * 59 + this.HasDisasterEvent.GetHashCode();
                if (this.HasFinancialEmbarrassment != null)
                    hash = hash * 59 + this.HasFinancialEmbarrassment.GetHashCode();
                if (this.HasFinancialLegalEvent != null)
                    hash = hash * 59 + this.HasFinancialLegalEvent.GetHashCode();
                if (this.HasSpecialEvent != null)
                    hash = hash * 59 + this.HasSpecialEvent.GetHashCode();
                if (this.HasOtherEvent != null)
                    hash = hash * 59 + this.HasOtherEvent.GetHashCode();
                if (this.HasSecuredFilings != null)
                    hash = hash * 59 + this.HasSecuredFilings.GetHashCode();
                if (this.HasLawsuit != null)
                    hash = hash * 59 + this.HasLawsuit.GetHashCode();
                if (this.AreEmployeesEstimated != null)
                    hash = hash * 59 + this.AreEmployeesEstimated.GetHashCode();
                if (this.AreSalesEstimated != null)
                    hash = hash * 59 + this.AreSalesEstimated.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
