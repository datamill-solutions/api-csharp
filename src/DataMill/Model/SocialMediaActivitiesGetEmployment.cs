/* 
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market.  GitHub for SDKs: https://github.com/datamill-solutions 
 *
 * OpenAPI spec version: 1.6.5
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DataMill.Model
{
    /// <summary>
    /// Employment information for /social-media/activities/get
    /// </summary>
    [DataContract]
    public partial class SocialMediaActivitiesGetEmployment :  IEquatable<SocialMediaActivitiesGetEmployment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SocialMediaActivitiesGetEmployment" /> class.
        /// </summary>
        /// <param name="Company">The company&#39;s name.</param>
        /// <param name="Title">The business title / position the person had in this company.</param>
        /// <param name="StartDate">Either year and month or year only when the person started to work for this company.</param>
        /// <param name="EndDate">Either year and month or year only when the person ended to work for this company. The key does not exist if the person still works for this company.</param>
        /// <param name="Current">Flag (0 or 1) if the person still works for this company.</param>
        public SocialMediaActivitiesGetEmployment(string Company = null, string Title = null, string StartDate = null, string EndDate = null, long? Current = null)
        {
            this.Company = Company;
            this.Title = Title;
            this.StartDate = StartDate;
            this.EndDate = EndDate;
            this.Current = Current;
        }
        
        /// <summary>
        /// The company&#39;s name
        /// </summary>
        /// <value>The company&#39;s name</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }
        /// <summary>
        /// The business title / position the person had in this company
        /// </summary>
        /// <value>The business title / position the person had in this company</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Either year and month or year only when the person started to work for this company
        /// </summary>
        /// <value>Either year and month or year only when the person started to work for this company</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public string StartDate { get; set; }
        /// <summary>
        /// Either year and month or year only when the person ended to work for this company. The key does not exist if the person still works for this company
        /// </summary>
        /// <value>Either year and month or year only when the person ended to work for this company. The key does not exist if the person still works for this company</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public string EndDate { get; set; }
        /// <summary>
        /// Flag (0 or 1) if the person still works for this company
        /// </summary>
        /// <value>Flag (0 or 1) if the person still works for this company</value>
        [DataMember(Name="current", EmitDefaultValue=false)]
        public long? Current { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SocialMediaActivitiesGetEmployment {\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SocialMediaActivitiesGetEmployment);
        }

        /// <summary>
        /// Returns true if SocialMediaActivitiesGetEmployment instances are equal
        /// </summary>
        /// <param name="other">Instance of SocialMediaActivitiesGetEmployment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SocialMediaActivitiesGetEmployment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Company == other.Company ||
                    this.Company != null &&
                    this.Company.Equals(other.Company)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                ) && 
                (
                    this.Current == other.Current ||
                    this.Current != null &&
                    this.Current.Equals(other.Current)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Company != null)
                    hash = hash * 59 + this.Company.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                if (this.Current != null)
                    hash = hash * 59 + this.Current.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
