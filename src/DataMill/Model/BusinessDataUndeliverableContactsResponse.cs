/* 
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market. 
 *
 * OpenAPI spec version: 1.6.4
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace DataMill.Model
{
    /// <summary>
    /// Response of successful transformation request for /business-data/undeliverable-contacts/search
    /// </summary>
    [DataContract]
    public partial class BusinessDataUndeliverableContactsResponse :  IEquatable<BusinessDataUndeliverableContactsResponse>, IValidatableObject
    {
        /// <summary>
        /// Flag if sending a mail would result in an undeliverable state [**0**, **1**]
        /// </summary>
        /// <value>Flag if sending a mail would result in an undeliverable state [**0**, **1**]</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UndeliverableEnum
        {
            
            /// <summary>
            /// Enum _0 for "0"
            /// </summary>
            [EnumMember(Value = "0")]
            _0,
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1
        }

        /// <summary>
        /// Flag if the person is deceased [**0**, **1**]
        /// </summary>
        /// <value>Flag if the person is deceased [**0**, **1**]</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DeceasedEnum
        {
            
            /// <summary>
            /// Enum _0 for "0"
            /// </summary>
            [EnumMember(Value = "0")]
            _0,
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1
        }

        /// <summary>
        /// Flag if the person has moved to a new address but we do not know the new address [**0**, **1**]
        /// </summary>
        /// <value>Flag if the person has moved to a new address but we do not know the new address [**0**, **1**]</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MovedEnum
        {
            
            /// <summary>
            /// Enum _0 for "0"
            /// </summary>
            [EnumMember(Value = "0")]
            _0,
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1
        }

        /// <summary>
        /// Flag if the person has moved to a new address and we know the new address [**0**, **1**]
        /// </summary>
        /// <value>Flag if the person has moved to a new address and we know the new address [**0**, **1**]</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NewAddressAvailableEnum
        {
            
            /// <summary>
            /// Enum _0 for "0"
            /// </summary>
            [EnumMember(Value = "0")]
            _0,
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1
        }

        /// <summary>
        /// Flag if sending a mail would result in an undeliverable state [**0**, **1**]
        /// </summary>
        /// <value>Flag if sending a mail would result in an undeliverable state [**0**, **1**]</value>
        [DataMember(Name="undeliverable", EmitDefaultValue=false)]
        public UndeliverableEnum? Undeliverable { get; set; }
        /// <summary>
        /// Flag if the person is deceased [**0**, **1**]
        /// </summary>
        /// <value>Flag if the person is deceased [**0**, **1**]</value>
        [DataMember(Name="deceased", EmitDefaultValue=false)]
        public DeceasedEnum? Deceased { get; set; }
        /// <summary>
        /// Flag if the person has moved to a new address but we do not know the new address [**0**, **1**]
        /// </summary>
        /// <value>Flag if the person has moved to a new address but we do not know the new address [**0**, **1**]</value>
        [DataMember(Name="moved", EmitDefaultValue=false)]
        public MovedEnum? Moved { get; set; }
        /// <summary>
        /// Flag if the person has moved to a new address and we know the new address [**0**, **1**]
        /// </summary>
        /// <value>Flag if the person has moved to a new address and we know the new address [**0**, **1**]</value>
        [DataMember(Name="new_address_available", EmitDefaultValue=false)]
        public NewAddressAvailableEnum? NewAddressAvailable { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessDataUndeliverableContactsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BusinessDataUndeliverableContactsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessDataUndeliverableContactsResponse" /> class.
        /// </summary>
        /// <param name="Undeliverable">Flag if sending a mail would result in an undeliverable state [**0**, **1**] (required).</param>
        /// <param name="Deceased">Flag if the person is deceased [**0**, **1**] (required).</param>
        /// <param name="Moved">Flag if the person has moved to a new address but we do not know the new address [**0**, **1**] (required).</param>
        /// <param name="NewAddressAvailable">Flag if the person has moved to a new address and we know the new address [**0**, **1**] (required).</param>
        /// <param name="Contact">Contact (required).</param>
        public BusinessDataUndeliverableContactsResponse(UndeliverableEnum? Undeliverable = null, DeceasedEnum? Deceased = null, MovedEnum? Moved = null, NewAddressAvailableEnum? NewAddressAvailable = null, BusinessDataUndeliverableContactsSearchContact Contact = null)
        {
            // to ensure "Undeliverable" is required (not null)
            if (Undeliverable == null)
            {
                throw new InvalidDataException("Undeliverable is a required property for BusinessDataUndeliverableContactsResponse and cannot be null");
            }
            else
            {
                this.Undeliverable = Undeliverable;
            }
            // to ensure "Deceased" is required (not null)
            if (Deceased == null)
            {
                throw new InvalidDataException("Deceased is a required property for BusinessDataUndeliverableContactsResponse and cannot be null");
            }
            else
            {
                this.Deceased = Deceased;
            }
            // to ensure "Moved" is required (not null)
            if (Moved == null)
            {
                throw new InvalidDataException("Moved is a required property for BusinessDataUndeliverableContactsResponse and cannot be null");
            }
            else
            {
                this.Moved = Moved;
            }
            // to ensure "NewAddressAvailable" is required (not null)
            if (NewAddressAvailable == null)
            {
                throw new InvalidDataException("NewAddressAvailable is a required property for BusinessDataUndeliverableContactsResponse and cannot be null");
            }
            else
            {
                this.NewAddressAvailable = NewAddressAvailable;
            }
            // to ensure "Contact" is required (not null)
            if (Contact == null)
            {
                throw new InvalidDataException("Contact is a required property for BusinessDataUndeliverableContactsResponse and cannot be null");
            }
            else
            {
                this.Contact = Contact;
            }
        }
        
        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public BusinessDataUndeliverableContactsSearchContact Contact { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BusinessDataUndeliverableContactsResponse {\n");
            sb.Append("  Undeliverable: ").Append(Undeliverable).Append("\n");
            sb.Append("  Deceased: ").Append(Deceased).Append("\n");
            sb.Append("  Moved: ").Append(Moved).Append("\n");
            sb.Append("  NewAddressAvailable: ").Append(NewAddressAvailable).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BusinessDataUndeliverableContactsResponse);
        }

        /// <summary>
        /// Returns true if BusinessDataUndeliverableContactsResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of BusinessDataUndeliverableContactsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BusinessDataUndeliverableContactsResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Undeliverable == other.Undeliverable ||
                    this.Undeliverable != null &&
                    this.Undeliverable.Equals(other.Undeliverable)
                ) && 
                (
                    this.Deceased == other.Deceased ||
                    this.Deceased != null &&
                    this.Deceased.Equals(other.Deceased)
                ) && 
                (
                    this.Moved == other.Moved ||
                    this.Moved != null &&
                    this.Moved.Equals(other.Moved)
                ) && 
                (
                    this.NewAddressAvailable == other.NewAddressAvailable ||
                    this.NewAddressAvailable != null &&
                    this.NewAddressAvailable.Equals(other.NewAddressAvailable)
                ) && 
                (
                    this.Contact == other.Contact ||
                    this.Contact != null &&
                    this.Contact.Equals(other.Contact)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Undeliverable != null)
                    hash = hash * 59 + this.Undeliverable.GetHashCode();
                if (this.Deceased != null)
                    hash = hash * 59 + this.Deceased.GetHashCode();
                if (this.Moved != null)
                    hash = hash * 59 + this.Moved.GetHashCode();
                if (this.NewAddressAvailable != null)
                    hash = hash * 59 + this.NewAddressAvailable.GetHashCode();
                if (this.Contact != null)
                    hash = hash * 59 + this.Contact.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
