/* 
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market.  GitHub for SDKs: https://github.com/datamill-solutions 
 *
 * OpenAPI spec version: 1.6.5
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using DataMill.Client;
using DataMill.Model;

namespace DataMill.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConvertApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Convert any string to capitalize words
        /// </summary>
        /// <remarks>
        /// Changes any word of a given text so that the first letter is capitalized and all the others turned into lower case. Special proper names, like \&quot;DiCaprio\&quot; are detected and ignored. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ConvertCapitalFirstResponse</returns>
        ConvertCapitalFirstResponse ConvertCapitalFirst (string text);

        /// <summary>
        /// Convert any string to capitalize words
        /// </summary>
        /// <remarks>
        /// Changes any word of a given text so that the first letter is capitalized and all the others turned into lower case. Special proper names, like \&quot;DiCaprio\&quot; are detected and ignored. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ApiResponse of ConvertCapitalFirstResponse</returns>
        ApiResponse<ConvertCapitalFirstResponse> ConvertCapitalFirstWithHttpInfo (string text);
        /// <summary>
        /// Convert any string to lower case
        /// </summary>
        /// <remarks>
        /// Converts all letters of any word in a given string in the respective lowercase. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ConvertLowerCaseResponse</returns>
        ConvertLowerCaseResponse ConvertLowerCase (string text);

        /// <summary>
        /// Convert any string to lower case
        /// </summary>
        /// <remarks>
        /// Converts all letters of any word in a given string in the respective lowercase. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ApiResponse of ConvertLowerCaseResponse</returns>
        ApiResponse<ConvertLowerCaseResponse> ConvertLowerCaseWithHttpInfo (string text);
        /// <summary>
        /// Convert any string to upper case
        /// </summary>
        /// <remarks>
        /// Converts all letters of any word in a given string in the respective capital. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ConvertUpperCaseResponse</returns>
        ConvertUpperCaseResponse ConvertUpperCase (string text);

        /// <summary>
        /// Convert any string to upper case
        /// </summary>
        /// <remarks>
        /// Converts all letters of any word in a given string in the respective capital. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ApiResponse of ConvertUpperCaseResponse</returns>
        ApiResponse<ConvertUpperCaseResponse> ConvertUpperCaseWithHttpInfo (string text);
        /// <summary>
        /// Wrap text
        /// </summary>
        /// <remarks>
        /// Breaks a text into multiple newlines. Each line will be separated by a \\r (CR, ASCII 13) and \\n (LF, ASCII 10) character. The number of characters a line break will be inserted after can be justified. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Fre-form text to be wrapped.</param>
        /// <param name="limit">The number of characters a linefeed will be inserted after (maximum character length per line).</param>
        /// <param name="mode">The mode how the linefeed will be inserted. Either before (default) the current word, after the current word or exactly after the character. Possible values are **before** to break before last word, **after** to break after last word, **exact** to break at limit.  (optional)</param>
        /// <param name="linebreak">Defines which line separator should be used. Possible values are **full** for *\\r\\n*, **single** for *\\n*, **html** for *&amp;lt;br&amp;gt;*  (optional)</param>
        /// <returns>ConvertWrapResponse</returns>
        ConvertWrapResponse ConvertWrap (string text, int? limit, string mode = null, string linebreak = null);

        /// <summary>
        /// Wrap text
        /// </summary>
        /// <remarks>
        /// Breaks a text into multiple newlines. Each line will be separated by a \\r (CR, ASCII 13) and \\n (LF, ASCII 10) character. The number of characters a line break will be inserted after can be justified. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Fre-form text to be wrapped.</param>
        /// <param name="limit">The number of characters a linefeed will be inserted after (maximum character length per line).</param>
        /// <param name="mode">The mode how the linefeed will be inserted. Either before (default) the current word, after the current word or exactly after the character. Possible values are **before** to break before last word, **after** to break after last word, **exact** to break at limit.  (optional)</param>
        /// <param name="linebreak">Defines which line separator should be used. Possible values are **full** for *\\r\\n*, **single** for *\\n*, **html** for *&amp;lt;br&amp;gt;*  (optional)</param>
        /// <returns>ApiResponse of ConvertWrapResponse</returns>
        ApiResponse<ConvertWrapResponse> ConvertWrapWithHttpInfo (string text, int? limit, string mode = null, string linebreak = null);
        /// <summary>
        /// Calculate phonetic codes of a given text
        /// </summary>
        /// <remarks>
        /// Get the phonetic code of a given text. Currently three phonetic algorithms are available:  * **Soundex** (algorithm code 1)  * **Colcogne Phonetic** (algorithm code 2)  * **Metaphon** (algorithm code 3) 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text which should be converted. Each word will be converted separatly and generate a single entry in the result. </param>
        /// <param name="phoneticAlgorithm">The phonetic algorithm which should be applied. If no algorithm code will be provided **Soundex** will be used. Codes:  * 1 &#x3D; Soundex  * 2 &#x3D; Colcogne Phonetic  * 3 &#x3D; Metaphon  (optional)</param>
        /// <returns>PhoneticCodeGetResponse</returns>
        PhoneticCodeGetResponse GetPhoneticCode (string text, int? phoneticAlgorithm = null);

        /// <summary>
        /// Calculate phonetic codes of a given text
        /// </summary>
        /// <remarks>
        /// Get the phonetic code of a given text. Currently three phonetic algorithms are available:  * **Soundex** (algorithm code 1)  * **Colcogne Phonetic** (algorithm code 2)  * **Metaphon** (algorithm code 3) 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text which should be converted. Each word will be converted separatly and generate a single entry in the result. </param>
        /// <param name="phoneticAlgorithm">The phonetic algorithm which should be applied. If no algorithm code will be provided **Soundex** will be used. Codes:  * 1 &#x3D; Soundex  * 2 &#x3D; Colcogne Phonetic  * 3 &#x3D; Metaphon  (optional)</param>
        /// <returns>ApiResponse of PhoneticCodeGetResponse</returns>
        ApiResponse<PhoneticCodeGetResponse> GetPhoneticCodeWithHttpInfo (string text, int? phoneticAlgorithm = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Convert any string to capitalize words
        /// </summary>
        /// <remarks>
        /// Changes any word of a given text so that the first letter is capitalized and all the others turned into lower case. Special proper names, like \&quot;DiCaprio\&quot; are detected and ignored. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ConvertCapitalFirstResponse</returns>
        System.Threading.Tasks.Task<ConvertCapitalFirstResponse> ConvertCapitalFirstAsync (string text);

        /// <summary>
        /// Convert any string to capitalize words
        /// </summary>
        /// <remarks>
        /// Changes any word of a given text so that the first letter is capitalized and all the others turned into lower case. Special proper names, like \&quot;DiCaprio\&quot; are detected and ignored. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ApiResponse (ConvertCapitalFirstResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvertCapitalFirstResponse>> ConvertCapitalFirstAsyncWithHttpInfo (string text);
        /// <summary>
        /// Convert any string to lower case
        /// </summary>
        /// <remarks>
        /// Converts all letters of any word in a given string in the respective lowercase. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ConvertLowerCaseResponse</returns>
        System.Threading.Tasks.Task<ConvertLowerCaseResponse> ConvertLowerCaseAsync (string text);

        /// <summary>
        /// Convert any string to lower case
        /// </summary>
        /// <remarks>
        /// Converts all letters of any word in a given string in the respective lowercase. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ApiResponse (ConvertLowerCaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvertLowerCaseResponse>> ConvertLowerCaseAsyncWithHttpInfo (string text);
        /// <summary>
        /// Convert any string to upper case
        /// </summary>
        /// <remarks>
        /// Converts all letters of any word in a given string in the respective capital. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ConvertUpperCaseResponse</returns>
        System.Threading.Tasks.Task<ConvertUpperCaseResponse> ConvertUpperCaseAsync (string text);

        /// <summary>
        /// Convert any string to upper case
        /// </summary>
        /// <remarks>
        /// Converts all letters of any word in a given string in the respective capital. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ApiResponse (ConvertUpperCaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvertUpperCaseResponse>> ConvertUpperCaseAsyncWithHttpInfo (string text);
        /// <summary>
        /// Wrap text
        /// </summary>
        /// <remarks>
        /// Breaks a text into multiple newlines. Each line will be separated by a \\r (CR, ASCII 13) and \\n (LF, ASCII 10) character. The number of characters a line break will be inserted after can be justified. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Fre-form text to be wrapped.</param>
        /// <param name="limit">The number of characters a linefeed will be inserted after (maximum character length per line).</param>
        /// <param name="mode">The mode how the linefeed will be inserted. Either before (default) the current word, after the current word or exactly after the character. Possible values are **before** to break before last word, **after** to break after last word, **exact** to break at limit.  (optional)</param>
        /// <param name="linebreak">Defines which line separator should be used. Possible values are **full** for *\\r\\n*, **single** for *\\n*, **html** for *&amp;lt;br&amp;gt;*  (optional)</param>
        /// <returns>Task of ConvertWrapResponse</returns>
        System.Threading.Tasks.Task<ConvertWrapResponse> ConvertWrapAsync (string text, int? limit, string mode = null, string linebreak = null);

        /// <summary>
        /// Wrap text
        /// </summary>
        /// <remarks>
        /// Breaks a text into multiple newlines. Each line will be separated by a \\r (CR, ASCII 13) and \\n (LF, ASCII 10) character. The number of characters a line break will be inserted after can be justified. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Fre-form text to be wrapped.</param>
        /// <param name="limit">The number of characters a linefeed will be inserted after (maximum character length per line).</param>
        /// <param name="mode">The mode how the linefeed will be inserted. Either before (default) the current word, after the current word or exactly after the character. Possible values are **before** to break before last word, **after** to break after last word, **exact** to break at limit.  (optional)</param>
        /// <param name="linebreak">Defines which line separator should be used. Possible values are **full** for *\\r\\n*, **single** for *\\n*, **html** for *&amp;lt;br&amp;gt;*  (optional)</param>
        /// <returns>Task of ApiResponse (ConvertWrapResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvertWrapResponse>> ConvertWrapAsyncWithHttpInfo (string text, int? limit, string mode = null, string linebreak = null);
        /// <summary>
        /// Calculate phonetic codes of a given text
        /// </summary>
        /// <remarks>
        /// Get the phonetic code of a given text. Currently three phonetic algorithms are available:  * **Soundex** (algorithm code 1)  * **Colcogne Phonetic** (algorithm code 2)  * **Metaphon** (algorithm code 3) 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text which should be converted. Each word will be converted separatly and generate a single entry in the result. </param>
        /// <param name="phoneticAlgorithm">The phonetic algorithm which should be applied. If no algorithm code will be provided **Soundex** will be used. Codes:  * 1 &#x3D; Soundex  * 2 &#x3D; Colcogne Phonetic  * 3 &#x3D; Metaphon  (optional)</param>
        /// <returns>Task of PhoneticCodeGetResponse</returns>
        System.Threading.Tasks.Task<PhoneticCodeGetResponse> GetPhoneticCodeAsync (string text, int? phoneticAlgorithm = null);

        /// <summary>
        /// Calculate phonetic codes of a given text
        /// </summary>
        /// <remarks>
        /// Get the phonetic code of a given text. Currently three phonetic algorithms are available:  * **Soundex** (algorithm code 1)  * **Colcogne Phonetic** (algorithm code 2)  * **Metaphon** (algorithm code 3) 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text which should be converted. Each word will be converted separatly and generate a single entry in the result. </param>
        /// <param name="phoneticAlgorithm">The phonetic algorithm which should be applied. If no algorithm code will be provided **Soundex** will be used. Codes:  * 1 &#x3D; Soundex  * 2 &#x3D; Colcogne Phonetic  * 3 &#x3D; Metaphon  (optional)</param>
        /// <returns>Task of ApiResponse (PhoneticCodeGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhoneticCodeGetResponse>> GetPhoneticCodeAsyncWithHttpInfo (string text, int? phoneticAlgorithm = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConvertApi : IConvertApi
    {
        private DataMill.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConvertApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = DataMill.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConvertApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = DataMill.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DataMill.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Convert any string to capitalize words Changes any word of a given text so that the first letter is capitalized and all the others turned into lower case. Special proper names, like \&quot;DiCaprio\&quot; are detected and ignored. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ConvertCapitalFirstResponse</returns>
        public ConvertCapitalFirstResponse ConvertCapitalFirst (string text)
        {
             ApiResponse<ConvertCapitalFirstResponse> localVarResponse = ConvertCapitalFirstWithHttpInfo(text);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert any string to capitalize words Changes any word of a given text so that the first letter is capitalized and all the others turned into lower case. Special proper names, like \&quot;DiCaprio\&quot; are detected and ignored. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ApiResponse of ConvertCapitalFirstResponse</returns>
        public ApiResponse< ConvertCapitalFirstResponse > ConvertCapitalFirstWithHttpInfo (string text)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling ConvertApi->ConvertCapitalFirst");

            var localVarPath = "/convert/capitalfirst";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarFormParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertCapitalFirst", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertCapitalFirstResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertCapitalFirstResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertCapitalFirstResponse)));
            
        }

        /// <summary>
        /// Convert any string to capitalize words Changes any word of a given text so that the first letter is capitalized and all the others turned into lower case. Special proper names, like \&quot;DiCaprio\&quot; are detected and ignored. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ConvertCapitalFirstResponse</returns>
        public async System.Threading.Tasks.Task<ConvertCapitalFirstResponse> ConvertCapitalFirstAsync (string text)
        {
             ApiResponse<ConvertCapitalFirstResponse> localVarResponse = await ConvertCapitalFirstAsyncWithHttpInfo(text);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert any string to capitalize words Changes any word of a given text so that the first letter is capitalized and all the others turned into lower case. Special proper names, like \&quot;DiCaprio\&quot; are detected and ignored. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ApiResponse (ConvertCapitalFirstResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConvertCapitalFirstResponse>> ConvertCapitalFirstAsyncWithHttpInfo (string text)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling ConvertApi->ConvertCapitalFirst");

            var localVarPath = "/convert/capitalfirst";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarFormParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertCapitalFirst", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertCapitalFirstResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertCapitalFirstResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertCapitalFirstResponse)));
            
        }

        /// <summary>
        /// Convert any string to lower case Converts all letters of any word in a given string in the respective lowercase. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ConvertLowerCaseResponse</returns>
        public ConvertLowerCaseResponse ConvertLowerCase (string text)
        {
             ApiResponse<ConvertLowerCaseResponse> localVarResponse = ConvertLowerCaseWithHttpInfo(text);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert any string to lower case Converts all letters of any word in a given string in the respective lowercase. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ApiResponse of ConvertLowerCaseResponse</returns>
        public ApiResponse< ConvertLowerCaseResponse > ConvertLowerCaseWithHttpInfo (string text)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling ConvertApi->ConvertLowerCase");

            var localVarPath = "/convert/lowercase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarFormParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertLowerCase", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertLowerCaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertLowerCaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertLowerCaseResponse)));
            
        }

        /// <summary>
        /// Convert any string to lower case Converts all letters of any word in a given string in the respective lowercase. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ConvertLowerCaseResponse</returns>
        public async System.Threading.Tasks.Task<ConvertLowerCaseResponse> ConvertLowerCaseAsync (string text)
        {
             ApiResponse<ConvertLowerCaseResponse> localVarResponse = await ConvertLowerCaseAsyncWithHttpInfo(text);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert any string to lower case Converts all letters of any word in a given string in the respective lowercase. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ApiResponse (ConvertLowerCaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConvertLowerCaseResponse>> ConvertLowerCaseAsyncWithHttpInfo (string text)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling ConvertApi->ConvertLowerCase");

            var localVarPath = "/convert/lowercase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarFormParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertLowerCase", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertLowerCaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertLowerCaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertLowerCaseResponse)));
            
        }

        /// <summary>
        /// Convert any string to upper case Converts all letters of any word in a given string in the respective capital. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ConvertUpperCaseResponse</returns>
        public ConvertUpperCaseResponse ConvertUpperCase (string text)
        {
             ApiResponse<ConvertUpperCaseResponse> localVarResponse = ConvertUpperCaseWithHttpInfo(text);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert any string to upper case Converts all letters of any word in a given string in the respective capital. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ApiResponse of ConvertUpperCaseResponse</returns>
        public ApiResponse< ConvertUpperCaseResponse > ConvertUpperCaseWithHttpInfo (string text)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling ConvertApi->ConvertUpperCase");

            var localVarPath = "/convert/uppercase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarFormParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertUpperCase", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertUpperCaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertUpperCaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertUpperCaseResponse)));
            
        }

        /// <summary>
        /// Convert any string to upper case Converts all letters of any word in a given string in the respective capital. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ConvertUpperCaseResponse</returns>
        public async System.Threading.Tasks.Task<ConvertUpperCaseResponse> ConvertUpperCaseAsync (string text)
        {
             ApiResponse<ConvertUpperCaseResponse> localVarResponse = await ConvertUpperCaseAsyncWithHttpInfo(text);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert any string to upper case Converts all letters of any word in a given string in the respective capital. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ApiResponse (ConvertUpperCaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConvertUpperCaseResponse>> ConvertUpperCaseAsyncWithHttpInfo (string text)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling ConvertApi->ConvertUpperCase");

            var localVarPath = "/convert/uppercase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarFormParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertUpperCase", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertUpperCaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertUpperCaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertUpperCaseResponse)));
            
        }

        /// <summary>
        /// Wrap text Breaks a text into multiple newlines. Each line will be separated by a \\r (CR, ASCII 13) and \\n (LF, ASCII 10) character. The number of characters a line break will be inserted after can be justified. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Fre-form text to be wrapped.</param>
        /// <param name="limit">The number of characters a linefeed will be inserted after (maximum character length per line).</param>
        /// <param name="mode">The mode how the linefeed will be inserted. Either before (default) the current word, after the current word or exactly after the character. Possible values are **before** to break before last word, **after** to break after last word, **exact** to break at limit.  (optional)</param>
        /// <param name="linebreak">Defines which line separator should be used. Possible values are **full** for *\\r\\n*, **single** for *\\n*, **html** for *&amp;lt;br&amp;gt;*  (optional)</param>
        /// <returns>ConvertWrapResponse</returns>
        public ConvertWrapResponse ConvertWrap (string text, int? limit, string mode = null, string linebreak = null)
        {
             ApiResponse<ConvertWrapResponse> localVarResponse = ConvertWrapWithHttpInfo(text, limit, mode, linebreak);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wrap text Breaks a text into multiple newlines. Each line will be separated by a \\r (CR, ASCII 13) and \\n (LF, ASCII 10) character. The number of characters a line break will be inserted after can be justified. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Fre-form text to be wrapped.</param>
        /// <param name="limit">The number of characters a linefeed will be inserted after (maximum character length per line).</param>
        /// <param name="mode">The mode how the linefeed will be inserted. Either before (default) the current word, after the current word or exactly after the character. Possible values are **before** to break before last word, **after** to break after last word, **exact** to break at limit.  (optional)</param>
        /// <param name="linebreak">Defines which line separator should be used. Possible values are **full** for *\\r\\n*, **single** for *\\n*, **html** for *&amp;lt;br&amp;gt;*  (optional)</param>
        /// <returns>ApiResponse of ConvertWrapResponse</returns>
        public ApiResponse< ConvertWrapResponse > ConvertWrapWithHttpInfo (string text, int? limit, string mode = null, string linebreak = null)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling ConvertApi->ConvertWrap");
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling ConvertApi->ConvertWrap");

            var localVarPath = "/convert/wrap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarFormParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // form parameter
            if (limit != null) localVarFormParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // form parameter
            if (mode != null) localVarFormParams.Add("mode", Configuration.ApiClient.ParameterToString(mode)); // form parameter
            if (linebreak != null) localVarFormParams.Add("linebreak", Configuration.ApiClient.ParameterToString(linebreak)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertWrap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertWrapResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertWrapResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertWrapResponse)));
            
        }

        /// <summary>
        /// Wrap text Breaks a text into multiple newlines. Each line will be separated by a \\r (CR, ASCII 13) and \\n (LF, ASCII 10) character. The number of characters a line break will be inserted after can be justified. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Fre-form text to be wrapped.</param>
        /// <param name="limit">The number of characters a linefeed will be inserted after (maximum character length per line).</param>
        /// <param name="mode">The mode how the linefeed will be inserted. Either before (default) the current word, after the current word or exactly after the character. Possible values are **before** to break before last word, **after** to break after last word, **exact** to break at limit.  (optional)</param>
        /// <param name="linebreak">Defines which line separator should be used. Possible values are **full** for *\\r\\n*, **single** for *\\n*, **html** for *&amp;lt;br&amp;gt;*  (optional)</param>
        /// <returns>Task of ConvertWrapResponse</returns>
        public async System.Threading.Tasks.Task<ConvertWrapResponse> ConvertWrapAsync (string text, int? limit, string mode = null, string linebreak = null)
        {
             ApiResponse<ConvertWrapResponse> localVarResponse = await ConvertWrapAsyncWithHttpInfo(text, limit, mode, linebreak);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wrap text Breaks a text into multiple newlines. Each line will be separated by a \\r (CR, ASCII 13) and \\n (LF, ASCII 10) character. The number of characters a line break will be inserted after can be justified. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Fre-form text to be wrapped.</param>
        /// <param name="limit">The number of characters a linefeed will be inserted after (maximum character length per line).</param>
        /// <param name="mode">The mode how the linefeed will be inserted. Either before (default) the current word, after the current word or exactly after the character. Possible values are **before** to break before last word, **after** to break after last word, **exact** to break at limit.  (optional)</param>
        /// <param name="linebreak">Defines which line separator should be used. Possible values are **full** for *\\r\\n*, **single** for *\\n*, **html** for *&amp;lt;br&amp;gt;*  (optional)</param>
        /// <returns>Task of ApiResponse (ConvertWrapResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConvertWrapResponse>> ConvertWrapAsyncWithHttpInfo (string text, int? limit, string mode = null, string linebreak = null)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling ConvertApi->ConvertWrap");
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling ConvertApi->ConvertWrap");

            var localVarPath = "/convert/wrap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarFormParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // form parameter
            if (limit != null) localVarFormParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // form parameter
            if (mode != null) localVarFormParams.Add("mode", Configuration.ApiClient.ParameterToString(mode)); // form parameter
            if (linebreak != null) localVarFormParams.Add("linebreak", Configuration.ApiClient.ParameterToString(linebreak)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertWrap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertWrapResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertWrapResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertWrapResponse)));
            
        }

        /// <summary>
        /// Calculate phonetic codes of a given text Get the phonetic code of a given text. Currently three phonetic algorithms are available:  * **Soundex** (algorithm code 1)  * **Colcogne Phonetic** (algorithm code 2)  * **Metaphon** (algorithm code 3) 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text which should be converted. Each word will be converted separatly and generate a single entry in the result. </param>
        /// <param name="phoneticAlgorithm">The phonetic algorithm which should be applied. If no algorithm code will be provided **Soundex** will be used. Codes:  * 1 &#x3D; Soundex  * 2 &#x3D; Colcogne Phonetic  * 3 &#x3D; Metaphon  (optional)</param>
        /// <returns>PhoneticCodeGetResponse</returns>
        public PhoneticCodeGetResponse GetPhoneticCode (string text, int? phoneticAlgorithm = null)
        {
             ApiResponse<PhoneticCodeGetResponse> localVarResponse = GetPhoneticCodeWithHttpInfo(text, phoneticAlgorithm);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate phonetic codes of a given text Get the phonetic code of a given text. Currently three phonetic algorithms are available:  * **Soundex** (algorithm code 1)  * **Colcogne Phonetic** (algorithm code 2)  * **Metaphon** (algorithm code 3) 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text which should be converted. Each word will be converted separatly and generate a single entry in the result. </param>
        /// <param name="phoneticAlgorithm">The phonetic algorithm which should be applied. If no algorithm code will be provided **Soundex** will be used. Codes:  * 1 &#x3D; Soundex  * 2 &#x3D; Colcogne Phonetic  * 3 &#x3D; Metaphon  (optional)</param>
        /// <returns>ApiResponse of PhoneticCodeGetResponse</returns>
        public ApiResponse< PhoneticCodeGetResponse > GetPhoneticCodeWithHttpInfo (string text, int? phoneticAlgorithm = null)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling ConvertApi->GetPhoneticCode");

            var localVarPath = "/phonetic/code/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarFormParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // form parameter
            if (phoneticAlgorithm != null) localVarFormParams.Add("phonetic_algorithm", Configuration.ApiClient.ParameterToString(phoneticAlgorithm)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPhoneticCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoneticCodeGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PhoneticCodeGetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoneticCodeGetResponse)));
            
        }

        /// <summary>
        /// Calculate phonetic codes of a given text Get the phonetic code of a given text. Currently three phonetic algorithms are available:  * **Soundex** (algorithm code 1)  * **Colcogne Phonetic** (algorithm code 2)  * **Metaphon** (algorithm code 3) 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text which should be converted. Each word will be converted separatly and generate a single entry in the result. </param>
        /// <param name="phoneticAlgorithm">The phonetic algorithm which should be applied. If no algorithm code will be provided **Soundex** will be used. Codes:  * 1 &#x3D; Soundex  * 2 &#x3D; Colcogne Phonetic  * 3 &#x3D; Metaphon  (optional)</param>
        /// <returns>Task of PhoneticCodeGetResponse</returns>
        public async System.Threading.Tasks.Task<PhoneticCodeGetResponse> GetPhoneticCodeAsync (string text, int? phoneticAlgorithm = null)
        {
             ApiResponse<PhoneticCodeGetResponse> localVarResponse = await GetPhoneticCodeAsyncWithHttpInfo(text, phoneticAlgorithm);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculate phonetic codes of a given text Get the phonetic code of a given text. Currently three phonetic algorithms are available:  * **Soundex** (algorithm code 1)  * **Colcogne Phonetic** (algorithm code 2)  * **Metaphon** (algorithm code 3) 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text which should be converted. Each word will be converted separatly and generate a single entry in the result. </param>
        /// <param name="phoneticAlgorithm">The phonetic algorithm which should be applied. If no algorithm code will be provided **Soundex** will be used. Codes:  * 1 &#x3D; Soundex  * 2 &#x3D; Colcogne Phonetic  * 3 &#x3D; Metaphon  (optional)</param>
        /// <returns>Task of ApiResponse (PhoneticCodeGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PhoneticCodeGetResponse>> GetPhoneticCodeAsyncWithHttpInfo (string text, int? phoneticAlgorithm = null)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling ConvertApi->GetPhoneticCode");

            var localVarPath = "/phonetic/code/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarFormParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // form parameter
            if (phoneticAlgorithm != null) localVarFormParams.Add("phonetic_algorithm", Configuration.ApiClient.ParameterToString(phoneticAlgorithm)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPhoneticCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoneticCodeGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PhoneticCodeGetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoneticCodeGetResponse)));
            
        }

    }
}
