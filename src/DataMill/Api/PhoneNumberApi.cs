/* 
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market. 
 *
 * OpenAPI spec version: 1.6.4
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using DataMill.Client;
using DataMill.Model;

namespace DataMill.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPhoneNumberApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Verify mobile phone number
        /// </summary>
        /// <remarks>
        /// Real time validation of mobile numbers without triggering a call of send a text message.
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="phonenumber">Mobile phone number to be verified.</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>PhoneMobileCheckResponse</returns>
        PhoneMobileCheckResponse CheckMobilePhone (string license, string guid, string phonenumber, string countrycode);

        /// <summary>
        /// Verify mobile phone number
        /// </summary>
        /// <remarks>
        /// Real time validation of mobile numbers without triggering a call of send a text message.
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="phonenumber">Mobile phone number to be verified.</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>ApiResponse of PhoneMobileCheckResponse</returns>
        ApiResponse<PhoneMobileCheckResponse> CheckMobilePhoneWithHttpInfo (string license, string guid, string phonenumber, string countrycode);
        /// <summary>
        /// Parse, format and validate phone numbers
        /// </summary>
        /// <remarks>
        /// Validates a given phone number and converts it to the canonical form. In addition the type of the phone number is determined (e.g. \&quot;fixed line\&quot;, \&quot;mobile\&quot;, ...). The number is not checked for existence. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="phonenumber">Phone number to be formatted and validated</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="format">The custom format of the returning phone number if valid. The format is a combination of the following placeholders:  * **{countrycode}**: The international dial prefix for the country without leading zero or the \\\&quot;+\\\&quot; sign  * **{nationalcode}**: The regional dial prefix  * **{phonenumber}**: The phone number including the extension and without the international and regional prefix  * **{national_prefix}**: The national dial prefix including the leading zero  * **{international_prefix}**: The international dial prefix including leading zeros.  If no custom format is specified the following combination is used: **+{countrycode} {nationalcode} {phonenumber}** (canonical format)  (optional)</param>
        /// <param name="directDialingDelimiter">Optional define a special character (e.g. -) as delimiter between the phone number and the extension. (optional)</param>
        /// <param name="allowedDelimiters">Optional collection of characters inside the specified phone number which are allowed for delimiter. The collection must be provided as **JSON** formatted string. (optional)</param>
        /// <returns>PhoneFormatResponse</returns>
        PhoneFormatResponse FormatPhoneNumber (string license, string guid, string phonenumber, string countrycode, string format = null, string directDialingDelimiter = null, string allowedDelimiters = null);

        /// <summary>
        /// Parse, format and validate phone numbers
        /// </summary>
        /// <remarks>
        /// Validates a given phone number and converts it to the canonical form. In addition the type of the phone number is determined (e.g. \&quot;fixed line\&quot;, \&quot;mobile\&quot;, ...). The number is not checked for existence. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="phonenumber">Phone number to be formatted and validated</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="format">The custom format of the returning phone number if valid. The format is a combination of the following placeholders:  * **{countrycode}**: The international dial prefix for the country without leading zero or the \\\&quot;+\\\&quot; sign  * **{nationalcode}**: The regional dial prefix  * **{phonenumber}**: The phone number including the extension and without the international and regional prefix  * **{national_prefix}**: The national dial prefix including the leading zero  * **{international_prefix}**: The international dial prefix including leading zeros.  If no custom format is specified the following combination is used: **+{countrycode} {nationalcode} {phonenumber}** (canonical format)  (optional)</param>
        /// <param name="directDialingDelimiter">Optional define a special character (e.g. -) as delimiter between the phone number and the extension. (optional)</param>
        /// <param name="allowedDelimiters">Optional collection of characters inside the specified phone number which are allowed for delimiter. The collection must be provided as **JSON** formatted string. (optional)</param>
        /// <returns>ApiResponse of PhoneFormatResponse</returns>
        ApiResponse<PhoneFormatResponse> FormatPhoneNumberWithHttpInfo (string license, string guid, string phonenumber, string countrycode, string format = null, string directDialingDelimiter = null, string allowedDelimiters = null);
        /// <summary>
        /// International and national dial prefix
        /// </summary>
        /// <remarks>
        /// Resolves the national and international dial prefix for a country specified by the given ISO country code.
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>PhoneCountryCodeGetResponse</returns>
        PhoneCountryCodeGetResponse GetPhoneCountryCode (string license, string guid, string countrycode);

        /// <summary>
        /// International and national dial prefix
        /// </summary>
        /// <remarks>
        /// Resolves the national and international dial prefix for a country specified by the given ISO country code.
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>ApiResponse of PhoneCountryCodeGetResponse</returns>
        ApiResponse<PhoneCountryCodeGetResponse> GetPhoneCountryCodeWithHttpInfo (string license, string guid, string countrycode);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PhoneNumberApi : IPhoneNumberApi
    {
        private DataMill.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneNumberApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PhoneNumberApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = DataMill.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneNumberApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PhoneNumberApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = DataMill.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DataMill.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Verify mobile phone number Real time validation of mobile numbers without triggering a call of send a text message.
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="phonenumber">Mobile phone number to be verified.</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>PhoneMobileCheckResponse</returns>
        public PhoneMobileCheckResponse CheckMobilePhone (string license, string guid, string phonenumber, string countrycode)
        {
             ApiResponse<PhoneMobileCheckResponse> localVarResponse = CheckMobilePhoneWithHttpInfo(license, guid, phonenumber, countrycode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify mobile phone number Real time validation of mobile numbers without triggering a call of send a text message.
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="phonenumber">Mobile phone number to be verified.</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>ApiResponse of PhoneMobileCheckResponse</returns>
        public ApiResponse< PhoneMobileCheckResponse > CheckMobilePhoneWithHttpInfo (string license, string guid, string phonenumber, string countrycode)
        {
            // verify the required parameter 'license' is set
            if (license == null)
                throw new ApiException(400, "Missing required parameter 'license' when calling PhoneNumberApi->CheckMobilePhone");
            // verify the required parameter 'guid' is set
            if (guid == null)
                throw new ApiException(400, "Missing required parameter 'guid' when calling PhoneNumberApi->CheckMobilePhone");
            // verify the required parameter 'phonenumber' is set
            if (phonenumber == null)
                throw new ApiException(400, "Missing required parameter 'phonenumber' when calling PhoneNumberApi->CheckMobilePhone");
            // verify the required parameter 'countrycode' is set
            if (countrycode == null)
                throw new ApiException(400, "Missing required parameter 'countrycode' when calling PhoneNumberApi->CheckMobilePhone");

            var localVarPath = "/phone/mobile/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (license != null) localVarFormParams.Add("license", Configuration.ApiClient.ParameterToString(license)); // form parameter
            if (guid != null) localVarFormParams.Add("guid", Configuration.ApiClient.ParameterToString(guid)); // form parameter
            if (phonenumber != null) localVarFormParams.Add("phonenumber", Configuration.ApiClient.ParameterToString(phonenumber)); // form parameter
            if (countrycode != null) localVarFormParams.Add("countrycode", Configuration.ApiClient.ParameterToString(countrycode)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckMobilePhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoneMobileCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PhoneMobileCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoneMobileCheckResponse)));
            
        }

        /// <summary>
        /// Parse, format and validate phone numbers Validates a given phone number and converts it to the canonical form. In addition the type of the phone number is determined (e.g. \&quot;fixed line\&quot;, \&quot;mobile\&quot;, ...). The number is not checked for existence. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="phonenumber">Phone number to be formatted and validated</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="format">The custom format of the returning phone number if valid. The format is a combination of the following placeholders:  * **{countrycode}**: The international dial prefix for the country without leading zero or the \\\&quot;+\\\&quot; sign  * **{nationalcode}**: The regional dial prefix  * **{phonenumber}**: The phone number including the extension and without the international and regional prefix  * **{national_prefix}**: The national dial prefix including the leading zero  * **{international_prefix}**: The international dial prefix including leading zeros.  If no custom format is specified the following combination is used: **+{countrycode} {nationalcode} {phonenumber}** (canonical format)  (optional)</param>
        /// <param name="directDialingDelimiter">Optional define a special character (e.g. -) as delimiter between the phone number and the extension. (optional)</param>
        /// <param name="allowedDelimiters">Optional collection of characters inside the specified phone number which are allowed for delimiter. The collection must be provided as **JSON** formatted string. (optional)</param>
        /// <returns>PhoneFormatResponse</returns>
        public PhoneFormatResponse FormatPhoneNumber (string license, string guid, string phonenumber, string countrycode, string format = null, string directDialingDelimiter = null, string allowedDelimiters = null)
        {
             ApiResponse<PhoneFormatResponse> localVarResponse = FormatPhoneNumberWithHttpInfo(license, guid, phonenumber, countrycode, format, directDialingDelimiter, allowedDelimiters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Parse, format and validate phone numbers Validates a given phone number and converts it to the canonical form. In addition the type of the phone number is determined (e.g. \&quot;fixed line\&quot;, \&quot;mobile\&quot;, ...). The number is not checked for existence. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="phonenumber">Phone number to be formatted and validated</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="format">The custom format of the returning phone number if valid. The format is a combination of the following placeholders:  * **{countrycode}**: The international dial prefix for the country without leading zero or the \\\&quot;+\\\&quot; sign  * **{nationalcode}**: The regional dial prefix  * **{phonenumber}**: The phone number including the extension and without the international and regional prefix  * **{national_prefix}**: The national dial prefix including the leading zero  * **{international_prefix}**: The international dial prefix including leading zeros.  If no custom format is specified the following combination is used: **+{countrycode} {nationalcode} {phonenumber}** (canonical format)  (optional)</param>
        /// <param name="directDialingDelimiter">Optional define a special character (e.g. -) as delimiter between the phone number and the extension. (optional)</param>
        /// <param name="allowedDelimiters">Optional collection of characters inside the specified phone number which are allowed for delimiter. The collection must be provided as **JSON** formatted string. (optional)</param>
        /// <returns>ApiResponse of PhoneFormatResponse</returns>
        public ApiResponse< PhoneFormatResponse > FormatPhoneNumberWithHttpInfo (string license, string guid, string phonenumber, string countrycode, string format = null, string directDialingDelimiter = null, string allowedDelimiters = null)
        {
            // verify the required parameter 'license' is set
            if (license == null)
                throw new ApiException(400, "Missing required parameter 'license' when calling PhoneNumberApi->FormatPhoneNumber");
            // verify the required parameter 'guid' is set
            if (guid == null)
                throw new ApiException(400, "Missing required parameter 'guid' when calling PhoneNumberApi->FormatPhoneNumber");
            // verify the required parameter 'phonenumber' is set
            if (phonenumber == null)
                throw new ApiException(400, "Missing required parameter 'phonenumber' when calling PhoneNumberApi->FormatPhoneNumber");
            // verify the required parameter 'countrycode' is set
            if (countrycode == null)
                throw new ApiException(400, "Missing required parameter 'countrycode' when calling PhoneNumberApi->FormatPhoneNumber");

            var localVarPath = "/phone/format";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (license != null) localVarFormParams.Add("license", Configuration.ApiClient.ParameterToString(license)); // form parameter
            if (guid != null) localVarFormParams.Add("guid", Configuration.ApiClient.ParameterToString(guid)); // form parameter
            if (phonenumber != null) localVarFormParams.Add("phonenumber", Configuration.ApiClient.ParameterToString(phonenumber)); // form parameter
            if (countrycode != null) localVarFormParams.Add("countrycode", Configuration.ApiClient.ParameterToString(countrycode)); // form parameter
            if (format != null) localVarFormParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // form parameter
            if (directDialingDelimiter != null) localVarFormParams.Add("direct_dialing_delimiter", Configuration.ApiClient.ParameterToString(directDialingDelimiter)); // form parameter
            if (allowedDelimiters != null) localVarFormParams.Add("allowed_delimiters", Configuration.ApiClient.ParameterToString(allowedDelimiters)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FormatPhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoneFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PhoneFormatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoneFormatResponse)));
            
        }

        /// <summary>
        /// International and national dial prefix Resolves the national and international dial prefix for a country specified by the given ISO country code.
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>PhoneCountryCodeGetResponse</returns>
        public PhoneCountryCodeGetResponse GetPhoneCountryCode (string license, string guid, string countrycode)
        {
             ApiResponse<PhoneCountryCodeGetResponse> localVarResponse = GetPhoneCountryCodeWithHttpInfo(license, guid, countrycode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// International and national dial prefix Resolves the national and international dial prefix for a country specified by the given ISO country code.
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>ApiResponse of PhoneCountryCodeGetResponse</returns>
        public ApiResponse< PhoneCountryCodeGetResponse > GetPhoneCountryCodeWithHttpInfo (string license, string guid, string countrycode)
        {
            // verify the required parameter 'license' is set
            if (license == null)
                throw new ApiException(400, "Missing required parameter 'license' when calling PhoneNumberApi->GetPhoneCountryCode");
            // verify the required parameter 'guid' is set
            if (guid == null)
                throw new ApiException(400, "Missing required parameter 'guid' when calling PhoneNumberApi->GetPhoneCountryCode");
            // verify the required parameter 'countrycode' is set
            if (countrycode == null)
                throw new ApiException(400, "Missing required parameter 'countrycode' when calling PhoneNumberApi->GetPhoneCountryCode");

            var localVarPath = "/phone/countrycode/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (license != null) localVarFormParams.Add("license", Configuration.ApiClient.ParameterToString(license)); // form parameter
            if (guid != null) localVarFormParams.Add("guid", Configuration.ApiClient.ParameterToString(guid)); // form parameter
            if (countrycode != null) localVarFormParams.Add("countrycode", Configuration.ApiClient.ParameterToString(countrycode)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPhoneCountryCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoneCountryCodeGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PhoneCountryCodeGetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoneCountryCodeGetResponse)));
            
        }

    }
}
