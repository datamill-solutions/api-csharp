/* 
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market.  GitHub for SDKs: https://github.com/datamill-solutions 
 *
 * OpenAPI spec version: 1.6.5
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using DataMill.Client;
using DataMill.Model;

namespace DataMill.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVATApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check vat number for correctness
        /// </summary>
        /// <remarks>
        /// Checks if a given VAT (Value Added Tax) identification number is valid or not. Only VAT numbers of companies within the European Union can be verified. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <returns>VatCheckResponse</returns>
        VatCheckResponse CheckVAT (string vatnumber);

        /// <summary>
        /// Check vat number for correctness
        /// </summary>
        /// <remarks>
        /// Checks if a given VAT (Value Added Tax) identification number is valid or not. Only VAT numbers of companies within the European Union can be verified. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <returns>ApiResponse of VatCheckResponse</returns>
        ApiResponse<VatCheckResponse> CheckVATWithHttpInfo (string vatnumber);
        /// <summary>
        /// Try to resolve VAT number to company information
        /// </summary>
        /// <remarks>
        /// Resolves company information (company name and postal address) based on the company&#39;s VAT (Value Added Tax) identification number. Only VAT numbers of companies within the European Union can be verified and resolved. Some countries have access restrictions and may not deliver the full company information. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>VatResolveResponse</returns>
        VatResolveResponse ResolveVAT (string vatnumber, string locale = null);

        /// <summary>
        /// Try to resolve VAT number to company information
        /// </summary>
        /// <remarks>
        /// Resolves company information (company name and postal address) based on the company&#39;s VAT (Value Added Tax) identification number. Only VAT numbers of companies within the European Union can be verified and resolved. Some countries have access restrictions and may not deliver the full company information. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>ApiResponse of VatResolveResponse</returns>
        ApiResponse<VatResolveResponse> ResolveVATWithHttpInfo (string vatnumber, string locale = null);
        /// <summary>
        /// Find VAT number and company information by name
        /// </summary>
        /// <remarks>
        /// Finds the VAT number and additional company information by the company&#39;s name and headquarters location. The function returns multiple results if similar companies are found in the same city. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company">The name of an company. You may enter the fully qualified name or only partial information.</param>
        /// <param name="city">The city where the company&#39;s headquarters is located. (optional)</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI**  (optional)</param>
        /// <param name="limit">The maximum amount of results returned if multiple companies are found. Default value is **10**.  (optional, default to 10)</param>
        /// <param name="minScore">Threshold to set the minimum score rate of results being returned. Default: **0.8**  (optional, default to 0.8)</param>
        /// <returns>VatSearchResponse</returns>
        VatSearchResponse SearchVAT (string company, string city = null, string countryCode = null, string limit = null, string minScore = null);

        /// <summary>
        /// Find VAT number and company information by name
        /// </summary>
        /// <remarks>
        /// Finds the VAT number and additional company information by the company&#39;s name and headquarters location. The function returns multiple results if similar companies are found in the same city. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company">The name of an company. You may enter the fully qualified name or only partial information.</param>
        /// <param name="city">The city where the company&#39;s headquarters is located. (optional)</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI**  (optional)</param>
        /// <param name="limit">The maximum amount of results returned if multiple companies are found. Default value is **10**.  (optional, default to 10)</param>
        /// <param name="minScore">Threshold to set the minimum score rate of results being returned. Default: **0.8**  (optional, default to 0.8)</param>
        /// <returns>ApiResponse of VatSearchResponse</returns>
        ApiResponse<VatSearchResponse> SearchVATWithHttpInfo (string company, string city = null, string countryCode = null, string limit = null, string minScore = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Check vat number for correctness
        /// </summary>
        /// <remarks>
        /// Checks if a given VAT (Value Added Tax) identification number is valid or not. Only VAT numbers of companies within the European Union can be verified. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <returns>Task of VatCheckResponse</returns>
        System.Threading.Tasks.Task<VatCheckResponse> CheckVATAsync (string vatnumber);

        /// <summary>
        /// Check vat number for correctness
        /// </summary>
        /// <remarks>
        /// Checks if a given VAT (Value Added Tax) identification number is valid or not. Only VAT numbers of companies within the European Union can be verified. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <returns>Task of ApiResponse (VatCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VatCheckResponse>> CheckVATAsyncWithHttpInfo (string vatnumber);
        /// <summary>
        /// Try to resolve VAT number to company information
        /// </summary>
        /// <remarks>
        /// Resolves company information (company name and postal address) based on the company&#39;s VAT (Value Added Tax) identification number. Only VAT numbers of companies within the European Union can be verified and resolved. Some countries have access restrictions and may not deliver the full company information. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>Task of VatResolveResponse</returns>
        System.Threading.Tasks.Task<VatResolveResponse> ResolveVATAsync (string vatnumber, string locale = null);

        /// <summary>
        /// Try to resolve VAT number to company information
        /// </summary>
        /// <remarks>
        /// Resolves company information (company name and postal address) based on the company&#39;s VAT (Value Added Tax) identification number. Only VAT numbers of companies within the European Union can be verified and resolved. Some countries have access restrictions and may not deliver the full company information. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>Task of ApiResponse (VatResolveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VatResolveResponse>> ResolveVATAsyncWithHttpInfo (string vatnumber, string locale = null);
        /// <summary>
        /// Find VAT number and company information by name
        /// </summary>
        /// <remarks>
        /// Finds the VAT number and additional company information by the company&#39;s name and headquarters location. The function returns multiple results if similar companies are found in the same city. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company">The name of an company. You may enter the fully qualified name or only partial information.</param>
        /// <param name="city">The city where the company&#39;s headquarters is located. (optional)</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI**  (optional)</param>
        /// <param name="limit">The maximum amount of results returned if multiple companies are found. Default value is **10**.  (optional, default to 10)</param>
        /// <param name="minScore">Threshold to set the minimum score rate of results being returned. Default: **0.8**  (optional, default to 0.8)</param>
        /// <returns>Task of VatSearchResponse</returns>
        System.Threading.Tasks.Task<VatSearchResponse> SearchVATAsync (string company, string city = null, string countryCode = null, string limit = null, string minScore = null);

        /// <summary>
        /// Find VAT number and company information by name
        /// </summary>
        /// <remarks>
        /// Finds the VAT number and additional company information by the company&#39;s name and headquarters location. The function returns multiple results if similar companies are found in the same city. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company">The name of an company. You may enter the fully qualified name or only partial information.</param>
        /// <param name="city">The city where the company&#39;s headquarters is located. (optional)</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI**  (optional)</param>
        /// <param name="limit">The maximum amount of results returned if multiple companies are found. Default value is **10**.  (optional, default to 10)</param>
        /// <param name="minScore">Threshold to set the minimum score rate of results being returned. Default: **0.8**  (optional, default to 0.8)</param>
        /// <returns>Task of ApiResponse (VatSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VatSearchResponse>> SearchVATAsyncWithHttpInfo (string company, string city = null, string countryCode = null, string limit = null, string minScore = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VATApi : IVATApi
    {
        private DataMill.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VATApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VATApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = DataMill.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VATApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VATApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = DataMill.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DataMill.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Check vat number for correctness Checks if a given VAT (Value Added Tax) identification number is valid or not. Only VAT numbers of companies within the European Union can be verified. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <returns>VatCheckResponse</returns>
        public VatCheckResponse CheckVAT (string vatnumber)
        {
             ApiResponse<VatCheckResponse> localVarResponse = CheckVATWithHttpInfo(vatnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check vat number for correctness Checks if a given VAT (Value Added Tax) identification number is valid or not. Only VAT numbers of companies within the European Union can be verified. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <returns>ApiResponse of VatCheckResponse</returns>
        public ApiResponse< VatCheckResponse > CheckVATWithHttpInfo (string vatnumber)
        {
            // verify the required parameter 'vatnumber' is set
            if (vatnumber == null)
                throw new ApiException(400, "Missing required parameter 'vatnumber' when calling VATApi->CheckVAT");

            var localVarPath = "/vat/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (vatnumber != null) localVarFormParams.Add("vatnumber", Configuration.ApiClient.ParameterToString(vatnumber)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckVAT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VatCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VatCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VatCheckResponse)));
            
        }

        /// <summary>
        /// Check vat number for correctness Checks if a given VAT (Value Added Tax) identification number is valid or not. Only VAT numbers of companies within the European Union can be verified. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <returns>Task of VatCheckResponse</returns>
        public async System.Threading.Tasks.Task<VatCheckResponse> CheckVATAsync (string vatnumber)
        {
             ApiResponse<VatCheckResponse> localVarResponse = await CheckVATAsyncWithHttpInfo(vatnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check vat number for correctness Checks if a given VAT (Value Added Tax) identification number is valid or not. Only VAT numbers of companies within the European Union can be verified. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <returns>Task of ApiResponse (VatCheckResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VatCheckResponse>> CheckVATAsyncWithHttpInfo (string vatnumber)
        {
            // verify the required parameter 'vatnumber' is set
            if (vatnumber == null)
                throw new ApiException(400, "Missing required parameter 'vatnumber' when calling VATApi->CheckVAT");

            var localVarPath = "/vat/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (vatnumber != null) localVarFormParams.Add("vatnumber", Configuration.ApiClient.ParameterToString(vatnumber)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckVAT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VatCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VatCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VatCheckResponse)));
            
        }

        /// <summary>
        /// Try to resolve VAT number to company information Resolves company information (company name and postal address) based on the company&#39;s VAT (Value Added Tax) identification number. Only VAT numbers of companies within the European Union can be verified and resolved. Some countries have access restrictions and may not deliver the full company information. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>VatResolveResponse</returns>
        public VatResolveResponse ResolveVAT (string vatnumber, string locale = null)
        {
             ApiResponse<VatResolveResponse> localVarResponse = ResolveVATWithHttpInfo(vatnumber, locale);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Try to resolve VAT number to company information Resolves company information (company name and postal address) based on the company&#39;s VAT (Value Added Tax) identification number. Only VAT numbers of companies within the European Union can be verified and resolved. Some countries have access restrictions and may not deliver the full company information. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>ApiResponse of VatResolveResponse</returns>
        public ApiResponse< VatResolveResponse > ResolveVATWithHttpInfo (string vatnumber, string locale = null)
        {
            // verify the required parameter 'vatnumber' is set
            if (vatnumber == null)
                throw new ApiException(400, "Missing required parameter 'vatnumber' when calling VATApi->ResolveVAT");

            var localVarPath = "/vat/resolve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (vatnumber != null) localVarFormParams.Add("vatnumber", Configuration.ApiClient.ParameterToString(vatnumber)); // form parameter
            if (locale != null) localVarFormParams.Add("locale", Configuration.ApiClient.ParameterToString(locale)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResolveVAT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VatResolveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VatResolveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VatResolveResponse)));
            
        }

        /// <summary>
        /// Try to resolve VAT number to company information Resolves company information (company name and postal address) based on the company&#39;s VAT (Value Added Tax) identification number. Only VAT numbers of companies within the European Union can be verified and resolved. Some countries have access restrictions and may not deliver the full company information. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>Task of VatResolveResponse</returns>
        public async System.Threading.Tasks.Task<VatResolveResponse> ResolveVATAsync (string vatnumber, string locale = null)
        {
             ApiResponse<VatResolveResponse> localVarResponse = await ResolveVATAsyncWithHttpInfo(vatnumber, locale);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Try to resolve VAT number to company information Resolves company information (company name and postal address) based on the company&#39;s VAT (Value Added Tax) identification number. Only VAT numbers of companies within the European Union can be verified and resolved. Some countries have access restrictions and may not deliver the full company information. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>Task of ApiResponse (VatResolveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VatResolveResponse>> ResolveVATAsyncWithHttpInfo (string vatnumber, string locale = null)
        {
            // verify the required parameter 'vatnumber' is set
            if (vatnumber == null)
                throw new ApiException(400, "Missing required parameter 'vatnumber' when calling VATApi->ResolveVAT");

            var localVarPath = "/vat/resolve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (vatnumber != null) localVarFormParams.Add("vatnumber", Configuration.ApiClient.ParameterToString(vatnumber)); // form parameter
            if (locale != null) localVarFormParams.Add("locale", Configuration.ApiClient.ParameterToString(locale)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResolveVAT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VatResolveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VatResolveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VatResolveResponse)));
            
        }

        /// <summary>
        /// Find VAT number and company information by name Finds the VAT number and additional company information by the company&#39;s name and headquarters location. The function returns multiple results if similar companies are found in the same city. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company">The name of an company. You may enter the fully qualified name or only partial information.</param>
        /// <param name="city">The city where the company&#39;s headquarters is located. (optional)</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI**  (optional)</param>
        /// <param name="limit">The maximum amount of results returned if multiple companies are found. Default value is **10**.  (optional, default to 10)</param>
        /// <param name="minScore">Threshold to set the minimum score rate of results being returned. Default: **0.8**  (optional, default to 0.8)</param>
        /// <returns>VatSearchResponse</returns>
        public VatSearchResponse SearchVAT (string company, string city = null, string countryCode = null, string limit = null, string minScore = null)
        {
             ApiResponse<VatSearchResponse> localVarResponse = SearchVATWithHttpInfo(company, city, countryCode, limit, minScore);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find VAT number and company information by name Finds the VAT number and additional company information by the company&#39;s name and headquarters location. The function returns multiple results if similar companies are found in the same city. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company">The name of an company. You may enter the fully qualified name or only partial information.</param>
        /// <param name="city">The city where the company&#39;s headquarters is located. (optional)</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI**  (optional)</param>
        /// <param name="limit">The maximum amount of results returned if multiple companies are found. Default value is **10**.  (optional, default to 10)</param>
        /// <param name="minScore">Threshold to set the minimum score rate of results being returned. Default: **0.8**  (optional, default to 0.8)</param>
        /// <returns>ApiResponse of VatSearchResponse</returns>
        public ApiResponse< VatSearchResponse > SearchVATWithHttpInfo (string company, string city = null, string countryCode = null, string limit = null, string minScore = null)
        {
            // verify the required parameter 'company' is set
            if (company == null)
                throw new ApiException(400, "Missing required parameter 'company' when calling VATApi->SearchVAT");

            var localVarPath = "/vat/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (company != null) localVarFormParams.Add("company", Configuration.ApiClient.ParameterToString(company)); // form parameter
            if (city != null) localVarFormParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // form parameter
            if (countryCode != null) localVarFormParams.Add("country_code", Configuration.ApiClient.ParameterToString(countryCode)); // form parameter
            if (limit != null) localVarFormParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // form parameter
            if (minScore != null) localVarFormParams.Add("min_score", Configuration.ApiClient.ParameterToString(minScore)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchVAT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VatSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VatSearchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VatSearchResponse)));
            
        }

        /// <summary>
        /// Find VAT number and company information by name Finds the VAT number and additional company information by the company&#39;s name and headquarters location. The function returns multiple results if similar companies are found in the same city. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company">The name of an company. You may enter the fully qualified name or only partial information.</param>
        /// <param name="city">The city where the company&#39;s headquarters is located. (optional)</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI**  (optional)</param>
        /// <param name="limit">The maximum amount of results returned if multiple companies are found. Default value is **10**.  (optional, default to 10)</param>
        /// <param name="minScore">Threshold to set the minimum score rate of results being returned. Default: **0.8**  (optional, default to 0.8)</param>
        /// <returns>Task of VatSearchResponse</returns>
        public async System.Threading.Tasks.Task<VatSearchResponse> SearchVATAsync (string company, string city = null, string countryCode = null, string limit = null, string minScore = null)
        {
             ApiResponse<VatSearchResponse> localVarResponse = await SearchVATAsyncWithHttpInfo(company, city, countryCode, limit, minScore);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find VAT number and company information by name Finds the VAT number and additional company information by the company&#39;s name and headquarters location. The function returns multiple results if similar companies are found in the same city. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company">The name of an company. You may enter the fully qualified name or only partial information.</param>
        /// <param name="city">The city where the company&#39;s headquarters is located. (optional)</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI**  (optional)</param>
        /// <param name="limit">The maximum amount of results returned if multiple companies are found. Default value is **10**.  (optional, default to 10)</param>
        /// <param name="minScore">Threshold to set the minimum score rate of results being returned. Default: **0.8**  (optional, default to 0.8)</param>
        /// <returns>Task of ApiResponse (VatSearchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VatSearchResponse>> SearchVATAsyncWithHttpInfo (string company, string city = null, string countryCode = null, string limit = null, string minScore = null)
        {
            // verify the required parameter 'company' is set
            if (company == null)
                throw new ApiException(400, "Missing required parameter 'company' when calling VATApi->SearchVAT");

            var localVarPath = "/vat/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (company != null) localVarFormParams.Add("company", Configuration.ApiClient.ParameterToString(company)); // form parameter
            if (city != null) localVarFormParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // form parameter
            if (countryCode != null) localVarFormParams.Add("country_code", Configuration.ApiClient.ParameterToString(countryCode)); // form parameter
            if (limit != null) localVarFormParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // form parameter
            if (minScore != null) localVarFormParams.Add("min_score", Configuration.ApiClient.ParameterToString(minScore)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchVAT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VatSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VatSearchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VatSearchResponse)));
            
        }

    }
}
