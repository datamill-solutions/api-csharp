/* 
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market. 
 *
 * OpenAPI spec version: 1.6.4
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using DataMill.Client;
using DataMill.Model;

namespace DataMill.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Try to extract house number from street information
        /// </summary>
        /// <remarks>
        /// Find and extract the house number based on partial address information. The result is an extracted street name, house number and additional house number information (e.g. Apartment, Floor, Room). 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="street">Free-form text containing the street name and optional the house number including additional house number information. The key is required if housenumber is empty or unset. (optional)</param>
        /// <param name="housenumber">Free-form text containing the house number including additional house number information and optional the street name. The key is required if street is empty or unset. (optional)</param>
        /// <returns>AddressHouseNumberExtractResponse</returns>
        AddressHouseNumberExtractResponse ExtractHouseNumber (string license, string guid, string street = null, string housenumber = null);

        /// <summary>
        /// Try to extract house number from street information
        /// </summary>
        /// <remarks>
        /// Find and extract the house number based on partial address information. The result is an extracted street name, house number and additional house number information (e.g. Apartment, Floor, Room). 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="street">Free-form text containing the street name and optional the house number including additional house number information. The key is required if housenumber is empty or unset. (optional)</param>
        /// <param name="housenumber">Free-form text containing the house number including additional house number information and optional the street name. The key is required if street is empty or unset. (optional)</param>
        /// <returns>ApiResponse of AddressHouseNumberExtractResponse</returns>
        ApiResponse<AddressHouseNumberExtractResponse> ExtractHouseNumberWithHttpInfo (string license, string guid, string street = null, string housenumber = null);
        /// <summary>
        /// Reverse address lookup
        /// </summary>
        /// <remarks>
        /// Resolve an address corresponding to a given geo-coordinate. The result is a single record which matches the given latitude and longitude. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="latitude">Latitude of the address (use a dot as decimal point)</param>
        /// <param name="longitude">Longitude of the address (use a dot as decimal point)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>AddressSearchResponse</returns>
        AddressSearchResponse LocateAddress (string license, string guid, string latitude, string longitude, string locale = null);

        /// <summary>
        /// Reverse address lookup
        /// </summary>
        /// <remarks>
        /// Resolve an address corresponding to a given geo-coordinate. The result is a single record which matches the given latitude and longitude. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="latitude">Latitude of the address (use a dot as decimal point)</param>
        /// <param name="longitude">Longitude of the address (use a dot as decimal point)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>ApiResponse of AddressSearchResponse</returns>
        ApiResponse<AddressSearchResponse> LocateAddressWithHttpInfo (string license, string guid, string latitude, string longitude, string locale = null);
        /// <summary>
        /// Lookup physical postal address
        /// </summary>
        /// <remarks>
        /// Find geo-location based on unstructured (single-line entry, un-qualified) or based on structured (qualified) address information. The result is a single record which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typos the response keys may be empty.  The unstructured query determines each address part by its own and afterwards finds the closest geo-location. It should only be used if you do not know which address information fits in which query parameter. The structured query provides an additional logic for specific countries to improve the result of the determined geo-location. Please consider that if you do not provide a country name/code the result may end in a different country because the same city + street combination may exist in multiple countries. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="address">Unstructured query parameter. Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. You can specify the &#39;address&#39; parameter by itself or you can specify it with other parameters to narrow your search.  (optional)</param>
        /// <param name="country">Specify the country using the country code (ISO 3166-1 alpha-3) or the country name. (optional)</param>
        /// <param name="state">First subdivision level below the country. Specify the state using full or abbreviated notation. (optional)</param>
        /// <param name="county">Second subdivision level below the country. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="city">The city name. (optional)</param>
        /// <param name="zip">Postal code defined by the government of the country. (optional)</param>
        /// <param name="district">Subdivision level below the city. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="street">The street name. (optional)</param>
        /// <param name="housenumber">The house number or building name. (optional)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>AddressSearchResponse</returns>
        AddressSearchResponse SearchAddress (string license, string guid, string address = null, string country = null, string state = null, string county = null, string city = null, string zip = null, string district = null, string street = null, string housenumber = null, string locale = null);

        /// <summary>
        /// Lookup physical postal address
        /// </summary>
        /// <remarks>
        /// Find geo-location based on unstructured (single-line entry, un-qualified) or based on structured (qualified) address information. The result is a single record which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typos the response keys may be empty.  The unstructured query determines each address part by its own and afterwards finds the closest geo-location. It should only be used if you do not know which address information fits in which query parameter. The structured query provides an additional logic for specific countries to improve the result of the determined geo-location. Please consider that if you do not provide a country name/code the result may end in a different country because the same city + street combination may exist in multiple countries. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="address">Unstructured query parameter. Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. You can specify the &#39;address&#39; parameter by itself or you can specify it with other parameters to narrow your search.  (optional)</param>
        /// <param name="country">Specify the country using the country code (ISO 3166-1 alpha-3) or the country name. (optional)</param>
        /// <param name="state">First subdivision level below the country. Specify the state using full or abbreviated notation. (optional)</param>
        /// <param name="county">Second subdivision level below the country. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="city">The city name. (optional)</param>
        /// <param name="zip">Postal code defined by the government of the country. (optional)</param>
        /// <param name="district">Subdivision level below the city. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="street">The street name. (optional)</param>
        /// <param name="housenumber">The house number or building name. (optional)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>ApiResponse of AddressSearchResponse</returns>
        ApiResponse<AddressSearchResponse> SearchAddressWithHttpInfo (string license, string guid, string address = null, string country = null, string state = null, string county = null, string city = null, string zip = null, string district = null, string street = null, string housenumber = null, string locale = null);
        /// <summary>
        /// Address lookup with multiple possible results
        /// </summary>
        /// <remarks>
        /// Find multiple geo-locations based on unstructured (single-line entry, un-qualified) address information. The result is a set of records which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typo errors the response keys may be empty. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="address">Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter.</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>AddressSearchMultipleResponse</returns>
        AddressSearchMultipleResponse SearchAddressMultiple (string license, string guid, string address, string locale = null);

        /// <summary>
        /// Address lookup with multiple possible results
        /// </summary>
        /// <remarks>
        /// Find multiple geo-locations based on unstructured (single-line entry, un-qualified) address information. The result is a set of records which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typo errors the response keys may be empty. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="address">Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter.</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>ApiResponse of AddressSearchMultipleResponse</returns>
        ApiResponse<AddressSearchMultipleResponse> SearchAddressMultipleWithHttpInfo (string license, string guid, string address, string locale = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AddressApi : IAddressApi
    {
        private DataMill.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = DataMill.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddressApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = DataMill.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DataMill.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Try to extract house number from street information Find and extract the house number based on partial address information. The result is an extracted street name, house number and additional house number information (e.g. Apartment, Floor, Room). 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="street">Free-form text containing the street name and optional the house number including additional house number information. The key is required if housenumber is empty or unset. (optional)</param>
        /// <param name="housenumber">Free-form text containing the house number including additional house number information and optional the street name. The key is required if street is empty or unset. (optional)</param>
        /// <returns>AddressHouseNumberExtractResponse</returns>
        public AddressHouseNumberExtractResponse ExtractHouseNumber (string license, string guid, string street = null, string housenumber = null)
        {
             ApiResponse<AddressHouseNumberExtractResponse> localVarResponse = ExtractHouseNumberWithHttpInfo(license, guid, street, housenumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Try to extract house number from street information Find and extract the house number based on partial address information. The result is an extracted street name, house number and additional house number information (e.g. Apartment, Floor, Room). 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="street">Free-form text containing the street name and optional the house number including additional house number information. The key is required if housenumber is empty or unset. (optional)</param>
        /// <param name="housenumber">Free-form text containing the house number including additional house number information and optional the street name. The key is required if street is empty or unset. (optional)</param>
        /// <returns>ApiResponse of AddressHouseNumberExtractResponse</returns>
        public ApiResponse< AddressHouseNumberExtractResponse > ExtractHouseNumberWithHttpInfo (string license, string guid, string street = null, string housenumber = null)
        {
            // verify the required parameter 'license' is set
            if (license == null)
                throw new ApiException(400, "Missing required parameter 'license' when calling AddressApi->ExtractHouseNumber");
            // verify the required parameter 'guid' is set
            if (guid == null)
                throw new ApiException(400, "Missing required parameter 'guid' when calling AddressApi->ExtractHouseNumber");

            var localVarPath = "/address/housenumber/extract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (license != null) localVarFormParams.Add("license", Configuration.ApiClient.ParameterToString(license)); // form parameter
            if (guid != null) localVarFormParams.Add("guid", Configuration.ApiClient.ParameterToString(guid)); // form parameter
            if (street != null) localVarFormParams.Add("street", Configuration.ApiClient.ParameterToString(street)); // form parameter
            if (housenumber != null) localVarFormParams.Add("housenumber", Configuration.ApiClient.ParameterToString(housenumber)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractHouseNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressHouseNumberExtractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressHouseNumberExtractResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressHouseNumberExtractResponse)));
            
        }

        /// <summary>
        /// Reverse address lookup Resolve an address corresponding to a given geo-coordinate. The result is a single record which matches the given latitude and longitude. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="latitude">Latitude of the address (use a dot as decimal point)</param>
        /// <param name="longitude">Longitude of the address (use a dot as decimal point)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>AddressSearchResponse</returns>
        public AddressSearchResponse LocateAddress (string license, string guid, string latitude, string longitude, string locale = null)
        {
             ApiResponse<AddressSearchResponse> localVarResponse = LocateAddressWithHttpInfo(license, guid, latitude, longitude, locale);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reverse address lookup Resolve an address corresponding to a given geo-coordinate. The result is a single record which matches the given latitude and longitude. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="latitude">Latitude of the address (use a dot as decimal point)</param>
        /// <param name="longitude">Longitude of the address (use a dot as decimal point)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>ApiResponse of AddressSearchResponse</returns>
        public ApiResponse< AddressSearchResponse > LocateAddressWithHttpInfo (string license, string guid, string latitude, string longitude, string locale = null)
        {
            // verify the required parameter 'license' is set
            if (license == null)
                throw new ApiException(400, "Missing required parameter 'license' when calling AddressApi->LocateAddress");
            // verify the required parameter 'guid' is set
            if (guid == null)
                throw new ApiException(400, "Missing required parameter 'guid' when calling AddressApi->LocateAddress");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling AddressApi->LocateAddress");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling AddressApi->LocateAddress");

            var localVarPath = "/address/locate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (license != null) localVarFormParams.Add("license", Configuration.ApiClient.ParameterToString(license)); // form parameter
            if (guid != null) localVarFormParams.Add("guid", Configuration.ApiClient.ParameterToString(guid)); // form parameter
            if (latitude != null) localVarFormParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // form parameter
            if (longitude != null) localVarFormParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // form parameter
            if (locale != null) localVarFormParams.Add("locale", Configuration.ApiClient.ParameterToString(locale)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LocateAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressSearchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressSearchResponse)));
            
        }

        /// <summary>
        /// Lookup physical postal address Find geo-location based on unstructured (single-line entry, un-qualified) or based on structured (qualified) address information. The result is a single record which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typos the response keys may be empty.  The unstructured query determines each address part by its own and afterwards finds the closest geo-location. It should only be used if you do not know which address information fits in which query parameter. The structured query provides an additional logic for specific countries to improve the result of the determined geo-location. Please consider that if you do not provide a country name/code the result may end in a different country because the same city + street combination may exist in multiple countries. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="address">Unstructured query parameter. Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. You can specify the &#39;address&#39; parameter by itself or you can specify it with other parameters to narrow your search.  (optional)</param>
        /// <param name="country">Specify the country using the country code (ISO 3166-1 alpha-3) or the country name. (optional)</param>
        /// <param name="state">First subdivision level below the country. Specify the state using full or abbreviated notation. (optional)</param>
        /// <param name="county">Second subdivision level below the country. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="city">The city name. (optional)</param>
        /// <param name="zip">Postal code defined by the government of the country. (optional)</param>
        /// <param name="district">Subdivision level below the city. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="street">The street name. (optional)</param>
        /// <param name="housenumber">The house number or building name. (optional)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>AddressSearchResponse</returns>
        public AddressSearchResponse SearchAddress (string license, string guid, string address = null, string country = null, string state = null, string county = null, string city = null, string zip = null, string district = null, string street = null, string housenumber = null, string locale = null)
        {
             ApiResponse<AddressSearchResponse> localVarResponse = SearchAddressWithHttpInfo(license, guid, address, country, state, county, city, zip, district, street, housenumber, locale);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lookup physical postal address Find geo-location based on unstructured (single-line entry, un-qualified) or based on structured (qualified) address information. The result is a single record which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typos the response keys may be empty.  The unstructured query determines each address part by its own and afterwards finds the closest geo-location. It should only be used if you do not know which address information fits in which query parameter. The structured query provides an additional logic for specific countries to improve the result of the determined geo-location. Please consider that if you do not provide a country name/code the result may end in a different country because the same city + street combination may exist in multiple countries. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="address">Unstructured query parameter. Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. You can specify the &#39;address&#39; parameter by itself or you can specify it with other parameters to narrow your search.  (optional)</param>
        /// <param name="country">Specify the country using the country code (ISO 3166-1 alpha-3) or the country name. (optional)</param>
        /// <param name="state">First subdivision level below the country. Specify the state using full or abbreviated notation. (optional)</param>
        /// <param name="county">Second subdivision level below the country. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="city">The city name. (optional)</param>
        /// <param name="zip">Postal code defined by the government of the country. (optional)</param>
        /// <param name="district">Subdivision level below the city. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="street">The street name. (optional)</param>
        /// <param name="housenumber">The house number or building name. (optional)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>ApiResponse of AddressSearchResponse</returns>
        public ApiResponse< AddressSearchResponse > SearchAddressWithHttpInfo (string license, string guid, string address = null, string country = null, string state = null, string county = null, string city = null, string zip = null, string district = null, string street = null, string housenumber = null, string locale = null)
        {
            // verify the required parameter 'license' is set
            if (license == null)
                throw new ApiException(400, "Missing required parameter 'license' when calling AddressApi->SearchAddress");
            // verify the required parameter 'guid' is set
            if (guid == null)
                throw new ApiException(400, "Missing required parameter 'guid' when calling AddressApi->SearchAddress");

            var localVarPath = "/address/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (license != null) localVarFormParams.Add("license", Configuration.ApiClient.ParameterToString(license)); // form parameter
            if (guid != null) localVarFormParams.Add("guid", Configuration.ApiClient.ParameterToString(guid)); // form parameter
            if (address != null) localVarFormParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (country != null) localVarFormParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // form parameter
            if (state != null) localVarFormParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (county != null) localVarFormParams.Add("county", Configuration.ApiClient.ParameterToString(county)); // form parameter
            if (city != null) localVarFormParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // form parameter
            if (zip != null) localVarFormParams.Add("zip", Configuration.ApiClient.ParameterToString(zip)); // form parameter
            if (district != null) localVarFormParams.Add("district", Configuration.ApiClient.ParameterToString(district)); // form parameter
            if (street != null) localVarFormParams.Add("street", Configuration.ApiClient.ParameterToString(street)); // form parameter
            if (housenumber != null) localVarFormParams.Add("housenumber", Configuration.ApiClient.ParameterToString(housenumber)); // form parameter
            if (locale != null) localVarFormParams.Add("locale", Configuration.ApiClient.ParameterToString(locale)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressSearchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressSearchResponse)));
            
        }

        /// <summary>
        /// Address lookup with multiple possible results Find multiple geo-locations based on unstructured (single-line entry, un-qualified) address information. The result is a set of records which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typo errors the response keys may be empty. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="address">Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter.</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>AddressSearchMultipleResponse</returns>
        public AddressSearchMultipleResponse SearchAddressMultiple (string license, string guid, string address, string locale = null)
        {
             ApiResponse<AddressSearchMultipleResponse> localVarResponse = SearchAddressMultipleWithHttpInfo(license, guid, address, locale);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Address lookup with multiple possible results Find multiple geo-locations based on unstructured (single-line entry, un-qualified) address information. The result is a set of records which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typo errors the response keys may be empty. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="license">The license key is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="guid">The guid is part of the authentication key pair consisting of license and guid (global unique identifier). These two keys are used as your personal API keys. Note that every API request requires both keys, so you will need to include them in each request. </param>
        /// <param name="address">Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter.</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>ApiResponse of AddressSearchMultipleResponse</returns>
        public ApiResponse< AddressSearchMultipleResponse > SearchAddressMultipleWithHttpInfo (string license, string guid, string address, string locale = null)
        {
            // verify the required parameter 'license' is set
            if (license == null)
                throw new ApiException(400, "Missing required parameter 'license' when calling AddressApi->SearchAddressMultiple");
            // verify the required parameter 'guid' is set
            if (guid == null)
                throw new ApiException(400, "Missing required parameter 'guid' when calling AddressApi->SearchAddressMultiple");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AddressApi->SearchAddressMultiple");

            var localVarPath = "/address/search/multiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (license != null) localVarFormParams.Add("license", Configuration.ApiClient.ParameterToString(license)); // form parameter
            if (guid != null) localVarFormParams.Add("guid", Configuration.ApiClient.ParameterToString(guid)); // form parameter
            if (address != null) localVarFormParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (locale != null) localVarFormParams.Add("locale", Configuration.ApiClient.ParameterToString(locale)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchAddressMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressSearchMultipleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressSearchMultipleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressSearchMultipleResponse)));
            
        }

    }
}
