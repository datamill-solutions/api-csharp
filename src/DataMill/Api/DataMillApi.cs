/* 
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market.  GitHub for SDKs: https://github.com/datamill-solutions 
 *
 * OpenAPI spec version: 1.6.5
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using DataMill.Client;
using DataMill.Model;

namespace DataMill.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataMillApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check BIC for spelling
        /// </summary>
        /// <remarks>
        /// Checks the spelling of a given BIC (Business Identifier Code), also known as SWIFT code which is defined in the ISO 9362. The function does not verify if the BIC really exists, instead the format is checked for validity only. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bic">BIC to be checked</param>
        /// <returns>BicCheckResponse</returns>
        BicCheckResponse CheckBIC (string bic);

        /// <summary>
        /// Check BIC for spelling
        /// </summary>
        /// <remarks>
        /// Checks the spelling of a given BIC (Business Identifier Code), also known as SWIFT code which is defined in the ISO 9362. The function does not verify if the BIC really exists, instead the format is checked for validity only. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bic">BIC to be checked</param>
        /// <returns>ApiResponse of BicCheckResponse</returns>
        ApiResponse<BicCheckResponse> CheckBICWithHttpInfo (string bic);
        /// <summary>
        /// Check email syntax and mail server domain
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. In addition if the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>EmailDomainCheckResponse</returns>
        EmailDomainCheckResponse CheckEmailDomain (string email);

        /// <summary>
        /// Check email syntax and mail server domain
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. In addition if the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>ApiResponse of EmailDomainCheckResponse</returns>
        ApiResponse<EmailDomainCheckResponse> CheckEmailDomainWithHttpInfo (string email);
        /// <summary>
        /// Check email syntax, mail server domain and mailbox itself
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. If the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. Additionally the mail server will be checked if an email for the given mailbox can be received. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>EmailExtendedCheckResponse</returns>
        EmailExtendedCheckResponse CheckEmailMailbox (string email);

        /// <summary>
        /// Check email syntax, mail server domain and mailbox itself
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. If the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. Additionally the mail server will be checked if an email for the given mailbox can be received. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>ApiResponse of EmailExtendedCheckResponse</returns>
        ApiResponse<EmailExtendedCheckResponse> CheckEmailMailboxWithHttpInfo (string email);
        /// <summary>
        /// Check email syntax
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>EmailSyntaxCheckResponse</returns>
        EmailSyntaxCheckResponse CheckEmailSyntax (string email);

        /// <summary>
        /// Check email syntax
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>ApiResponse of EmailSyntaxCheckResponse</returns>
        ApiResponse<EmailSyntaxCheckResponse> CheckEmailSyntaxWithHttpInfo (string email);
        /// <summary>
        /// Check IBAN for spelling
        /// </summary>
        /// <remarks>
        /// Checks the spelling, country code and checksum of an IBAN (International Bank Account Number). The IBAN is an internationally agreed system of identifying bank accounts across national borders. The function does not verify if the IBAN really exists, instead the format is checked for validity only. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iban">IBAN to be checked.</param>
        /// <returns>IbanCheckResponse</returns>
        IbanCheckResponse CheckIBAN (string iban);

        /// <summary>
        /// Check IBAN for spelling
        /// </summary>
        /// <remarks>
        /// Checks the spelling, country code and checksum of an IBAN (International Bank Account Number). The IBAN is an internationally agreed system of identifying bank accounts across national borders. The function does not verify if the IBAN really exists, instead the format is checked for validity only. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iban">IBAN to be checked.</param>
        /// <returns>ApiResponse of IbanCheckResponse</returns>
        ApiResponse<IbanCheckResponse> CheckIBANWithHttpInfo (string iban);
        /// <summary>
        /// Verify mobile phone number
        /// </summary>
        /// <remarks>
        /// Real time validation of mobile numbers without triggering a call of send a text message.
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Mobile phone number to be verified.</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>PhoneMobileCheckResponse</returns>
        PhoneMobileCheckResponse CheckMobilePhone (string phonenumber, string countrycode);

        /// <summary>
        /// Verify mobile phone number
        /// </summary>
        /// <remarks>
        /// Real time validation of mobile numbers without triggering a call of send a text message.
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Mobile phone number to be verified.</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>ApiResponse of PhoneMobileCheckResponse</returns>
        ApiResponse<PhoneMobileCheckResponse> CheckMobilePhoneWithHttpInfo (string phonenumber, string countrycode);
        /// <summary>
        /// Information about web resources
        /// </summary>
        /// <remarks>
        /// Fetches the resource of a given url and checks if it is available. Only websites using HTTP/HTTPS are allowed. IP addresses and ports other than 80/443 are not permitted and will be ignored. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url to be checked (e.g. any website)</param>
        /// <param name="maxRedirects">The maximum amount of redirects until the lookup for the root resource will be stopped (default **10**) (optional, default to 10)</param>
        /// <returns>UrlCheckResponse</returns>
        UrlCheckResponse CheckUrl (string url, string maxRedirects = null);

        /// <summary>
        /// Information about web resources
        /// </summary>
        /// <remarks>
        /// Fetches the resource of a given url and checks if it is available. Only websites using HTTP/HTTPS are allowed. IP addresses and ports other than 80/443 are not permitted and will be ignored. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url to be checked (e.g. any website)</param>
        /// <param name="maxRedirects">The maximum amount of redirects until the lookup for the root resource will be stopped (default **10**) (optional, default to 10)</param>
        /// <returns>ApiResponse of UrlCheckResponse</returns>
        ApiResponse<UrlCheckResponse> CheckUrlWithHttpInfo (string url, string maxRedirects = null);
        /// <summary>
        /// Check vat number for correctness
        /// </summary>
        /// <remarks>
        /// Checks if a given VAT (Value Added Tax) identification number is valid or not. Only VAT numbers of companies within the European Union can be verified. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <returns>VatCheckResponse</returns>
        VatCheckResponse CheckVAT (string vatnumber);

        /// <summary>
        /// Check vat number for correctness
        /// </summary>
        /// <remarks>
        /// Checks if a given VAT (Value Added Tax) identification number is valid or not. Only VAT numbers of companies within the European Union can be verified. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <returns>ApiResponse of VatCheckResponse</returns>
        ApiResponse<VatCheckResponse> CheckVATWithHttpInfo (string vatnumber);
        /// <summary>
        /// Convert any string to capitalize words
        /// </summary>
        /// <remarks>
        /// Changes any word of a given text so that the first letter is capitalized and all the others turned into lower case. Special proper names, like \&quot;DiCaprio\&quot; are detected and ignored. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ConvertCapitalFirstResponse</returns>
        ConvertCapitalFirstResponse ConvertCapitalFirst (string text);

        /// <summary>
        /// Convert any string to capitalize words
        /// </summary>
        /// <remarks>
        /// Changes any word of a given text so that the first letter is capitalized and all the others turned into lower case. Special proper names, like \&quot;DiCaprio\&quot; are detected and ignored. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ApiResponse of ConvertCapitalFirstResponse</returns>
        ApiResponse<ConvertCapitalFirstResponse> ConvertCapitalFirstWithHttpInfo (string text);
        /// <summary>
        /// Convert any string to lower case
        /// </summary>
        /// <remarks>
        /// Converts all letters of any word in a given string in the respective lowercase. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ConvertLowerCaseResponse</returns>
        ConvertLowerCaseResponse ConvertLowerCase (string text);

        /// <summary>
        /// Convert any string to lower case
        /// </summary>
        /// <remarks>
        /// Converts all letters of any word in a given string in the respective lowercase. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ApiResponse of ConvertLowerCaseResponse</returns>
        ApiResponse<ConvertLowerCaseResponse> ConvertLowerCaseWithHttpInfo (string text);
        /// <summary>
        /// Convert any string to upper case
        /// </summary>
        /// <remarks>
        /// Converts all letters of any word in a given string in the respective capital. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ConvertUpperCaseResponse</returns>
        ConvertUpperCaseResponse ConvertUpperCase (string text);

        /// <summary>
        /// Convert any string to upper case
        /// </summary>
        /// <remarks>
        /// Converts all letters of any word in a given string in the respective capital. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ApiResponse of ConvertUpperCaseResponse</returns>
        ApiResponse<ConvertUpperCaseResponse> ConvertUpperCaseWithHttpInfo (string text);
        /// <summary>
        /// Wrap text
        /// </summary>
        /// <remarks>
        /// Breaks a text into multiple newlines. Each line will be separated by a \\r (CR, ASCII 13) and \\n (LF, ASCII 10) character. The number of characters a line break will be inserted after can be justified. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Fre-form text to be wrapped.</param>
        /// <param name="limit">The number of characters a linefeed will be inserted after (maximum character length per line).</param>
        /// <param name="mode">The mode how the linefeed will be inserted. Either before (default) the current word, after the current word or exactly after the character. Possible values are **before** to break before last word, **after** to break after last word, **exact** to break at limit.  (optional)</param>
        /// <param name="linebreak">Defines which line separator should be used. Possible values are **full** for *\\r\\n*, **single** for *\\n*, **html** for *&amp;lt;br&amp;gt;*  (optional)</param>
        /// <returns>ConvertWrapResponse</returns>
        ConvertWrapResponse ConvertWrap (string text, int? limit, string mode = null, string linebreak = null);

        /// <summary>
        /// Wrap text
        /// </summary>
        /// <remarks>
        /// Breaks a text into multiple newlines. Each line will be separated by a \\r (CR, ASCII 13) and \\n (LF, ASCII 10) character. The number of characters a line break will be inserted after can be justified. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Fre-form text to be wrapped.</param>
        /// <param name="limit">The number of characters a linefeed will be inserted after (maximum character length per line).</param>
        /// <param name="mode">The mode how the linefeed will be inserted. Either before (default) the current word, after the current word or exactly after the character. Possible values are **before** to break before last word, **after** to break after last word, **exact** to break at limit.  (optional)</param>
        /// <param name="linebreak">Defines which line separator should be used. Possible values are **full** for *\\r\\n*, **single** for *\\n*, **html** for *&amp;lt;br&amp;gt;*  (optional)</param>
        /// <returns>ApiResponse of ConvertWrapResponse</returns>
        ApiResponse<ConvertWrapResponse> ConvertWrapWithHttpInfo (string text, int? limit, string mode = null, string linebreak = null);
        /// <summary>
        /// Try to extract house number from street information
        /// </summary>
        /// <remarks>
        /// Find and extract the house number based on partial address information. The result is an extracted street name, house number and additional house number information (e.g. Apartment, Floor, Room). It is necessary to provide street and housenumber, either in street field or separated in street and house number field. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="street">Free-form text containing the street name and optional the house number including additional house number information. The key is required if housenumber is empty or unset. (optional)</param>
        /// <param name="housenumber">Free-form text containing the house number including additional house number information and optional the street name. The key is required if street is empty or unset. (optional)</param>
        /// <returns>AddressHouseNumberExtractResponse</returns>
        AddressHouseNumberExtractResponse ExtractHouseNumber (string street = null, string housenumber = null);

        /// <summary>
        /// Try to extract house number from street information
        /// </summary>
        /// <remarks>
        /// Find and extract the house number based on partial address information. The result is an extracted street name, house number and additional house number information (e.g. Apartment, Floor, Room). It is necessary to provide street and housenumber, either in street field or separated in street and house number field. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="street">Free-form text containing the street name and optional the house number including additional house number information. The key is required if housenumber is empty or unset. (optional)</param>
        /// <param name="housenumber">Free-form text containing the house number including additional house number information and optional the street name. The key is required if street is empty or unset. (optional)</param>
        /// <returns>ApiResponse of AddressHouseNumberExtractResponse</returns>
        ApiResponse<AddressHouseNumberExtractResponse> ExtractHouseNumberWithHttpInfo (string street = null, string housenumber = null);
        /// <summary>
        /// Parse, format and validate phone numbers
        /// </summary>
        /// <remarks>
        /// Validates a given phone number and converts it to the canonical form. In addition the type of the phone number is determined (e.g. \&quot;fixed line\&quot;, \&quot;mobile\&quot;, ...). The number is not checked for existence. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Phone number to be formatted and validated</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="format">The custom format of the returning phone number if valid. The format is a combination of the following placeholders:  * **{countrycode}**: The international dial prefix for the country without leading zero or the \\\&quot;+\\\&quot; sign  * **{nationalcode}**: The regional dial prefix  * **{phonenumber}**: The phone number including the extension and without the international and regional prefix  * **{national_prefix}**: The national dial prefix including the leading zero  * **{international_prefix}**: The international dial prefix including leading zeros.  If no custom format is specified the following combination is used: **+{countrycode} {nationalcode} {phonenumber}** (canonical format)  (optional)</param>
        /// <param name="directDialingDelimiter">Optional define a special character (e.g. -) as delimiter between the phone number and the extension. (optional)</param>
        /// <param name="allowedDelimiters">Optional collection of characters inside the specified phone number which are allowed for delimiter. The collection must be provided as **JSON** formatted string. (optional)</param>
        /// <returns>PhoneFormatResponse</returns>
        PhoneFormatResponse FormatPhoneNumber (string phonenumber, string countrycode, string format = null, string directDialingDelimiter = null, string allowedDelimiters = null);

        /// <summary>
        /// Parse, format and validate phone numbers
        /// </summary>
        /// <remarks>
        /// Validates a given phone number and converts it to the canonical form. In addition the type of the phone number is determined (e.g. \&quot;fixed line\&quot;, \&quot;mobile\&quot;, ...). The number is not checked for existence. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Phone number to be formatted and validated</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="format">The custom format of the returning phone number if valid. The format is a combination of the following placeholders:  * **{countrycode}**: The international dial prefix for the country without leading zero or the \\\&quot;+\\\&quot; sign  * **{nationalcode}**: The regional dial prefix  * **{phonenumber}**: The phone number including the extension and without the international and regional prefix  * **{national_prefix}**: The national dial prefix including the leading zero  * **{international_prefix}**: The international dial prefix including leading zeros.  If no custom format is specified the following combination is used: **+{countrycode} {nationalcode} {phonenumber}** (canonical format)  (optional)</param>
        /// <param name="directDialingDelimiter">Optional define a special character (e.g. -) as delimiter between the phone number and the extension. (optional)</param>
        /// <param name="allowedDelimiters">Optional collection of characters inside the specified phone number which are allowed for delimiter. The collection must be provided as **JSON** formatted string. (optional)</param>
        /// <returns>ApiResponse of PhoneFormatResponse</returns>
        ApiResponse<PhoneFormatResponse> FormatPhoneNumberWithHttpInfo (string phonenumber, string countrycode, string format = null, string directDialingDelimiter = null, string allowedDelimiters = null);
        /// <summary>
        /// Get marketing information by DUNS number
        /// </summary>
        /// <remarks>
        /// Get marketing information about a company (credit rating, PAYDEX score, demographic information, ...) based on the company&#39;s D-U-N-S number. In order to get the marketing information each request requires a reason. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>BusinessDataDunsRatingResponse</returns>
        BusinessDataDunsRatingResponse GetDUNSRating (string dunsNumber, string reasonCode);

        /// <summary>
        /// Get marketing information by DUNS number
        /// </summary>
        /// <remarks>
        /// Get marketing information about a company (credit rating, PAYDEX score, demographic information, ...) based on the company&#39;s D-U-N-S number. In order to get the marketing information each request requires a reason. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>ApiResponse of BusinessDataDunsRatingResponse</returns>
        ApiResponse<BusinessDataDunsRatingResponse> GetDUNSRatingWithHttpInfo (string dunsNumber, string reasonCode);
        /// <summary>
        /// Recognize and extract first names
        /// </summary>
        /// <remarks>
        /// Detects all first names in a given sting (e.g. a person&#39;s name) and extracts them. (Works only with common first names in Germany, Austria and Switzerland) 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to detect all first names and extract them</param>
        /// <returns>FirstNameGetResponse</returns>
        FirstNameGetResponse GetFirstNames (string name);

        /// <summary>
        /// Recognize and extract first names
        /// </summary>
        /// <remarks>
        /// Detects all first names in a given sting (e.g. a person&#39;s name) and extracts them. (Works only with common first names in Germany, Austria and Switzerland) 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to detect all first names and extract them</param>
        /// <returns>ApiResponse of FirstNameGetResponse</returns>
        ApiResponse<FirstNameGetResponse> GetFirstNamesWithHttpInfo (string name);
        /// <summary>
        /// Recognize gender by first name
        /// </summary>
        /// <remarks>
        /// Recognizes the gender of a given first name. (Works only with common first names in Germany, Austria and Switzerland) 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">First name to recognize gender.</param>
        /// <returns>GenderGetResponse</returns>
        GenderGetResponse GetGender (string firstname);

        /// <summary>
        /// Recognize gender by first name
        /// </summary>
        /// <remarks>
        /// Recognizes the gender of a given first name. (Works only with common first names in Germany, Austria and Switzerland) 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">First name to recognize gender.</param>
        /// <returns>ApiResponse of GenderGetResponse</returns>
        ApiResponse<GenderGetResponse> GetGenderWithHttpInfo (string firstname);
        /// <summary>
        /// Recognize gender by first name (advanced)
        /// </summary>
        /// <remarks>
        /// Recognizes the gender of a given first name considering country specific peculiarities.
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">First name to recognize gender.</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>GenderExtendedGetResponse</returns>
        GenderExtendedGetResponse GetGenderExtended (string firstname, string countrycode);

        /// <summary>
        /// Recognize gender by first name (advanced)
        /// </summary>
        /// <remarks>
        /// Recognizes the gender of a given first name considering country specific peculiarities.
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">First name to recognize gender.</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>ApiResponse of GenderExtendedGetResponse</returns>
        ApiResponse<GenderExtendedGetResponse> GetGenderExtendedWithHttpInfo (string firstname, string countrycode);
        /// <summary>
        /// International and national dial prefix
        /// </summary>
        /// <remarks>
        /// Resolves the national and international dial prefix for a country specified by the given ISO country code.
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>PhoneCountryCodeGetResponse</returns>
        PhoneCountryCodeGetResponse GetPhoneCountryCode (string countrycode);

        /// <summary>
        /// International and national dial prefix
        /// </summary>
        /// <remarks>
        /// Resolves the national and international dial prefix for a country specified by the given ISO country code.
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>ApiResponse of PhoneCountryCodeGetResponse</returns>
        ApiResponse<PhoneCountryCodeGetResponse> GetPhoneCountryCodeWithHttpInfo (string countrycode);
        /// <summary>
        /// Calculate phonetic codes of a given text
        /// </summary>
        /// <remarks>
        /// Get the phonetic code of a given text. Currently three phonetic algorithms are available:  * **Soundex** (algorithm code 1)  * **Colcogne Phonetic** (algorithm code 2)  * **Metaphon** (algorithm code 3) 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text which should be converted. Each word will be converted separatly and generate a single entry in the result. </param>
        /// <param name="phoneticAlgorithm">The phonetic algorithm which should be applied. If no algorithm code will be provided **Soundex** will be used. Codes:  * 1 &#x3D; Soundex  * 2 &#x3D; Colcogne Phonetic  * 3 &#x3D; Metaphon  (optional)</param>
        /// <returns>PhoneticCodeGetResponse</returns>
        PhoneticCodeGetResponse GetPhoneticCode (string text, int? phoneticAlgorithm = null);

        /// <summary>
        /// Calculate phonetic codes of a given text
        /// </summary>
        /// <remarks>
        /// Get the phonetic code of a given text. Currently three phonetic algorithms are available:  * **Soundex** (algorithm code 1)  * **Colcogne Phonetic** (algorithm code 2)  * **Metaphon** (algorithm code 3) 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text which should be converted. Each word will be converted separatly and generate a single entry in the result. </param>
        /// <param name="phoneticAlgorithm">The phonetic algorithm which should be applied. If no algorithm code will be provided **Soundex** will be used. Codes:  * 1 &#x3D; Soundex  * 2 &#x3D; Colcogne Phonetic  * 3 &#x3D; Metaphon  (optional)</param>
        /// <returns>ApiResponse of PhoneticCodeGetResponse</returns>
        ApiResponse<PhoneticCodeGetResponse> GetPhoneticCodeWithHttpInfo (string text, int? phoneticAlgorithm = null);
        /// <summary>
        /// Retrieve social media data by email address
        /// </summary>
        /// <remarks>
        /// Get the number of followers and account information of multiple social media platforms from individual email addresses. If the social media information for a specific email address aren&#39;t fetched yet the request will be queued and the data will be available within the next 12 hours. Please consider that the response of a social media platform may be empty because of restricted access (privacy setting of the person being checked). The following social media platforms are currently checked:  * **LinkedIn**  * **XING**  * **Facebook**  * **Twitter**  * **Pinterest**  * **Instagram**  * **Youtube**  * **Google Plus**  * **Klout** 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The person&#39;s email address being checked on mentioned social media plattforms</param>
        /// <returns>SocialMediaActivitiesGetResponse</returns>
        SocialMediaActivitiesGetResponse GetSocialMediaActivities (string email);

        /// <summary>
        /// Retrieve social media data by email address
        /// </summary>
        /// <remarks>
        /// Get the number of followers and account information of multiple social media platforms from individual email addresses. If the social media information for a specific email address aren&#39;t fetched yet the request will be queued and the data will be available within the next 12 hours. Please consider that the response of a social media platform may be empty because of restricted access (privacy setting of the person being checked). The following social media platforms are currently checked:  * **LinkedIn**  * **XING**  * **Facebook**  * **Twitter**  * **Pinterest**  * **Instagram**  * **Youtube**  * **Google Plus**  * **Klout** 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The person&#39;s email address being checked on mentioned social media plattforms</param>
        /// <returns>ApiResponse of SocialMediaActivitiesGetResponse</returns>
        ApiResponse<SocialMediaActivitiesGetResponse> GetSocialMediaActivitiesWithHttpInfo (string email);
        /// <summary>
        /// Reverse address lookup
        /// </summary>
        /// <remarks>
        /// Resolve an address corresponding to a given geo-coordinate. The result is a single record which matches the given latitude and longitude. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude of the address (use a dot as decimal point)</param>
        /// <param name="longitude">Longitude of the address (use a dot as decimal point)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>AddressSearchResponse</returns>
        AddressSearchResponse LocateAddress (string latitude, string longitude, string locale = null);

        /// <summary>
        /// Reverse address lookup
        /// </summary>
        /// <remarks>
        /// Resolve an address corresponding to a given geo-coordinate. The result is a single record which matches the given latitude and longitude. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude of the address (use a dot as decimal point)</param>
        /// <param name="longitude">Longitude of the address (use a dot as decimal point)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>ApiResponse of AddressSearchResponse</returns>
        ApiResponse<AddressSearchResponse> LocateAddressWithHttpInfo (string latitude, string longitude, string locale = null);
        /// <summary>
        /// Resolve company information by DUNS number
        /// </summary>
        /// <remarks>
        /// Resolves company information (official name, postal address, annual turnover, number of employees, ...) based on  the company&#39;s D-U-N-S number. In order to get the company information each request requires a reason. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>BusinessDataDunsResolveResponse</returns>
        BusinessDataDunsResolveResponse ResolveDUNS (string dunsNumber, string reasonCode);

        /// <summary>
        /// Resolve company information by DUNS number
        /// </summary>
        /// <remarks>
        /// Resolves company information (official name, postal address, annual turnover, number of employees, ...) based on  the company&#39;s D-U-N-S number. In order to get the company information each request requires a reason. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>ApiResponse of BusinessDataDunsResolveResponse</returns>
        ApiResponse<BusinessDataDunsResolveResponse> ResolveDUNSWithHttpInfo (string dunsNumber, string reasonCode);
        /// <summary>
        /// Try to resolve VAT number to company information
        /// </summary>
        /// <remarks>
        /// Resolves company information (company name and postal address) based on the company&#39;s VAT (Value Added Tax) identification number. Only VAT numbers of companies within the European Union can be verified and resolved. Some countries have access restrictions and may not deliver the full company information. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>VatResolveResponse</returns>
        VatResolveResponse ResolveVAT (string vatnumber, string locale = null);

        /// <summary>
        /// Try to resolve VAT number to company information
        /// </summary>
        /// <remarks>
        /// Resolves company information (company name and postal address) based on the company&#39;s VAT (Value Added Tax) identification number. Only VAT numbers of companies within the European Union can be verified and resolved. Some countries have access restrictions and may not deliver the full company information. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>ApiResponse of VatResolveResponse</returns>
        ApiResponse<VatResolveResponse> ResolveVATWithHttpInfo (string vatnumber, string locale = null);
        /// <summary>
        /// Lookup physical postal address
        /// </summary>
        /// <remarks>
        /// Find geo-location based on unstructured (single-line entry, un-qualified) or based on structured (qualified) address information. The result is a single record which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typos the response keys may be empty.  The unstructured query determines each address part by its own and afterwards finds the closest geo-location. It should only be used if you do not know which address information fits in which query parameter. The structured query provides an additional logic for specific countries to improve the result of the determined geo-location. Please consider that if you do not provide a country name/code the result may end in a different country because the same city + street combination may exist in multiple countries. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Unstructured query parameter. Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. You can specify the &#39;address&#39; parameter by itself or you can specify it with other parameters to narrow your search.  (optional)</param>
        /// <param name="country">Specify the country using the country code (ISO 3166-1 alpha-3) or the country name. (optional)</param>
        /// <param name="state">First subdivision level below the country. Specify the state using full or abbreviated notation. (optional)</param>
        /// <param name="county">Second subdivision level below the country. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="city">The city name. (optional)</param>
        /// <param name="zip">Postal code defined by the government of the country. (optional)</param>
        /// <param name="district">Subdivision level below the city. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="street">The street name. (optional)</param>
        /// <param name="housenumber">The house number or building name. (optional)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>AddressSearchResponse</returns>
        AddressSearchResponse SearchAddress (string address = null, string country = null, string state = null, string county = null, string city = null, string zip = null, string district = null, string street = null, string housenumber = null, string locale = null);

        /// <summary>
        /// Lookup physical postal address
        /// </summary>
        /// <remarks>
        /// Find geo-location based on unstructured (single-line entry, un-qualified) or based on structured (qualified) address information. The result is a single record which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typos the response keys may be empty.  The unstructured query determines each address part by its own and afterwards finds the closest geo-location. It should only be used if you do not know which address information fits in which query parameter. The structured query provides an additional logic for specific countries to improve the result of the determined geo-location. Please consider that if you do not provide a country name/code the result may end in a different country because the same city + street combination may exist in multiple countries. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Unstructured query parameter. Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. You can specify the &#39;address&#39; parameter by itself or you can specify it with other parameters to narrow your search.  (optional)</param>
        /// <param name="country">Specify the country using the country code (ISO 3166-1 alpha-3) or the country name. (optional)</param>
        /// <param name="state">First subdivision level below the country. Specify the state using full or abbreviated notation. (optional)</param>
        /// <param name="county">Second subdivision level below the country. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="city">The city name. (optional)</param>
        /// <param name="zip">Postal code defined by the government of the country. (optional)</param>
        /// <param name="district">Subdivision level below the city. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="street">The street name. (optional)</param>
        /// <param name="housenumber">The house number or building name. (optional)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>ApiResponse of AddressSearchResponse</returns>
        ApiResponse<AddressSearchResponse> SearchAddressWithHttpInfo (string address = null, string country = null, string state = null, string county = null, string city = null, string zip = null, string district = null, string street = null, string housenumber = null, string locale = null);
        /// <summary>
        /// Address lookup with multiple possible results
        /// </summary>
        /// <remarks>
        /// Find multiple geo-locations based on unstructured (single-line entry, un-qualified) address information. The result is a set of records which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typo errors the response keys may be empty. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter.</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>AddressSearchMultipleResponse</returns>
        AddressSearchMultipleResponse SearchAddressMultiple (string address, string locale = null);

        /// <summary>
        /// Address lookup with multiple possible results
        /// </summary>
        /// <remarks>
        /// Find multiple geo-locations based on unstructured (single-line entry, un-qualified) address information. The result is a set of records which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typo errors the response keys may be empty. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter.</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>ApiResponse of AddressSearchMultipleResponse</returns>
        ApiResponse<AddressSearchMultipleResponse> SearchAddressMultipleWithHttpInfo (string address, string locale = null);
        /// <summary>
        /// Find DUNS number and company information by name
        /// </summary>
        /// <remarks>
        /// Finds the D-U-N-S number and additional company information by the company&#39;s name. Optionally a filter for the headquarters location can be added to get a more accurate response. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="companyName">The company name you are looking for or relevant parts of it (may be empty if the duns_number is set) (optional)</param>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information (may be empty if the company_name and country_code are set) (optional)</param>
        /// <param name="state">Filter to get only companies which matches the specified state (required for United States) (optional)</param>
        /// <param name="city">Filter to get only companies which matches the specified city (optional)</param>
        /// <param name="zip">Filter to get only companies which matches the specified postal code (optional)</param>
        /// <param name="street">Filter to get only companies which matches the specified street (optional)</param>
        /// <returns>BusinessDataDunsSearchResponse</returns>
        BusinessDataDunsSearchResponse SearchDUNS (string countryCode, string companyName = null, string dunsNumber = null, string state = null, string city = null, string zip = null, string street = null);

        /// <summary>
        /// Find DUNS number and company information by name
        /// </summary>
        /// <remarks>
        /// Finds the D-U-N-S number and additional company information by the company&#39;s name. Optionally a filter for the headquarters location can be added to get a more accurate response. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="companyName">The company name you are looking for or relevant parts of it (may be empty if the duns_number is set) (optional)</param>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information (may be empty if the company_name and country_code are set) (optional)</param>
        /// <param name="state">Filter to get only companies which matches the specified state (required for United States) (optional)</param>
        /// <param name="city">Filter to get only companies which matches the specified city (optional)</param>
        /// <param name="zip">Filter to get only companies which matches the specified postal code (optional)</param>
        /// <param name="street">Filter to get only companies which matches the specified street (optional)</param>
        /// <returns>ApiResponse of BusinessDataDunsSearchResponse</returns>
        ApiResponse<BusinessDataDunsSearchResponse> SearchDUNSWithHttpInfo (string countryCode, string companyName = null, string dunsNumber = null, string state = null, string city = null, string zip = null, string street = null);
        /// <summary>
        /// Find moved and deceased contacts
        /// </summary>
        /// <remarks>
        /// Checks if the postal address of a person identified by its full name is invalid (moved to a new address or deceased). This function does NOT verify/check if a known postal address is still valid, instead it only checks if the person is moved to another address or is deceased and therefore a mail will result in an undeliverable state. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">The person&#39;s first name</param>
        /// <param name="lastName">The person&#39;s last name</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="zip">Last known postal code the person lives in</param>
        /// <param name="street">Last known street name the person lives in</param>
        /// <param name="reason">Free-form text written in english why you submit the query.</param>
        /// <returns>BusinessDataUndeliverableContactsResponse</returns>
        BusinessDataUndeliverableContactsResponse SearchUndeliverableContact (string firstName, string lastName, string countryCode, string zip, string street, string reason);

        /// <summary>
        /// Find moved and deceased contacts
        /// </summary>
        /// <remarks>
        /// Checks if the postal address of a person identified by its full name is invalid (moved to a new address or deceased). This function does NOT verify/check if a known postal address is still valid, instead it only checks if the person is moved to another address or is deceased and therefore a mail will result in an undeliverable state. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">The person&#39;s first name</param>
        /// <param name="lastName">The person&#39;s last name</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="zip">Last known postal code the person lives in</param>
        /// <param name="street">Last known street name the person lives in</param>
        /// <param name="reason">Free-form text written in english why you submit the query.</param>
        /// <returns>ApiResponse of BusinessDataUndeliverableContactsResponse</returns>
        ApiResponse<BusinessDataUndeliverableContactsResponse> SearchUndeliverableContactWithHttpInfo (string firstName, string lastName, string countryCode, string zip, string street, string reason);
        /// <summary>
        /// Find VAT number and company information by name
        /// </summary>
        /// <remarks>
        /// Finds the VAT number and additional company information by the company&#39;s name and headquarters location. The function returns multiple results if similar companies are found in the same city. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company">The name of an company. You may enter the fully qualified name or only partial information.</param>
        /// <param name="city">The city where the company&#39;s headquarters is located. (optional)</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI**  (optional)</param>
        /// <param name="limit">The maximum amount of results returned if multiple companies are found. Default value is **10**.  (optional, default to 10)</param>
        /// <param name="minScore">Threshold to set the minimum score rate of results being returned. Default: **0.8**  (optional, default to 0.8)</param>
        /// <returns>VatSearchResponse</returns>
        VatSearchResponse SearchVAT (string company, string city = null, string countryCode = null, string limit = null, string minScore = null);

        /// <summary>
        /// Find VAT number and company information by name
        /// </summary>
        /// <remarks>
        /// Finds the VAT number and additional company information by the company&#39;s name and headquarters location. The function returns multiple results if similar companies are found in the same city. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company">The name of an company. You may enter the fully qualified name or only partial information.</param>
        /// <param name="city">The city where the company&#39;s headquarters is located. (optional)</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI**  (optional)</param>
        /// <param name="limit">The maximum amount of results returned if multiple companies are found. Default value is **10**.  (optional, default to 10)</param>
        /// <param name="minScore">Threshold to set the minimum score rate of results being returned. Default: **0.8**  (optional, default to 0.8)</param>
        /// <returns>ApiResponse of VatSearchResponse</returns>
        ApiResponse<VatSearchResponse> SearchVATWithHttpInfo (string company, string city = null, string countryCode = null, string limit = null, string minScore = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Check BIC for spelling
        /// </summary>
        /// <remarks>
        /// Checks the spelling of a given BIC (Business Identifier Code), also known as SWIFT code which is defined in the ISO 9362. The function does not verify if the BIC really exists, instead the format is checked for validity only. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bic">BIC to be checked</param>
        /// <returns>Task of BicCheckResponse</returns>
        System.Threading.Tasks.Task<BicCheckResponse> CheckBICAsync (string bic);

        /// <summary>
        /// Check BIC for spelling
        /// </summary>
        /// <remarks>
        /// Checks the spelling of a given BIC (Business Identifier Code), also known as SWIFT code which is defined in the ISO 9362. The function does not verify if the BIC really exists, instead the format is checked for validity only. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bic">BIC to be checked</param>
        /// <returns>Task of ApiResponse (BicCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BicCheckResponse>> CheckBICAsyncWithHttpInfo (string bic);
        /// <summary>
        /// Check email syntax and mail server domain
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. In addition if the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of EmailDomainCheckResponse</returns>
        System.Threading.Tasks.Task<EmailDomainCheckResponse> CheckEmailDomainAsync (string email);

        /// <summary>
        /// Check email syntax and mail server domain
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. In addition if the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of ApiResponse (EmailDomainCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailDomainCheckResponse>> CheckEmailDomainAsyncWithHttpInfo (string email);
        /// <summary>
        /// Check email syntax, mail server domain and mailbox itself
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. If the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. Additionally the mail server will be checked if an email for the given mailbox can be received. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of EmailExtendedCheckResponse</returns>
        System.Threading.Tasks.Task<EmailExtendedCheckResponse> CheckEmailMailboxAsync (string email);

        /// <summary>
        /// Check email syntax, mail server domain and mailbox itself
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. If the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. Additionally the mail server will be checked if an email for the given mailbox can be received. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of ApiResponse (EmailExtendedCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailExtendedCheckResponse>> CheckEmailMailboxAsyncWithHttpInfo (string email);
        /// <summary>
        /// Check email syntax
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of EmailSyntaxCheckResponse</returns>
        System.Threading.Tasks.Task<EmailSyntaxCheckResponse> CheckEmailSyntaxAsync (string email);

        /// <summary>
        /// Check email syntax
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of ApiResponse (EmailSyntaxCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSyntaxCheckResponse>> CheckEmailSyntaxAsyncWithHttpInfo (string email);
        /// <summary>
        /// Check IBAN for spelling
        /// </summary>
        /// <remarks>
        /// Checks the spelling, country code and checksum of an IBAN (International Bank Account Number). The IBAN is an internationally agreed system of identifying bank accounts across national borders. The function does not verify if the IBAN really exists, instead the format is checked for validity only. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iban">IBAN to be checked.</param>
        /// <returns>Task of IbanCheckResponse</returns>
        System.Threading.Tasks.Task<IbanCheckResponse> CheckIBANAsync (string iban);

        /// <summary>
        /// Check IBAN for spelling
        /// </summary>
        /// <remarks>
        /// Checks the spelling, country code and checksum of an IBAN (International Bank Account Number). The IBAN is an internationally agreed system of identifying bank accounts across national borders. The function does not verify if the IBAN really exists, instead the format is checked for validity only. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iban">IBAN to be checked.</param>
        /// <returns>Task of ApiResponse (IbanCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IbanCheckResponse>> CheckIBANAsyncWithHttpInfo (string iban);
        /// <summary>
        /// Verify mobile phone number
        /// </summary>
        /// <remarks>
        /// Real time validation of mobile numbers without triggering a call of send a text message.
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Mobile phone number to be verified.</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>Task of PhoneMobileCheckResponse</returns>
        System.Threading.Tasks.Task<PhoneMobileCheckResponse> CheckMobilePhoneAsync (string phonenumber, string countrycode);

        /// <summary>
        /// Verify mobile phone number
        /// </summary>
        /// <remarks>
        /// Real time validation of mobile numbers without triggering a call of send a text message.
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Mobile phone number to be verified.</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>Task of ApiResponse (PhoneMobileCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhoneMobileCheckResponse>> CheckMobilePhoneAsyncWithHttpInfo (string phonenumber, string countrycode);
        /// <summary>
        /// Information about web resources
        /// </summary>
        /// <remarks>
        /// Fetches the resource of a given url and checks if it is available. Only websites using HTTP/HTTPS are allowed. IP addresses and ports other than 80/443 are not permitted and will be ignored. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url to be checked (e.g. any website)</param>
        /// <param name="maxRedirects">The maximum amount of redirects until the lookup for the root resource will be stopped (default **10**) (optional, default to 10)</param>
        /// <returns>Task of UrlCheckResponse</returns>
        System.Threading.Tasks.Task<UrlCheckResponse> CheckUrlAsync (string url, string maxRedirects = null);

        /// <summary>
        /// Information about web resources
        /// </summary>
        /// <remarks>
        /// Fetches the resource of a given url and checks if it is available. Only websites using HTTP/HTTPS are allowed. IP addresses and ports other than 80/443 are not permitted and will be ignored. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url to be checked (e.g. any website)</param>
        /// <param name="maxRedirects">The maximum amount of redirects until the lookup for the root resource will be stopped (default **10**) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (UrlCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UrlCheckResponse>> CheckUrlAsyncWithHttpInfo (string url, string maxRedirects = null);
        /// <summary>
        /// Check vat number for correctness
        /// </summary>
        /// <remarks>
        /// Checks if a given VAT (Value Added Tax) identification number is valid or not. Only VAT numbers of companies within the European Union can be verified. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <returns>Task of VatCheckResponse</returns>
        System.Threading.Tasks.Task<VatCheckResponse> CheckVATAsync (string vatnumber);

        /// <summary>
        /// Check vat number for correctness
        /// </summary>
        /// <remarks>
        /// Checks if a given VAT (Value Added Tax) identification number is valid or not. Only VAT numbers of companies within the European Union can be verified. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <returns>Task of ApiResponse (VatCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VatCheckResponse>> CheckVATAsyncWithHttpInfo (string vatnumber);
        /// <summary>
        /// Convert any string to capitalize words
        /// </summary>
        /// <remarks>
        /// Changes any word of a given text so that the first letter is capitalized and all the others turned into lower case. Special proper names, like \&quot;DiCaprio\&quot; are detected and ignored. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ConvertCapitalFirstResponse</returns>
        System.Threading.Tasks.Task<ConvertCapitalFirstResponse> ConvertCapitalFirstAsync (string text);

        /// <summary>
        /// Convert any string to capitalize words
        /// </summary>
        /// <remarks>
        /// Changes any word of a given text so that the first letter is capitalized and all the others turned into lower case. Special proper names, like \&quot;DiCaprio\&quot; are detected and ignored. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ApiResponse (ConvertCapitalFirstResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvertCapitalFirstResponse>> ConvertCapitalFirstAsyncWithHttpInfo (string text);
        /// <summary>
        /// Convert any string to lower case
        /// </summary>
        /// <remarks>
        /// Converts all letters of any word in a given string in the respective lowercase. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ConvertLowerCaseResponse</returns>
        System.Threading.Tasks.Task<ConvertLowerCaseResponse> ConvertLowerCaseAsync (string text);

        /// <summary>
        /// Convert any string to lower case
        /// </summary>
        /// <remarks>
        /// Converts all letters of any word in a given string in the respective lowercase. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ApiResponse (ConvertLowerCaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvertLowerCaseResponse>> ConvertLowerCaseAsyncWithHttpInfo (string text);
        /// <summary>
        /// Convert any string to upper case
        /// </summary>
        /// <remarks>
        /// Converts all letters of any word in a given string in the respective capital. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ConvertUpperCaseResponse</returns>
        System.Threading.Tasks.Task<ConvertUpperCaseResponse> ConvertUpperCaseAsync (string text);

        /// <summary>
        /// Convert any string to upper case
        /// </summary>
        /// <remarks>
        /// Converts all letters of any word in a given string in the respective capital. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ApiResponse (ConvertUpperCaseResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvertUpperCaseResponse>> ConvertUpperCaseAsyncWithHttpInfo (string text);
        /// <summary>
        /// Wrap text
        /// </summary>
        /// <remarks>
        /// Breaks a text into multiple newlines. Each line will be separated by a \\r (CR, ASCII 13) and \\n (LF, ASCII 10) character. The number of characters a line break will be inserted after can be justified. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Fre-form text to be wrapped.</param>
        /// <param name="limit">The number of characters a linefeed will be inserted after (maximum character length per line).</param>
        /// <param name="mode">The mode how the linefeed will be inserted. Either before (default) the current word, after the current word or exactly after the character. Possible values are **before** to break before last word, **after** to break after last word, **exact** to break at limit.  (optional)</param>
        /// <param name="linebreak">Defines which line separator should be used. Possible values are **full** for *\\r\\n*, **single** for *\\n*, **html** for *&amp;lt;br&amp;gt;*  (optional)</param>
        /// <returns>Task of ConvertWrapResponse</returns>
        System.Threading.Tasks.Task<ConvertWrapResponse> ConvertWrapAsync (string text, int? limit, string mode = null, string linebreak = null);

        /// <summary>
        /// Wrap text
        /// </summary>
        /// <remarks>
        /// Breaks a text into multiple newlines. Each line will be separated by a \\r (CR, ASCII 13) and \\n (LF, ASCII 10) character. The number of characters a line break will be inserted after can be justified. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Fre-form text to be wrapped.</param>
        /// <param name="limit">The number of characters a linefeed will be inserted after (maximum character length per line).</param>
        /// <param name="mode">The mode how the linefeed will be inserted. Either before (default) the current word, after the current word or exactly after the character. Possible values are **before** to break before last word, **after** to break after last word, **exact** to break at limit.  (optional)</param>
        /// <param name="linebreak">Defines which line separator should be used. Possible values are **full** for *\\r\\n*, **single** for *\\n*, **html** for *&amp;lt;br&amp;gt;*  (optional)</param>
        /// <returns>Task of ApiResponse (ConvertWrapResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvertWrapResponse>> ConvertWrapAsyncWithHttpInfo (string text, int? limit, string mode = null, string linebreak = null);
        /// <summary>
        /// Try to extract house number from street information
        /// </summary>
        /// <remarks>
        /// Find and extract the house number based on partial address information. The result is an extracted street name, house number and additional house number information (e.g. Apartment, Floor, Room). It is necessary to provide street and housenumber, either in street field or separated in street and house number field. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="street">Free-form text containing the street name and optional the house number including additional house number information. The key is required if housenumber is empty or unset. (optional)</param>
        /// <param name="housenumber">Free-form text containing the house number including additional house number information and optional the street name. The key is required if street is empty or unset. (optional)</param>
        /// <returns>Task of AddressHouseNumberExtractResponse</returns>
        System.Threading.Tasks.Task<AddressHouseNumberExtractResponse> ExtractHouseNumberAsync (string street = null, string housenumber = null);

        /// <summary>
        /// Try to extract house number from street information
        /// </summary>
        /// <remarks>
        /// Find and extract the house number based on partial address information. The result is an extracted street name, house number and additional house number information (e.g. Apartment, Floor, Room). It is necessary to provide street and housenumber, either in street field or separated in street and house number field. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="street">Free-form text containing the street name and optional the house number including additional house number information. The key is required if housenumber is empty or unset. (optional)</param>
        /// <param name="housenumber">Free-form text containing the house number including additional house number information and optional the street name. The key is required if street is empty or unset. (optional)</param>
        /// <returns>Task of ApiResponse (AddressHouseNumberExtractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressHouseNumberExtractResponse>> ExtractHouseNumberAsyncWithHttpInfo (string street = null, string housenumber = null);
        /// <summary>
        /// Parse, format and validate phone numbers
        /// </summary>
        /// <remarks>
        /// Validates a given phone number and converts it to the canonical form. In addition the type of the phone number is determined (e.g. \&quot;fixed line\&quot;, \&quot;mobile\&quot;, ...). The number is not checked for existence. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Phone number to be formatted and validated</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="format">The custom format of the returning phone number if valid. The format is a combination of the following placeholders:  * **{countrycode}**: The international dial prefix for the country without leading zero or the \\\&quot;+\\\&quot; sign  * **{nationalcode}**: The regional dial prefix  * **{phonenumber}**: The phone number including the extension and without the international and regional prefix  * **{national_prefix}**: The national dial prefix including the leading zero  * **{international_prefix}**: The international dial prefix including leading zeros.  If no custom format is specified the following combination is used: **+{countrycode} {nationalcode} {phonenumber}** (canonical format)  (optional)</param>
        /// <param name="directDialingDelimiter">Optional define a special character (e.g. -) as delimiter between the phone number and the extension. (optional)</param>
        /// <param name="allowedDelimiters">Optional collection of characters inside the specified phone number which are allowed for delimiter. The collection must be provided as **JSON** formatted string. (optional)</param>
        /// <returns>Task of PhoneFormatResponse</returns>
        System.Threading.Tasks.Task<PhoneFormatResponse> FormatPhoneNumberAsync (string phonenumber, string countrycode, string format = null, string directDialingDelimiter = null, string allowedDelimiters = null);

        /// <summary>
        /// Parse, format and validate phone numbers
        /// </summary>
        /// <remarks>
        /// Validates a given phone number and converts it to the canonical form. In addition the type of the phone number is determined (e.g. \&quot;fixed line\&quot;, \&quot;mobile\&quot;, ...). The number is not checked for existence. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Phone number to be formatted and validated</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="format">The custom format of the returning phone number if valid. The format is a combination of the following placeholders:  * **{countrycode}**: The international dial prefix for the country without leading zero or the \\\&quot;+\\\&quot; sign  * **{nationalcode}**: The regional dial prefix  * **{phonenumber}**: The phone number including the extension and without the international and regional prefix  * **{national_prefix}**: The national dial prefix including the leading zero  * **{international_prefix}**: The international dial prefix including leading zeros.  If no custom format is specified the following combination is used: **+{countrycode} {nationalcode} {phonenumber}** (canonical format)  (optional)</param>
        /// <param name="directDialingDelimiter">Optional define a special character (e.g. -) as delimiter between the phone number and the extension. (optional)</param>
        /// <param name="allowedDelimiters">Optional collection of characters inside the specified phone number which are allowed for delimiter. The collection must be provided as **JSON** formatted string. (optional)</param>
        /// <returns>Task of ApiResponse (PhoneFormatResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhoneFormatResponse>> FormatPhoneNumberAsyncWithHttpInfo (string phonenumber, string countrycode, string format = null, string directDialingDelimiter = null, string allowedDelimiters = null);
        /// <summary>
        /// Get marketing information by DUNS number
        /// </summary>
        /// <remarks>
        /// Get marketing information about a company (credit rating, PAYDEX score, demographic information, ...) based on the company&#39;s D-U-N-S number. In order to get the marketing information each request requires a reason. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>Task of BusinessDataDunsRatingResponse</returns>
        System.Threading.Tasks.Task<BusinessDataDunsRatingResponse> GetDUNSRatingAsync (string dunsNumber, string reasonCode);

        /// <summary>
        /// Get marketing information by DUNS number
        /// </summary>
        /// <remarks>
        /// Get marketing information about a company (credit rating, PAYDEX score, demographic information, ...) based on the company&#39;s D-U-N-S number. In order to get the marketing information each request requires a reason. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>Task of ApiResponse (BusinessDataDunsRatingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessDataDunsRatingResponse>> GetDUNSRatingAsyncWithHttpInfo (string dunsNumber, string reasonCode);
        /// <summary>
        /// Recognize and extract first names
        /// </summary>
        /// <remarks>
        /// Detects all first names in a given sting (e.g. a person&#39;s name) and extracts them. (Works only with common first names in Germany, Austria and Switzerland) 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to detect all first names and extract them</param>
        /// <returns>Task of FirstNameGetResponse</returns>
        System.Threading.Tasks.Task<FirstNameGetResponse> GetFirstNamesAsync (string name);

        /// <summary>
        /// Recognize and extract first names
        /// </summary>
        /// <remarks>
        /// Detects all first names in a given sting (e.g. a person&#39;s name) and extracts them. (Works only with common first names in Germany, Austria and Switzerland) 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to detect all first names and extract them</param>
        /// <returns>Task of ApiResponse (FirstNameGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FirstNameGetResponse>> GetFirstNamesAsyncWithHttpInfo (string name);
        /// <summary>
        /// Recognize gender by first name
        /// </summary>
        /// <remarks>
        /// Recognizes the gender of a given first name. (Works only with common first names in Germany, Austria and Switzerland) 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">First name to recognize gender.</param>
        /// <returns>Task of GenderGetResponse</returns>
        System.Threading.Tasks.Task<GenderGetResponse> GetGenderAsync (string firstname);

        /// <summary>
        /// Recognize gender by first name
        /// </summary>
        /// <remarks>
        /// Recognizes the gender of a given first name. (Works only with common first names in Germany, Austria and Switzerland) 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">First name to recognize gender.</param>
        /// <returns>Task of ApiResponse (GenderGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenderGetResponse>> GetGenderAsyncWithHttpInfo (string firstname);
        /// <summary>
        /// Recognize gender by first name (advanced)
        /// </summary>
        /// <remarks>
        /// Recognizes the gender of a given first name considering country specific peculiarities.
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">First name to recognize gender.</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>Task of GenderExtendedGetResponse</returns>
        System.Threading.Tasks.Task<GenderExtendedGetResponse> GetGenderExtendedAsync (string firstname, string countrycode);

        /// <summary>
        /// Recognize gender by first name (advanced)
        /// </summary>
        /// <remarks>
        /// Recognizes the gender of a given first name considering country specific peculiarities.
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">First name to recognize gender.</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>Task of ApiResponse (GenderExtendedGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenderExtendedGetResponse>> GetGenderExtendedAsyncWithHttpInfo (string firstname, string countrycode);
        /// <summary>
        /// International and national dial prefix
        /// </summary>
        /// <remarks>
        /// Resolves the national and international dial prefix for a country specified by the given ISO country code.
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>Task of PhoneCountryCodeGetResponse</returns>
        System.Threading.Tasks.Task<PhoneCountryCodeGetResponse> GetPhoneCountryCodeAsync (string countrycode);

        /// <summary>
        /// International and national dial prefix
        /// </summary>
        /// <remarks>
        /// Resolves the national and international dial prefix for a country specified by the given ISO country code.
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>Task of ApiResponse (PhoneCountryCodeGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhoneCountryCodeGetResponse>> GetPhoneCountryCodeAsyncWithHttpInfo (string countrycode);
        /// <summary>
        /// Calculate phonetic codes of a given text
        /// </summary>
        /// <remarks>
        /// Get the phonetic code of a given text. Currently three phonetic algorithms are available:  * **Soundex** (algorithm code 1)  * **Colcogne Phonetic** (algorithm code 2)  * **Metaphon** (algorithm code 3) 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text which should be converted. Each word will be converted separatly and generate a single entry in the result. </param>
        /// <param name="phoneticAlgorithm">The phonetic algorithm which should be applied. If no algorithm code will be provided **Soundex** will be used. Codes:  * 1 &#x3D; Soundex  * 2 &#x3D; Colcogne Phonetic  * 3 &#x3D; Metaphon  (optional)</param>
        /// <returns>Task of PhoneticCodeGetResponse</returns>
        System.Threading.Tasks.Task<PhoneticCodeGetResponse> GetPhoneticCodeAsync (string text, int? phoneticAlgorithm = null);

        /// <summary>
        /// Calculate phonetic codes of a given text
        /// </summary>
        /// <remarks>
        /// Get the phonetic code of a given text. Currently three phonetic algorithms are available:  * **Soundex** (algorithm code 1)  * **Colcogne Phonetic** (algorithm code 2)  * **Metaphon** (algorithm code 3) 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text which should be converted. Each word will be converted separatly and generate a single entry in the result. </param>
        /// <param name="phoneticAlgorithm">The phonetic algorithm which should be applied. If no algorithm code will be provided **Soundex** will be used. Codes:  * 1 &#x3D; Soundex  * 2 &#x3D; Colcogne Phonetic  * 3 &#x3D; Metaphon  (optional)</param>
        /// <returns>Task of ApiResponse (PhoneticCodeGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhoneticCodeGetResponse>> GetPhoneticCodeAsyncWithHttpInfo (string text, int? phoneticAlgorithm = null);
        /// <summary>
        /// Retrieve social media data by email address
        /// </summary>
        /// <remarks>
        /// Get the number of followers and account information of multiple social media platforms from individual email addresses. If the social media information for a specific email address aren&#39;t fetched yet the request will be queued and the data will be available within the next 12 hours. Please consider that the response of a social media platform may be empty because of restricted access (privacy setting of the person being checked). The following social media platforms are currently checked:  * **LinkedIn**  * **XING**  * **Facebook**  * **Twitter**  * **Pinterest**  * **Instagram**  * **Youtube**  * **Google Plus**  * **Klout** 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The person&#39;s email address being checked on mentioned social media plattforms</param>
        /// <returns>Task of SocialMediaActivitiesGetResponse</returns>
        System.Threading.Tasks.Task<SocialMediaActivitiesGetResponse> GetSocialMediaActivitiesAsync (string email);

        /// <summary>
        /// Retrieve social media data by email address
        /// </summary>
        /// <remarks>
        /// Get the number of followers and account information of multiple social media platforms from individual email addresses. If the social media information for a specific email address aren&#39;t fetched yet the request will be queued and the data will be available within the next 12 hours. Please consider that the response of a social media platform may be empty because of restricted access (privacy setting of the person being checked). The following social media platforms are currently checked:  * **LinkedIn**  * **XING**  * **Facebook**  * **Twitter**  * **Pinterest**  * **Instagram**  * **Youtube**  * **Google Plus**  * **Klout** 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The person&#39;s email address being checked on mentioned social media plattforms</param>
        /// <returns>Task of ApiResponse (SocialMediaActivitiesGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SocialMediaActivitiesGetResponse>> GetSocialMediaActivitiesAsyncWithHttpInfo (string email);
        /// <summary>
        /// Reverse address lookup
        /// </summary>
        /// <remarks>
        /// Resolve an address corresponding to a given geo-coordinate. The result is a single record which matches the given latitude and longitude. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude of the address (use a dot as decimal point)</param>
        /// <param name="longitude">Longitude of the address (use a dot as decimal point)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>Task of AddressSearchResponse</returns>
        System.Threading.Tasks.Task<AddressSearchResponse> LocateAddressAsync (string latitude, string longitude, string locale = null);

        /// <summary>
        /// Reverse address lookup
        /// </summary>
        /// <remarks>
        /// Resolve an address corresponding to a given geo-coordinate. The result is a single record which matches the given latitude and longitude. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude of the address (use a dot as decimal point)</param>
        /// <param name="longitude">Longitude of the address (use a dot as decimal point)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>Task of ApiResponse (AddressSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressSearchResponse>> LocateAddressAsyncWithHttpInfo (string latitude, string longitude, string locale = null);
        /// <summary>
        /// Resolve company information by DUNS number
        /// </summary>
        /// <remarks>
        /// Resolves company information (official name, postal address, annual turnover, number of employees, ...) based on  the company&#39;s D-U-N-S number. In order to get the company information each request requires a reason. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>Task of BusinessDataDunsResolveResponse</returns>
        System.Threading.Tasks.Task<BusinessDataDunsResolveResponse> ResolveDUNSAsync (string dunsNumber, string reasonCode);

        /// <summary>
        /// Resolve company information by DUNS number
        /// </summary>
        /// <remarks>
        /// Resolves company information (official name, postal address, annual turnover, number of employees, ...) based on  the company&#39;s D-U-N-S number. In order to get the company information each request requires a reason. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>Task of ApiResponse (BusinessDataDunsResolveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessDataDunsResolveResponse>> ResolveDUNSAsyncWithHttpInfo (string dunsNumber, string reasonCode);
        /// <summary>
        /// Try to resolve VAT number to company information
        /// </summary>
        /// <remarks>
        /// Resolves company information (company name and postal address) based on the company&#39;s VAT (Value Added Tax) identification number. Only VAT numbers of companies within the European Union can be verified and resolved. Some countries have access restrictions and may not deliver the full company information. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>Task of VatResolveResponse</returns>
        System.Threading.Tasks.Task<VatResolveResponse> ResolveVATAsync (string vatnumber, string locale = null);

        /// <summary>
        /// Try to resolve VAT number to company information
        /// </summary>
        /// <remarks>
        /// Resolves company information (company name and postal address) based on the company&#39;s VAT (Value Added Tax) identification number. Only VAT numbers of companies within the European Union can be verified and resolved. Some countries have access restrictions and may not deliver the full company information. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>Task of ApiResponse (VatResolveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VatResolveResponse>> ResolveVATAsyncWithHttpInfo (string vatnumber, string locale = null);
        /// <summary>
        /// Lookup physical postal address
        /// </summary>
        /// <remarks>
        /// Find geo-location based on unstructured (single-line entry, un-qualified) or based on structured (qualified) address information. The result is a single record which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typos the response keys may be empty.  The unstructured query determines each address part by its own and afterwards finds the closest geo-location. It should only be used if you do not know which address information fits in which query parameter. The structured query provides an additional logic for specific countries to improve the result of the determined geo-location. Please consider that if you do not provide a country name/code the result may end in a different country because the same city + street combination may exist in multiple countries. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Unstructured query parameter. Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. You can specify the &#39;address&#39; parameter by itself or you can specify it with other parameters to narrow your search.  (optional)</param>
        /// <param name="country">Specify the country using the country code (ISO 3166-1 alpha-3) or the country name. (optional)</param>
        /// <param name="state">First subdivision level below the country. Specify the state using full or abbreviated notation. (optional)</param>
        /// <param name="county">Second subdivision level below the country. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="city">The city name. (optional)</param>
        /// <param name="zip">Postal code defined by the government of the country. (optional)</param>
        /// <param name="district">Subdivision level below the city. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="street">The street name. (optional)</param>
        /// <param name="housenumber">The house number or building name. (optional)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>Task of AddressSearchResponse</returns>
        System.Threading.Tasks.Task<AddressSearchResponse> SearchAddressAsync (string address = null, string country = null, string state = null, string county = null, string city = null, string zip = null, string district = null, string street = null, string housenumber = null, string locale = null);

        /// <summary>
        /// Lookup physical postal address
        /// </summary>
        /// <remarks>
        /// Find geo-location based on unstructured (single-line entry, un-qualified) or based on structured (qualified) address information. The result is a single record which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typos the response keys may be empty.  The unstructured query determines each address part by its own and afterwards finds the closest geo-location. It should only be used if you do not know which address information fits in which query parameter. The structured query provides an additional logic for specific countries to improve the result of the determined geo-location. Please consider that if you do not provide a country name/code the result may end in a different country because the same city + street combination may exist in multiple countries. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Unstructured query parameter. Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. You can specify the &#39;address&#39; parameter by itself or you can specify it with other parameters to narrow your search.  (optional)</param>
        /// <param name="country">Specify the country using the country code (ISO 3166-1 alpha-3) or the country name. (optional)</param>
        /// <param name="state">First subdivision level below the country. Specify the state using full or abbreviated notation. (optional)</param>
        /// <param name="county">Second subdivision level below the country. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="city">The city name. (optional)</param>
        /// <param name="zip">Postal code defined by the government of the country. (optional)</param>
        /// <param name="district">Subdivision level below the city. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="street">The street name. (optional)</param>
        /// <param name="housenumber">The house number or building name. (optional)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>Task of ApiResponse (AddressSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressSearchResponse>> SearchAddressAsyncWithHttpInfo (string address = null, string country = null, string state = null, string county = null, string city = null, string zip = null, string district = null, string street = null, string housenumber = null, string locale = null);
        /// <summary>
        /// Address lookup with multiple possible results
        /// </summary>
        /// <remarks>
        /// Find multiple geo-locations based on unstructured (single-line entry, un-qualified) address information. The result is a set of records which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typo errors the response keys may be empty. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter.</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>Task of AddressSearchMultipleResponse</returns>
        System.Threading.Tasks.Task<AddressSearchMultipleResponse> SearchAddressMultipleAsync (string address, string locale = null);

        /// <summary>
        /// Address lookup with multiple possible results
        /// </summary>
        /// <remarks>
        /// Find multiple geo-locations based on unstructured (single-line entry, un-qualified) address information. The result is a set of records which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typo errors the response keys may be empty. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter.</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>Task of ApiResponse (AddressSearchMultipleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressSearchMultipleResponse>> SearchAddressMultipleAsyncWithHttpInfo (string address, string locale = null);
        /// <summary>
        /// Find DUNS number and company information by name
        /// </summary>
        /// <remarks>
        /// Finds the D-U-N-S number and additional company information by the company&#39;s name. Optionally a filter for the headquarters location can be added to get a more accurate response. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="companyName">The company name you are looking for or relevant parts of it (may be empty if the duns_number is set) (optional)</param>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information (may be empty if the company_name and country_code are set) (optional)</param>
        /// <param name="state">Filter to get only companies which matches the specified state (required for United States) (optional)</param>
        /// <param name="city">Filter to get only companies which matches the specified city (optional)</param>
        /// <param name="zip">Filter to get only companies which matches the specified postal code (optional)</param>
        /// <param name="street">Filter to get only companies which matches the specified street (optional)</param>
        /// <returns>Task of BusinessDataDunsSearchResponse</returns>
        System.Threading.Tasks.Task<BusinessDataDunsSearchResponse> SearchDUNSAsync (string countryCode, string companyName = null, string dunsNumber = null, string state = null, string city = null, string zip = null, string street = null);

        /// <summary>
        /// Find DUNS number and company information by name
        /// </summary>
        /// <remarks>
        /// Finds the D-U-N-S number and additional company information by the company&#39;s name. Optionally a filter for the headquarters location can be added to get a more accurate response. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="companyName">The company name you are looking for or relevant parts of it (may be empty if the duns_number is set) (optional)</param>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information (may be empty if the company_name and country_code are set) (optional)</param>
        /// <param name="state">Filter to get only companies which matches the specified state (required for United States) (optional)</param>
        /// <param name="city">Filter to get only companies which matches the specified city (optional)</param>
        /// <param name="zip">Filter to get only companies which matches the specified postal code (optional)</param>
        /// <param name="street">Filter to get only companies which matches the specified street (optional)</param>
        /// <returns>Task of ApiResponse (BusinessDataDunsSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessDataDunsSearchResponse>> SearchDUNSAsyncWithHttpInfo (string countryCode, string companyName = null, string dunsNumber = null, string state = null, string city = null, string zip = null, string street = null);
        /// <summary>
        /// Find moved and deceased contacts
        /// </summary>
        /// <remarks>
        /// Checks if the postal address of a person identified by its full name is invalid (moved to a new address or deceased). This function does NOT verify/check if a known postal address is still valid, instead it only checks if the person is moved to another address or is deceased and therefore a mail will result in an undeliverable state. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">The person&#39;s first name</param>
        /// <param name="lastName">The person&#39;s last name</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="zip">Last known postal code the person lives in</param>
        /// <param name="street">Last known street name the person lives in</param>
        /// <param name="reason">Free-form text written in english why you submit the query.</param>
        /// <returns>Task of BusinessDataUndeliverableContactsResponse</returns>
        System.Threading.Tasks.Task<BusinessDataUndeliverableContactsResponse> SearchUndeliverableContactAsync (string firstName, string lastName, string countryCode, string zip, string street, string reason);

        /// <summary>
        /// Find moved and deceased contacts
        /// </summary>
        /// <remarks>
        /// Checks if the postal address of a person identified by its full name is invalid (moved to a new address or deceased). This function does NOT verify/check if a known postal address is still valid, instead it only checks if the person is moved to another address or is deceased and therefore a mail will result in an undeliverable state. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">The person&#39;s first name</param>
        /// <param name="lastName">The person&#39;s last name</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="zip">Last known postal code the person lives in</param>
        /// <param name="street">Last known street name the person lives in</param>
        /// <param name="reason">Free-form text written in english why you submit the query.</param>
        /// <returns>Task of ApiResponse (BusinessDataUndeliverableContactsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessDataUndeliverableContactsResponse>> SearchUndeliverableContactAsyncWithHttpInfo (string firstName, string lastName, string countryCode, string zip, string street, string reason);
        /// <summary>
        /// Find VAT number and company information by name
        /// </summary>
        /// <remarks>
        /// Finds the VAT number and additional company information by the company&#39;s name and headquarters location. The function returns multiple results if similar companies are found in the same city. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company">The name of an company. You may enter the fully qualified name or only partial information.</param>
        /// <param name="city">The city where the company&#39;s headquarters is located. (optional)</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI**  (optional)</param>
        /// <param name="limit">The maximum amount of results returned if multiple companies are found. Default value is **10**.  (optional, default to 10)</param>
        /// <param name="minScore">Threshold to set the minimum score rate of results being returned. Default: **0.8**  (optional, default to 0.8)</param>
        /// <returns>Task of VatSearchResponse</returns>
        System.Threading.Tasks.Task<VatSearchResponse> SearchVATAsync (string company, string city = null, string countryCode = null, string limit = null, string minScore = null);

        /// <summary>
        /// Find VAT number and company information by name
        /// </summary>
        /// <remarks>
        /// Finds the VAT number and additional company information by the company&#39;s name and headquarters location. The function returns multiple results if similar companies are found in the same city. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company">The name of an company. You may enter the fully qualified name or only partial information.</param>
        /// <param name="city">The city where the company&#39;s headquarters is located. (optional)</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI**  (optional)</param>
        /// <param name="limit">The maximum amount of results returned if multiple companies are found. Default value is **10**.  (optional, default to 10)</param>
        /// <param name="minScore">Threshold to set the minimum score rate of results being returned. Default: **0.8**  (optional, default to 0.8)</param>
        /// <returns>Task of ApiResponse (VatSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VatSearchResponse>> SearchVATAsyncWithHttpInfo (string company, string city = null, string countryCode = null, string limit = null, string minScore = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataMillApi : IDataMillApi
    {
        private DataMill.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataMillApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataMillApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = DataMill.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataMillApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataMillApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = DataMill.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DataMill.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Check BIC for spelling Checks the spelling of a given BIC (Business Identifier Code), also known as SWIFT code which is defined in the ISO 9362. The function does not verify if the BIC really exists, instead the format is checked for validity only. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bic">BIC to be checked</param>
        /// <returns>BicCheckResponse</returns>
        public BicCheckResponse CheckBIC (string bic)
        {
             ApiResponse<BicCheckResponse> localVarResponse = CheckBICWithHttpInfo(bic);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check BIC for spelling Checks the spelling of a given BIC (Business Identifier Code), also known as SWIFT code which is defined in the ISO 9362. The function does not verify if the BIC really exists, instead the format is checked for validity only. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bic">BIC to be checked</param>
        /// <returns>ApiResponse of BicCheckResponse</returns>
        public ApiResponse< BicCheckResponse > CheckBICWithHttpInfo (string bic)
        {
            // verify the required parameter 'bic' is set
            if (bic == null)
                throw new ApiException(400, "Missing required parameter 'bic' when calling DataMillApi->CheckBIC");

            var localVarPath = "/bic/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bic != null) localVarFormParams.Add("bic", Configuration.ApiClient.ParameterToString(bic)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckBIC", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BicCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BicCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BicCheckResponse)));
            
        }

        /// <summary>
        /// Check BIC for spelling Checks the spelling of a given BIC (Business Identifier Code), also known as SWIFT code which is defined in the ISO 9362. The function does not verify if the BIC really exists, instead the format is checked for validity only. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bic">BIC to be checked</param>
        /// <returns>Task of BicCheckResponse</returns>
        public async System.Threading.Tasks.Task<BicCheckResponse> CheckBICAsync (string bic)
        {
             ApiResponse<BicCheckResponse> localVarResponse = await CheckBICAsyncWithHttpInfo(bic);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check BIC for spelling Checks the spelling of a given BIC (Business Identifier Code), also known as SWIFT code which is defined in the ISO 9362. The function does not verify if the BIC really exists, instead the format is checked for validity only. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bic">BIC to be checked</param>
        /// <returns>Task of ApiResponse (BicCheckResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BicCheckResponse>> CheckBICAsyncWithHttpInfo (string bic)
        {
            // verify the required parameter 'bic' is set
            if (bic == null)
                throw new ApiException(400, "Missing required parameter 'bic' when calling DataMillApi->CheckBIC");

            var localVarPath = "/bic/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bic != null) localVarFormParams.Add("bic", Configuration.ApiClient.ParameterToString(bic)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckBIC", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BicCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BicCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BicCheckResponse)));
            
        }

        /// <summary>
        /// Check email syntax and mail server domain Checks the spelling of an email address to detect typos and spelling errors. In addition if the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>EmailDomainCheckResponse</returns>
        public EmailDomainCheckResponse CheckEmailDomain (string email)
        {
             ApiResponse<EmailDomainCheckResponse> localVarResponse = CheckEmailDomainWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check email syntax and mail server domain Checks the spelling of an email address to detect typos and spelling errors. In addition if the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>ApiResponse of EmailDomainCheckResponse</returns>
        public ApiResponse< EmailDomainCheckResponse > CheckEmailDomainWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling DataMillApi->CheckEmailDomain");

            var localVarPath = "/email/domain/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckEmailDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDomainCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDomainCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDomainCheckResponse)));
            
        }

        /// <summary>
        /// Check email syntax and mail server domain Checks the spelling of an email address to detect typos and spelling errors. In addition if the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of EmailDomainCheckResponse</returns>
        public async System.Threading.Tasks.Task<EmailDomainCheckResponse> CheckEmailDomainAsync (string email)
        {
             ApiResponse<EmailDomainCheckResponse> localVarResponse = await CheckEmailDomainAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check email syntax and mail server domain Checks the spelling of an email address to detect typos and spelling errors. In addition if the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of ApiResponse (EmailDomainCheckResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailDomainCheckResponse>> CheckEmailDomainAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling DataMillApi->CheckEmailDomain");

            var localVarPath = "/email/domain/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckEmailDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDomainCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDomainCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDomainCheckResponse)));
            
        }

        /// <summary>
        /// Check email syntax, mail server domain and mailbox itself Checks the spelling of an email address to detect typos and spelling errors. If the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. Additionally the mail server will be checked if an email for the given mailbox can be received. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>EmailExtendedCheckResponse</returns>
        public EmailExtendedCheckResponse CheckEmailMailbox (string email)
        {
             ApiResponse<EmailExtendedCheckResponse> localVarResponse = CheckEmailMailboxWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check email syntax, mail server domain and mailbox itself Checks the spelling of an email address to detect typos and spelling errors. If the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. Additionally the mail server will be checked if an email for the given mailbox can be received. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>ApiResponse of EmailExtendedCheckResponse</returns>
        public ApiResponse< EmailExtendedCheckResponse > CheckEmailMailboxWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling DataMillApi->CheckEmailMailbox");

            var localVarPath = "/email/extended/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckEmailMailbox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailExtendedCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailExtendedCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailExtendedCheckResponse)));
            
        }

        /// <summary>
        /// Check email syntax, mail server domain and mailbox itself Checks the spelling of an email address to detect typos and spelling errors. If the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. Additionally the mail server will be checked if an email for the given mailbox can be received. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of EmailExtendedCheckResponse</returns>
        public async System.Threading.Tasks.Task<EmailExtendedCheckResponse> CheckEmailMailboxAsync (string email)
        {
             ApiResponse<EmailExtendedCheckResponse> localVarResponse = await CheckEmailMailboxAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check email syntax, mail server domain and mailbox itself Checks the spelling of an email address to detect typos and spelling errors. If the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. Additionally the mail server will be checked if an email for the given mailbox can be received. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of ApiResponse (EmailExtendedCheckResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailExtendedCheckResponse>> CheckEmailMailboxAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling DataMillApi->CheckEmailMailbox");

            var localVarPath = "/email/extended/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckEmailMailbox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailExtendedCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailExtendedCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailExtendedCheckResponse)));
            
        }

        /// <summary>
        /// Check email syntax Checks the spelling of an email address to detect typos and spelling errors. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>EmailSyntaxCheckResponse</returns>
        public EmailSyntaxCheckResponse CheckEmailSyntax (string email)
        {
             ApiResponse<EmailSyntaxCheckResponse> localVarResponse = CheckEmailSyntaxWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check email syntax Checks the spelling of an email address to detect typos and spelling errors. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>ApiResponse of EmailSyntaxCheckResponse</returns>
        public ApiResponse< EmailSyntaxCheckResponse > CheckEmailSyntaxWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling DataMillApi->CheckEmailSyntax");

            var localVarPath = "/email/syntax/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckEmailSyntax", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSyntaxCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSyntaxCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSyntaxCheckResponse)));
            
        }

        /// <summary>
        /// Check email syntax Checks the spelling of an email address to detect typos and spelling errors. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of EmailSyntaxCheckResponse</returns>
        public async System.Threading.Tasks.Task<EmailSyntaxCheckResponse> CheckEmailSyntaxAsync (string email)
        {
             ApiResponse<EmailSyntaxCheckResponse> localVarResponse = await CheckEmailSyntaxAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check email syntax Checks the spelling of an email address to detect typos and spelling errors. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of ApiResponse (EmailSyntaxCheckResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSyntaxCheckResponse>> CheckEmailSyntaxAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling DataMillApi->CheckEmailSyntax");

            var localVarPath = "/email/syntax/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckEmailSyntax", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSyntaxCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSyntaxCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSyntaxCheckResponse)));
            
        }

        /// <summary>
        /// Check IBAN for spelling Checks the spelling, country code and checksum of an IBAN (International Bank Account Number). The IBAN is an internationally agreed system of identifying bank accounts across national borders. The function does not verify if the IBAN really exists, instead the format is checked for validity only. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iban">IBAN to be checked.</param>
        /// <returns>IbanCheckResponse</returns>
        public IbanCheckResponse CheckIBAN (string iban)
        {
             ApiResponse<IbanCheckResponse> localVarResponse = CheckIBANWithHttpInfo(iban);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check IBAN for spelling Checks the spelling, country code and checksum of an IBAN (International Bank Account Number). The IBAN is an internationally agreed system of identifying bank accounts across national borders. The function does not verify if the IBAN really exists, instead the format is checked for validity only. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iban">IBAN to be checked.</param>
        /// <returns>ApiResponse of IbanCheckResponse</returns>
        public ApiResponse< IbanCheckResponse > CheckIBANWithHttpInfo (string iban)
        {
            // verify the required parameter 'iban' is set
            if (iban == null)
                throw new ApiException(400, "Missing required parameter 'iban' when calling DataMillApi->CheckIBAN");

            var localVarPath = "/iban/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (iban != null) localVarFormParams.Add("iban", Configuration.ApiClient.ParameterToString(iban)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckIBAN", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IbanCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IbanCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IbanCheckResponse)));
            
        }

        /// <summary>
        /// Check IBAN for spelling Checks the spelling, country code and checksum of an IBAN (International Bank Account Number). The IBAN is an internationally agreed system of identifying bank accounts across national borders. The function does not verify if the IBAN really exists, instead the format is checked for validity only. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iban">IBAN to be checked.</param>
        /// <returns>Task of IbanCheckResponse</returns>
        public async System.Threading.Tasks.Task<IbanCheckResponse> CheckIBANAsync (string iban)
        {
             ApiResponse<IbanCheckResponse> localVarResponse = await CheckIBANAsyncWithHttpInfo(iban);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check IBAN for spelling Checks the spelling, country code and checksum of an IBAN (International Bank Account Number). The IBAN is an internationally agreed system of identifying bank accounts across national borders. The function does not verify if the IBAN really exists, instead the format is checked for validity only. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="iban">IBAN to be checked.</param>
        /// <returns>Task of ApiResponse (IbanCheckResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IbanCheckResponse>> CheckIBANAsyncWithHttpInfo (string iban)
        {
            // verify the required parameter 'iban' is set
            if (iban == null)
                throw new ApiException(400, "Missing required parameter 'iban' when calling DataMillApi->CheckIBAN");

            var localVarPath = "/iban/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (iban != null) localVarFormParams.Add("iban", Configuration.ApiClient.ParameterToString(iban)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckIBAN", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IbanCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IbanCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IbanCheckResponse)));
            
        }

        /// <summary>
        /// Verify mobile phone number Real time validation of mobile numbers without triggering a call of send a text message.
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Mobile phone number to be verified.</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>PhoneMobileCheckResponse</returns>
        public PhoneMobileCheckResponse CheckMobilePhone (string phonenumber, string countrycode)
        {
             ApiResponse<PhoneMobileCheckResponse> localVarResponse = CheckMobilePhoneWithHttpInfo(phonenumber, countrycode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify mobile phone number Real time validation of mobile numbers without triggering a call of send a text message.
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Mobile phone number to be verified.</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>ApiResponse of PhoneMobileCheckResponse</returns>
        public ApiResponse< PhoneMobileCheckResponse > CheckMobilePhoneWithHttpInfo (string phonenumber, string countrycode)
        {
            // verify the required parameter 'phonenumber' is set
            if (phonenumber == null)
                throw new ApiException(400, "Missing required parameter 'phonenumber' when calling DataMillApi->CheckMobilePhone");
            // verify the required parameter 'countrycode' is set
            if (countrycode == null)
                throw new ApiException(400, "Missing required parameter 'countrycode' when calling DataMillApi->CheckMobilePhone");

            var localVarPath = "/phone/mobile/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (phonenumber != null) localVarFormParams.Add("phonenumber", Configuration.ApiClient.ParameterToString(phonenumber)); // form parameter
            if (countrycode != null) localVarFormParams.Add("countrycode", Configuration.ApiClient.ParameterToString(countrycode)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckMobilePhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoneMobileCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PhoneMobileCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoneMobileCheckResponse)));
            
        }

        /// <summary>
        /// Verify mobile phone number Real time validation of mobile numbers without triggering a call of send a text message.
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Mobile phone number to be verified.</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>Task of PhoneMobileCheckResponse</returns>
        public async System.Threading.Tasks.Task<PhoneMobileCheckResponse> CheckMobilePhoneAsync (string phonenumber, string countrycode)
        {
             ApiResponse<PhoneMobileCheckResponse> localVarResponse = await CheckMobilePhoneAsyncWithHttpInfo(phonenumber, countrycode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify mobile phone number Real time validation of mobile numbers without triggering a call of send a text message.
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Mobile phone number to be verified.</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>Task of ApiResponse (PhoneMobileCheckResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PhoneMobileCheckResponse>> CheckMobilePhoneAsyncWithHttpInfo (string phonenumber, string countrycode)
        {
            // verify the required parameter 'phonenumber' is set
            if (phonenumber == null)
                throw new ApiException(400, "Missing required parameter 'phonenumber' when calling DataMillApi->CheckMobilePhone");
            // verify the required parameter 'countrycode' is set
            if (countrycode == null)
                throw new ApiException(400, "Missing required parameter 'countrycode' when calling DataMillApi->CheckMobilePhone");

            var localVarPath = "/phone/mobile/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (phonenumber != null) localVarFormParams.Add("phonenumber", Configuration.ApiClient.ParameterToString(phonenumber)); // form parameter
            if (countrycode != null) localVarFormParams.Add("countrycode", Configuration.ApiClient.ParameterToString(countrycode)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckMobilePhone", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoneMobileCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PhoneMobileCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoneMobileCheckResponse)));
            
        }

        /// <summary>
        /// Information about web resources Fetches the resource of a given url and checks if it is available. Only websites using HTTP/HTTPS are allowed. IP addresses and ports other than 80/443 are not permitted and will be ignored. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url to be checked (e.g. any website)</param>
        /// <param name="maxRedirects">The maximum amount of redirects until the lookup for the root resource will be stopped (default **10**) (optional, default to 10)</param>
        /// <returns>UrlCheckResponse</returns>
        public UrlCheckResponse CheckUrl (string url, string maxRedirects = null)
        {
             ApiResponse<UrlCheckResponse> localVarResponse = CheckUrlWithHttpInfo(url, maxRedirects);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Information about web resources Fetches the resource of a given url and checks if it is available. Only websites using HTTP/HTTPS are allowed. IP addresses and ports other than 80/443 are not permitted and will be ignored. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url to be checked (e.g. any website)</param>
        /// <param name="maxRedirects">The maximum amount of redirects until the lookup for the root resource will be stopped (default **10**) (optional, default to 10)</param>
        /// <returns>ApiResponse of UrlCheckResponse</returns>
        public ApiResponse< UrlCheckResponse > CheckUrlWithHttpInfo (string url, string maxRedirects = null)
        {
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling DataMillApi->CheckUrl");

            var localVarPath = "/url/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (maxRedirects != null) localVarFormParams.Add("max_redirects", Configuration.ApiClient.ParameterToString(maxRedirects)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UrlCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UrlCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UrlCheckResponse)));
            
        }

        /// <summary>
        /// Information about web resources Fetches the resource of a given url and checks if it is available. Only websites using HTTP/HTTPS are allowed. IP addresses and ports other than 80/443 are not permitted and will be ignored. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url to be checked (e.g. any website)</param>
        /// <param name="maxRedirects">The maximum amount of redirects until the lookup for the root resource will be stopped (default **10**) (optional, default to 10)</param>
        /// <returns>Task of UrlCheckResponse</returns>
        public async System.Threading.Tasks.Task<UrlCheckResponse> CheckUrlAsync (string url, string maxRedirects = null)
        {
             ApiResponse<UrlCheckResponse> localVarResponse = await CheckUrlAsyncWithHttpInfo(url, maxRedirects);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Information about web resources Fetches the resource of a given url and checks if it is available. Only websites using HTTP/HTTPS are allowed. IP addresses and ports other than 80/443 are not permitted and will be ignored. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url to be checked (e.g. any website)</param>
        /// <param name="maxRedirects">The maximum amount of redirects until the lookup for the root resource will be stopped (default **10**) (optional, default to 10)</param>
        /// <returns>Task of ApiResponse (UrlCheckResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UrlCheckResponse>> CheckUrlAsyncWithHttpInfo (string url, string maxRedirects = null)
        {
            // verify the required parameter 'url' is set
            if (url == null)
                throw new ApiException(400, "Missing required parameter 'url' when calling DataMillApi->CheckUrl");

            var localVarPath = "/url/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (url != null) localVarFormParams.Add("url", Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (maxRedirects != null) localVarFormParams.Add("max_redirects", Configuration.ApiClient.ParameterToString(maxRedirects)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckUrl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UrlCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UrlCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UrlCheckResponse)));
            
        }

        /// <summary>
        /// Check vat number for correctness Checks if a given VAT (Value Added Tax) identification number is valid or not. Only VAT numbers of companies within the European Union can be verified. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <returns>VatCheckResponse</returns>
        public VatCheckResponse CheckVAT (string vatnumber)
        {
             ApiResponse<VatCheckResponse> localVarResponse = CheckVATWithHttpInfo(vatnumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check vat number for correctness Checks if a given VAT (Value Added Tax) identification number is valid or not. Only VAT numbers of companies within the European Union can be verified. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <returns>ApiResponse of VatCheckResponse</returns>
        public ApiResponse< VatCheckResponse > CheckVATWithHttpInfo (string vatnumber)
        {
            // verify the required parameter 'vatnumber' is set
            if (vatnumber == null)
                throw new ApiException(400, "Missing required parameter 'vatnumber' when calling DataMillApi->CheckVAT");

            var localVarPath = "/vat/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (vatnumber != null) localVarFormParams.Add("vatnumber", Configuration.ApiClient.ParameterToString(vatnumber)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckVAT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VatCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VatCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VatCheckResponse)));
            
        }

        /// <summary>
        /// Check vat number for correctness Checks if a given VAT (Value Added Tax) identification number is valid or not. Only VAT numbers of companies within the European Union can be verified. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <returns>Task of VatCheckResponse</returns>
        public async System.Threading.Tasks.Task<VatCheckResponse> CheckVATAsync (string vatnumber)
        {
             ApiResponse<VatCheckResponse> localVarResponse = await CheckVATAsyncWithHttpInfo(vatnumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check vat number for correctness Checks if a given VAT (Value Added Tax) identification number is valid or not. Only VAT numbers of companies within the European Union can be verified. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <returns>Task of ApiResponse (VatCheckResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VatCheckResponse>> CheckVATAsyncWithHttpInfo (string vatnumber)
        {
            // verify the required parameter 'vatnumber' is set
            if (vatnumber == null)
                throw new ApiException(400, "Missing required parameter 'vatnumber' when calling DataMillApi->CheckVAT");

            var localVarPath = "/vat/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (vatnumber != null) localVarFormParams.Add("vatnumber", Configuration.ApiClient.ParameterToString(vatnumber)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckVAT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VatCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VatCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VatCheckResponse)));
            
        }

        /// <summary>
        /// Convert any string to capitalize words Changes any word of a given text so that the first letter is capitalized and all the others turned into lower case. Special proper names, like \&quot;DiCaprio\&quot; are detected and ignored. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ConvertCapitalFirstResponse</returns>
        public ConvertCapitalFirstResponse ConvertCapitalFirst (string text)
        {
             ApiResponse<ConvertCapitalFirstResponse> localVarResponse = ConvertCapitalFirstWithHttpInfo(text);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert any string to capitalize words Changes any word of a given text so that the first letter is capitalized and all the others turned into lower case. Special proper names, like \&quot;DiCaprio\&quot; are detected and ignored. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ApiResponse of ConvertCapitalFirstResponse</returns>
        public ApiResponse< ConvertCapitalFirstResponse > ConvertCapitalFirstWithHttpInfo (string text)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling DataMillApi->ConvertCapitalFirst");

            var localVarPath = "/convert/capitalfirst";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarFormParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertCapitalFirst", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertCapitalFirstResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertCapitalFirstResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertCapitalFirstResponse)));
            
        }

        /// <summary>
        /// Convert any string to capitalize words Changes any word of a given text so that the first letter is capitalized and all the others turned into lower case. Special proper names, like \&quot;DiCaprio\&quot; are detected and ignored. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ConvertCapitalFirstResponse</returns>
        public async System.Threading.Tasks.Task<ConvertCapitalFirstResponse> ConvertCapitalFirstAsync (string text)
        {
             ApiResponse<ConvertCapitalFirstResponse> localVarResponse = await ConvertCapitalFirstAsyncWithHttpInfo(text);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert any string to capitalize words Changes any word of a given text so that the first letter is capitalized and all the others turned into lower case. Special proper names, like \&quot;DiCaprio\&quot; are detected and ignored. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ApiResponse (ConvertCapitalFirstResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConvertCapitalFirstResponse>> ConvertCapitalFirstAsyncWithHttpInfo (string text)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling DataMillApi->ConvertCapitalFirst");

            var localVarPath = "/convert/capitalfirst";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarFormParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertCapitalFirst", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertCapitalFirstResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertCapitalFirstResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertCapitalFirstResponse)));
            
        }

        /// <summary>
        /// Convert any string to lower case Converts all letters of any word in a given string in the respective lowercase. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ConvertLowerCaseResponse</returns>
        public ConvertLowerCaseResponse ConvertLowerCase (string text)
        {
             ApiResponse<ConvertLowerCaseResponse> localVarResponse = ConvertLowerCaseWithHttpInfo(text);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert any string to lower case Converts all letters of any word in a given string in the respective lowercase. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ApiResponse of ConvertLowerCaseResponse</returns>
        public ApiResponse< ConvertLowerCaseResponse > ConvertLowerCaseWithHttpInfo (string text)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling DataMillApi->ConvertLowerCase");

            var localVarPath = "/convert/lowercase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarFormParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertLowerCase", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertLowerCaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertLowerCaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertLowerCaseResponse)));
            
        }

        /// <summary>
        /// Convert any string to lower case Converts all letters of any word in a given string in the respective lowercase. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ConvertLowerCaseResponse</returns>
        public async System.Threading.Tasks.Task<ConvertLowerCaseResponse> ConvertLowerCaseAsync (string text)
        {
             ApiResponse<ConvertLowerCaseResponse> localVarResponse = await ConvertLowerCaseAsyncWithHttpInfo(text);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert any string to lower case Converts all letters of any word in a given string in the respective lowercase. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ApiResponse (ConvertLowerCaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConvertLowerCaseResponse>> ConvertLowerCaseAsyncWithHttpInfo (string text)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling DataMillApi->ConvertLowerCase");

            var localVarPath = "/convert/lowercase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarFormParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertLowerCase", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertLowerCaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertLowerCaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertLowerCaseResponse)));
            
        }

        /// <summary>
        /// Convert any string to upper case Converts all letters of any word in a given string in the respective capital. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ConvertUpperCaseResponse</returns>
        public ConvertUpperCaseResponse ConvertUpperCase (string text)
        {
             ApiResponse<ConvertUpperCaseResponse> localVarResponse = ConvertUpperCaseWithHttpInfo(text);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert any string to upper case Converts all letters of any word in a given string in the respective capital. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>ApiResponse of ConvertUpperCaseResponse</returns>
        public ApiResponse< ConvertUpperCaseResponse > ConvertUpperCaseWithHttpInfo (string text)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling DataMillApi->ConvertUpperCase");

            var localVarPath = "/convert/uppercase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarFormParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertUpperCase", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertUpperCaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertUpperCaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertUpperCaseResponse)));
            
        }

        /// <summary>
        /// Convert any string to upper case Converts all letters of any word in a given string in the respective capital. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ConvertUpperCaseResponse</returns>
        public async System.Threading.Tasks.Task<ConvertUpperCaseResponse> ConvertUpperCaseAsync (string text)
        {
             ApiResponse<ConvertUpperCaseResponse> localVarResponse = await ConvertUpperCaseAsyncWithHttpInfo(text);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert any string to upper case Converts all letters of any word in a given string in the respective capital. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Free-form text to be converted.</param>
        /// <returns>Task of ApiResponse (ConvertUpperCaseResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConvertUpperCaseResponse>> ConvertUpperCaseAsyncWithHttpInfo (string text)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling DataMillApi->ConvertUpperCase");

            var localVarPath = "/convert/uppercase";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarFormParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertUpperCase", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertUpperCaseResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertUpperCaseResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertUpperCaseResponse)));
            
        }

        /// <summary>
        /// Wrap text Breaks a text into multiple newlines. Each line will be separated by a \\r (CR, ASCII 13) and \\n (LF, ASCII 10) character. The number of characters a line break will be inserted after can be justified. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Fre-form text to be wrapped.</param>
        /// <param name="limit">The number of characters a linefeed will be inserted after (maximum character length per line).</param>
        /// <param name="mode">The mode how the linefeed will be inserted. Either before (default) the current word, after the current word or exactly after the character. Possible values are **before** to break before last word, **after** to break after last word, **exact** to break at limit.  (optional)</param>
        /// <param name="linebreak">Defines which line separator should be used. Possible values are **full** for *\\r\\n*, **single** for *\\n*, **html** for *&amp;lt;br&amp;gt;*  (optional)</param>
        /// <returns>ConvertWrapResponse</returns>
        public ConvertWrapResponse ConvertWrap (string text, int? limit, string mode = null, string linebreak = null)
        {
             ApiResponse<ConvertWrapResponse> localVarResponse = ConvertWrapWithHttpInfo(text, limit, mode, linebreak);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wrap text Breaks a text into multiple newlines. Each line will be separated by a \\r (CR, ASCII 13) and \\n (LF, ASCII 10) character. The number of characters a line break will be inserted after can be justified. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Fre-form text to be wrapped.</param>
        /// <param name="limit">The number of characters a linefeed will be inserted after (maximum character length per line).</param>
        /// <param name="mode">The mode how the linefeed will be inserted. Either before (default) the current word, after the current word or exactly after the character. Possible values are **before** to break before last word, **after** to break after last word, **exact** to break at limit.  (optional)</param>
        /// <param name="linebreak">Defines which line separator should be used. Possible values are **full** for *\\r\\n*, **single** for *\\n*, **html** for *&amp;lt;br&amp;gt;*  (optional)</param>
        /// <returns>ApiResponse of ConvertWrapResponse</returns>
        public ApiResponse< ConvertWrapResponse > ConvertWrapWithHttpInfo (string text, int? limit, string mode = null, string linebreak = null)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling DataMillApi->ConvertWrap");
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling DataMillApi->ConvertWrap");

            var localVarPath = "/convert/wrap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarFormParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // form parameter
            if (limit != null) localVarFormParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // form parameter
            if (mode != null) localVarFormParams.Add("mode", Configuration.ApiClient.ParameterToString(mode)); // form parameter
            if (linebreak != null) localVarFormParams.Add("linebreak", Configuration.ApiClient.ParameterToString(linebreak)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertWrap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertWrapResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertWrapResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertWrapResponse)));
            
        }

        /// <summary>
        /// Wrap text Breaks a text into multiple newlines. Each line will be separated by a \\r (CR, ASCII 13) and \\n (LF, ASCII 10) character. The number of characters a line break will be inserted after can be justified. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Fre-form text to be wrapped.</param>
        /// <param name="limit">The number of characters a linefeed will be inserted after (maximum character length per line).</param>
        /// <param name="mode">The mode how the linefeed will be inserted. Either before (default) the current word, after the current word or exactly after the character. Possible values are **before** to break before last word, **after** to break after last word, **exact** to break at limit.  (optional)</param>
        /// <param name="linebreak">Defines which line separator should be used. Possible values are **full** for *\\r\\n*, **single** for *\\n*, **html** for *&amp;lt;br&amp;gt;*  (optional)</param>
        /// <returns>Task of ConvertWrapResponse</returns>
        public async System.Threading.Tasks.Task<ConvertWrapResponse> ConvertWrapAsync (string text, int? limit, string mode = null, string linebreak = null)
        {
             ApiResponse<ConvertWrapResponse> localVarResponse = await ConvertWrapAsyncWithHttpInfo(text, limit, mode, linebreak);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wrap text Breaks a text into multiple newlines. Each line will be separated by a \\r (CR, ASCII 13) and \\n (LF, ASCII 10) character. The number of characters a line break will be inserted after can be justified. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Fre-form text to be wrapped.</param>
        /// <param name="limit">The number of characters a linefeed will be inserted after (maximum character length per line).</param>
        /// <param name="mode">The mode how the linefeed will be inserted. Either before (default) the current word, after the current word or exactly after the character. Possible values are **before** to break before last word, **after** to break after last word, **exact** to break at limit.  (optional)</param>
        /// <param name="linebreak">Defines which line separator should be used. Possible values are **full** for *\\r\\n*, **single** for *\\n*, **html** for *&amp;lt;br&amp;gt;*  (optional)</param>
        /// <returns>Task of ApiResponse (ConvertWrapResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConvertWrapResponse>> ConvertWrapAsyncWithHttpInfo (string text, int? limit, string mode = null, string linebreak = null)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling DataMillApi->ConvertWrap");
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling DataMillApi->ConvertWrap");

            var localVarPath = "/convert/wrap";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarFormParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // form parameter
            if (limit != null) localVarFormParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // form parameter
            if (mode != null) localVarFormParams.Add("mode", Configuration.ApiClient.ParameterToString(mode)); // form parameter
            if (linebreak != null) localVarFormParams.Add("linebreak", Configuration.ApiClient.ParameterToString(linebreak)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertWrap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertWrapResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertWrapResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertWrapResponse)));
            
        }

        /// <summary>
        /// Try to extract house number from street information Find and extract the house number based on partial address information. The result is an extracted street name, house number and additional house number information (e.g. Apartment, Floor, Room). It is necessary to provide street and housenumber, either in street field or separated in street and house number field. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="street">Free-form text containing the street name and optional the house number including additional house number information. The key is required if housenumber is empty or unset. (optional)</param>
        /// <param name="housenumber">Free-form text containing the house number including additional house number information and optional the street name. The key is required if street is empty or unset. (optional)</param>
        /// <returns>AddressHouseNumberExtractResponse</returns>
        public AddressHouseNumberExtractResponse ExtractHouseNumber (string street = null, string housenumber = null)
        {
             ApiResponse<AddressHouseNumberExtractResponse> localVarResponse = ExtractHouseNumberWithHttpInfo(street, housenumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Try to extract house number from street information Find and extract the house number based on partial address information. The result is an extracted street name, house number and additional house number information (e.g. Apartment, Floor, Room). It is necessary to provide street and housenumber, either in street field or separated in street and house number field. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="street">Free-form text containing the street name and optional the house number including additional house number information. The key is required if housenumber is empty or unset. (optional)</param>
        /// <param name="housenumber">Free-form text containing the house number including additional house number information and optional the street name. The key is required if street is empty or unset. (optional)</param>
        /// <returns>ApiResponse of AddressHouseNumberExtractResponse</returns>
        public ApiResponse< AddressHouseNumberExtractResponse > ExtractHouseNumberWithHttpInfo (string street = null, string housenumber = null)
        {

            var localVarPath = "/address/housenumber/extract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (street != null) localVarFormParams.Add("street", Configuration.ApiClient.ParameterToString(street)); // form parameter
            if (housenumber != null) localVarFormParams.Add("housenumber", Configuration.ApiClient.ParameterToString(housenumber)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractHouseNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressHouseNumberExtractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressHouseNumberExtractResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressHouseNumberExtractResponse)));
            
        }

        /// <summary>
        /// Try to extract house number from street information Find and extract the house number based on partial address information. The result is an extracted street name, house number and additional house number information (e.g. Apartment, Floor, Room). It is necessary to provide street and housenumber, either in street field or separated in street and house number field. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="street">Free-form text containing the street name and optional the house number including additional house number information. The key is required if housenumber is empty or unset. (optional)</param>
        /// <param name="housenumber">Free-form text containing the house number including additional house number information and optional the street name. The key is required if street is empty or unset. (optional)</param>
        /// <returns>Task of AddressHouseNumberExtractResponse</returns>
        public async System.Threading.Tasks.Task<AddressHouseNumberExtractResponse> ExtractHouseNumberAsync (string street = null, string housenumber = null)
        {
             ApiResponse<AddressHouseNumberExtractResponse> localVarResponse = await ExtractHouseNumberAsyncWithHttpInfo(street, housenumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Try to extract house number from street information Find and extract the house number based on partial address information. The result is an extracted street name, house number and additional house number information (e.g. Apartment, Floor, Room). It is necessary to provide street and housenumber, either in street field or separated in street and house number field. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="street">Free-form text containing the street name and optional the house number including additional house number information. The key is required if housenumber is empty or unset. (optional)</param>
        /// <param name="housenumber">Free-form text containing the house number including additional house number information and optional the street name. The key is required if street is empty or unset. (optional)</param>
        /// <returns>Task of ApiResponse (AddressHouseNumberExtractResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressHouseNumberExtractResponse>> ExtractHouseNumberAsyncWithHttpInfo (string street = null, string housenumber = null)
        {

            var localVarPath = "/address/housenumber/extract";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (street != null) localVarFormParams.Add("street", Configuration.ApiClient.ParameterToString(street)); // form parameter
            if (housenumber != null) localVarFormParams.Add("housenumber", Configuration.ApiClient.ParameterToString(housenumber)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExtractHouseNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressHouseNumberExtractResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressHouseNumberExtractResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressHouseNumberExtractResponse)));
            
        }

        /// <summary>
        /// Parse, format and validate phone numbers Validates a given phone number and converts it to the canonical form. In addition the type of the phone number is determined (e.g. \&quot;fixed line\&quot;, \&quot;mobile\&quot;, ...). The number is not checked for existence. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Phone number to be formatted and validated</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="format">The custom format of the returning phone number if valid. The format is a combination of the following placeholders:  * **{countrycode}**: The international dial prefix for the country without leading zero or the \\\&quot;+\\\&quot; sign  * **{nationalcode}**: The regional dial prefix  * **{phonenumber}**: The phone number including the extension and without the international and regional prefix  * **{national_prefix}**: The national dial prefix including the leading zero  * **{international_prefix}**: The international dial prefix including leading zeros.  If no custom format is specified the following combination is used: **+{countrycode} {nationalcode} {phonenumber}** (canonical format)  (optional)</param>
        /// <param name="directDialingDelimiter">Optional define a special character (e.g. -) as delimiter between the phone number and the extension. (optional)</param>
        /// <param name="allowedDelimiters">Optional collection of characters inside the specified phone number which are allowed for delimiter. The collection must be provided as **JSON** formatted string. (optional)</param>
        /// <returns>PhoneFormatResponse</returns>
        public PhoneFormatResponse FormatPhoneNumber (string phonenumber, string countrycode, string format = null, string directDialingDelimiter = null, string allowedDelimiters = null)
        {
             ApiResponse<PhoneFormatResponse> localVarResponse = FormatPhoneNumberWithHttpInfo(phonenumber, countrycode, format, directDialingDelimiter, allowedDelimiters);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Parse, format and validate phone numbers Validates a given phone number and converts it to the canonical form. In addition the type of the phone number is determined (e.g. \&quot;fixed line\&quot;, \&quot;mobile\&quot;, ...). The number is not checked for existence. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Phone number to be formatted and validated</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="format">The custom format of the returning phone number if valid. The format is a combination of the following placeholders:  * **{countrycode}**: The international dial prefix for the country without leading zero or the \\\&quot;+\\\&quot; sign  * **{nationalcode}**: The regional dial prefix  * **{phonenumber}**: The phone number including the extension and without the international and regional prefix  * **{national_prefix}**: The national dial prefix including the leading zero  * **{international_prefix}**: The international dial prefix including leading zeros.  If no custom format is specified the following combination is used: **+{countrycode} {nationalcode} {phonenumber}** (canonical format)  (optional)</param>
        /// <param name="directDialingDelimiter">Optional define a special character (e.g. -) as delimiter between the phone number and the extension. (optional)</param>
        /// <param name="allowedDelimiters">Optional collection of characters inside the specified phone number which are allowed for delimiter. The collection must be provided as **JSON** formatted string. (optional)</param>
        /// <returns>ApiResponse of PhoneFormatResponse</returns>
        public ApiResponse< PhoneFormatResponse > FormatPhoneNumberWithHttpInfo (string phonenumber, string countrycode, string format = null, string directDialingDelimiter = null, string allowedDelimiters = null)
        {
            // verify the required parameter 'phonenumber' is set
            if (phonenumber == null)
                throw new ApiException(400, "Missing required parameter 'phonenumber' when calling DataMillApi->FormatPhoneNumber");
            // verify the required parameter 'countrycode' is set
            if (countrycode == null)
                throw new ApiException(400, "Missing required parameter 'countrycode' when calling DataMillApi->FormatPhoneNumber");

            var localVarPath = "/phone/format";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (phonenumber != null) localVarFormParams.Add("phonenumber", Configuration.ApiClient.ParameterToString(phonenumber)); // form parameter
            if (countrycode != null) localVarFormParams.Add("countrycode", Configuration.ApiClient.ParameterToString(countrycode)); // form parameter
            if (format != null) localVarFormParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // form parameter
            if (directDialingDelimiter != null) localVarFormParams.Add("direct_dialing_delimiter", Configuration.ApiClient.ParameterToString(directDialingDelimiter)); // form parameter
            if (allowedDelimiters != null) localVarFormParams.Add("allowed_delimiters", Configuration.ApiClient.ParameterToString(allowedDelimiters)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FormatPhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoneFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PhoneFormatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoneFormatResponse)));
            
        }

        /// <summary>
        /// Parse, format and validate phone numbers Validates a given phone number and converts it to the canonical form. In addition the type of the phone number is determined (e.g. \&quot;fixed line\&quot;, \&quot;mobile\&quot;, ...). The number is not checked for existence. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Phone number to be formatted and validated</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="format">The custom format of the returning phone number if valid. The format is a combination of the following placeholders:  * **{countrycode}**: The international dial prefix for the country without leading zero or the \\\&quot;+\\\&quot; sign  * **{nationalcode}**: The regional dial prefix  * **{phonenumber}**: The phone number including the extension and without the international and regional prefix  * **{national_prefix}**: The national dial prefix including the leading zero  * **{international_prefix}**: The international dial prefix including leading zeros.  If no custom format is specified the following combination is used: **+{countrycode} {nationalcode} {phonenumber}** (canonical format)  (optional)</param>
        /// <param name="directDialingDelimiter">Optional define a special character (e.g. -) as delimiter between the phone number and the extension. (optional)</param>
        /// <param name="allowedDelimiters">Optional collection of characters inside the specified phone number which are allowed for delimiter. The collection must be provided as **JSON** formatted string. (optional)</param>
        /// <returns>Task of PhoneFormatResponse</returns>
        public async System.Threading.Tasks.Task<PhoneFormatResponse> FormatPhoneNumberAsync (string phonenumber, string countrycode, string format = null, string directDialingDelimiter = null, string allowedDelimiters = null)
        {
             ApiResponse<PhoneFormatResponse> localVarResponse = await FormatPhoneNumberAsyncWithHttpInfo(phonenumber, countrycode, format, directDialingDelimiter, allowedDelimiters);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Parse, format and validate phone numbers Validates a given phone number and converts it to the canonical form. In addition the type of the phone number is determined (e.g. \&quot;fixed line\&quot;, \&quot;mobile\&quot;, ...). The number is not checked for existence. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="phonenumber">Phone number to be formatted and validated</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="format">The custom format of the returning phone number if valid. The format is a combination of the following placeholders:  * **{countrycode}**: The international dial prefix for the country without leading zero or the \\\&quot;+\\\&quot; sign  * **{nationalcode}**: The regional dial prefix  * **{phonenumber}**: The phone number including the extension and without the international and regional prefix  * **{national_prefix}**: The national dial prefix including the leading zero  * **{international_prefix}**: The international dial prefix including leading zeros.  If no custom format is specified the following combination is used: **+{countrycode} {nationalcode} {phonenumber}** (canonical format)  (optional)</param>
        /// <param name="directDialingDelimiter">Optional define a special character (e.g. -) as delimiter between the phone number and the extension. (optional)</param>
        /// <param name="allowedDelimiters">Optional collection of characters inside the specified phone number which are allowed for delimiter. The collection must be provided as **JSON** formatted string. (optional)</param>
        /// <returns>Task of ApiResponse (PhoneFormatResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PhoneFormatResponse>> FormatPhoneNumberAsyncWithHttpInfo (string phonenumber, string countrycode, string format = null, string directDialingDelimiter = null, string allowedDelimiters = null)
        {
            // verify the required parameter 'phonenumber' is set
            if (phonenumber == null)
                throw new ApiException(400, "Missing required parameter 'phonenumber' when calling DataMillApi->FormatPhoneNumber");
            // verify the required parameter 'countrycode' is set
            if (countrycode == null)
                throw new ApiException(400, "Missing required parameter 'countrycode' when calling DataMillApi->FormatPhoneNumber");

            var localVarPath = "/phone/format";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (phonenumber != null) localVarFormParams.Add("phonenumber", Configuration.ApiClient.ParameterToString(phonenumber)); // form parameter
            if (countrycode != null) localVarFormParams.Add("countrycode", Configuration.ApiClient.ParameterToString(countrycode)); // form parameter
            if (format != null) localVarFormParams.Add("format", Configuration.ApiClient.ParameterToString(format)); // form parameter
            if (directDialingDelimiter != null) localVarFormParams.Add("direct_dialing_delimiter", Configuration.ApiClient.ParameterToString(directDialingDelimiter)); // form parameter
            if (allowedDelimiters != null) localVarFormParams.Add("allowed_delimiters", Configuration.ApiClient.ParameterToString(allowedDelimiters)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FormatPhoneNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoneFormatResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PhoneFormatResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoneFormatResponse)));
            
        }

        /// <summary>
        /// Get marketing information by DUNS number Get marketing information about a company (credit rating, PAYDEX score, demographic information, ...) based on the company&#39;s D-U-N-S number. In order to get the marketing information each request requires a reason. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>BusinessDataDunsRatingResponse</returns>
        public BusinessDataDunsRatingResponse GetDUNSRating (string dunsNumber, string reasonCode)
        {
             ApiResponse<BusinessDataDunsRatingResponse> localVarResponse = GetDUNSRatingWithHttpInfo(dunsNumber, reasonCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get marketing information by DUNS number Get marketing information about a company (credit rating, PAYDEX score, demographic information, ...) based on the company&#39;s D-U-N-S number. In order to get the marketing information each request requires a reason. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>ApiResponse of BusinessDataDunsRatingResponse</returns>
        public ApiResponse< BusinessDataDunsRatingResponse > GetDUNSRatingWithHttpInfo (string dunsNumber, string reasonCode)
        {
            // verify the required parameter 'dunsNumber' is set
            if (dunsNumber == null)
                throw new ApiException(400, "Missing required parameter 'dunsNumber' when calling DataMillApi->GetDUNSRating");
            // verify the required parameter 'reasonCode' is set
            if (reasonCode == null)
                throw new ApiException(400, "Missing required parameter 'reasonCode' when calling DataMillApi->GetDUNSRating");

            var localVarPath = "/business-data/duns/rating";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dunsNumber != null) localVarFormParams.Add("duns_number", Configuration.ApiClient.ParameterToString(dunsNumber)); // form parameter
            if (reasonCode != null) localVarFormParams.Add("reason_code", Configuration.ApiClient.ParameterToString(reasonCode)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDUNSRating", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessDataDunsRatingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessDataDunsRatingResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessDataDunsRatingResponse)));
            
        }

        /// <summary>
        /// Get marketing information by DUNS number Get marketing information about a company (credit rating, PAYDEX score, demographic information, ...) based on the company&#39;s D-U-N-S number. In order to get the marketing information each request requires a reason. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>Task of BusinessDataDunsRatingResponse</returns>
        public async System.Threading.Tasks.Task<BusinessDataDunsRatingResponse> GetDUNSRatingAsync (string dunsNumber, string reasonCode)
        {
             ApiResponse<BusinessDataDunsRatingResponse> localVarResponse = await GetDUNSRatingAsyncWithHttpInfo(dunsNumber, reasonCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get marketing information by DUNS number Get marketing information about a company (credit rating, PAYDEX score, demographic information, ...) based on the company&#39;s D-U-N-S number. In order to get the marketing information each request requires a reason. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>Task of ApiResponse (BusinessDataDunsRatingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessDataDunsRatingResponse>> GetDUNSRatingAsyncWithHttpInfo (string dunsNumber, string reasonCode)
        {
            // verify the required parameter 'dunsNumber' is set
            if (dunsNumber == null)
                throw new ApiException(400, "Missing required parameter 'dunsNumber' when calling DataMillApi->GetDUNSRating");
            // verify the required parameter 'reasonCode' is set
            if (reasonCode == null)
                throw new ApiException(400, "Missing required parameter 'reasonCode' when calling DataMillApi->GetDUNSRating");

            var localVarPath = "/business-data/duns/rating";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dunsNumber != null) localVarFormParams.Add("duns_number", Configuration.ApiClient.ParameterToString(dunsNumber)); // form parameter
            if (reasonCode != null) localVarFormParams.Add("reason_code", Configuration.ApiClient.ParameterToString(reasonCode)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDUNSRating", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessDataDunsRatingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessDataDunsRatingResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessDataDunsRatingResponse)));
            
        }

        /// <summary>
        /// Recognize and extract first names Detects all first names in a given sting (e.g. a person&#39;s name) and extracts them. (Works only with common first names in Germany, Austria and Switzerland) 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to detect all first names and extract them</param>
        /// <returns>FirstNameGetResponse</returns>
        public FirstNameGetResponse GetFirstNames (string name)
        {
             ApiResponse<FirstNameGetResponse> localVarResponse = GetFirstNamesWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recognize and extract first names Detects all first names in a given sting (e.g. a person&#39;s name) and extracts them. (Works only with common first names in Germany, Austria and Switzerland) 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to detect all first names and extract them</param>
        /// <returns>ApiResponse of FirstNameGetResponse</returns>
        public ApiResponse< FirstNameGetResponse > GetFirstNamesWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DataMillApi->GetFirstNames");

            var localVarPath = "/firstname/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFirstNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstNameGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstNameGetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstNameGetResponse)));
            
        }

        /// <summary>
        /// Recognize and extract first names Detects all first names in a given sting (e.g. a person&#39;s name) and extracts them. (Works only with common first names in Germany, Austria and Switzerland) 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to detect all first names and extract them</param>
        /// <returns>Task of FirstNameGetResponse</returns>
        public async System.Threading.Tasks.Task<FirstNameGetResponse> GetFirstNamesAsync (string name)
        {
             ApiResponse<FirstNameGetResponse> localVarResponse = await GetFirstNamesAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recognize and extract first names Detects all first names in a given sting (e.g. a person&#39;s name) and extracts them. (Works only with common first names in Germany, Austria and Switzerland) 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Full name to detect all first names and extract them</param>
        /// <returns>Task of ApiResponse (FirstNameGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FirstNameGetResponse>> GetFirstNamesAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DataMillApi->GetFirstNames");

            var localVarPath = "/firstname/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFirstNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FirstNameGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FirstNameGetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FirstNameGetResponse)));
            
        }

        /// <summary>
        /// Recognize gender by first name Recognizes the gender of a given first name. (Works only with common first names in Germany, Austria and Switzerland) 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">First name to recognize gender.</param>
        /// <returns>GenderGetResponse</returns>
        public GenderGetResponse GetGender (string firstname)
        {
             ApiResponse<GenderGetResponse> localVarResponse = GetGenderWithHttpInfo(firstname);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recognize gender by first name Recognizes the gender of a given first name. (Works only with common first names in Germany, Austria and Switzerland) 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">First name to recognize gender.</param>
        /// <returns>ApiResponse of GenderGetResponse</returns>
        public ApiResponse< GenderGetResponse > GetGenderWithHttpInfo (string firstname)
        {
            // verify the required parameter 'firstname' is set
            if (firstname == null)
                throw new ApiException(400, "Missing required parameter 'firstname' when calling DataMillApi->GetGender");

            var localVarPath = "/gender/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (firstname != null) localVarFormParams.Add("firstname", Configuration.ApiClient.ParameterToString(firstname)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenderGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenderGetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenderGetResponse)));
            
        }

        /// <summary>
        /// Recognize gender by first name Recognizes the gender of a given first name. (Works only with common first names in Germany, Austria and Switzerland) 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">First name to recognize gender.</param>
        /// <returns>Task of GenderGetResponse</returns>
        public async System.Threading.Tasks.Task<GenderGetResponse> GetGenderAsync (string firstname)
        {
             ApiResponse<GenderGetResponse> localVarResponse = await GetGenderAsyncWithHttpInfo(firstname);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recognize gender by first name Recognizes the gender of a given first name. (Works only with common first names in Germany, Austria and Switzerland) 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">First name to recognize gender.</param>
        /// <returns>Task of ApiResponse (GenderGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenderGetResponse>> GetGenderAsyncWithHttpInfo (string firstname)
        {
            // verify the required parameter 'firstname' is set
            if (firstname == null)
                throw new ApiException(400, "Missing required parameter 'firstname' when calling DataMillApi->GetGender");

            var localVarPath = "/gender/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (firstname != null) localVarFormParams.Add("firstname", Configuration.ApiClient.ParameterToString(firstname)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenderGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenderGetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenderGetResponse)));
            
        }

        /// <summary>
        /// Recognize gender by first name (advanced) Recognizes the gender of a given first name considering country specific peculiarities.
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">First name to recognize gender.</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>GenderExtendedGetResponse</returns>
        public GenderExtendedGetResponse GetGenderExtended (string firstname, string countrycode)
        {
             ApiResponse<GenderExtendedGetResponse> localVarResponse = GetGenderExtendedWithHttpInfo(firstname, countrycode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recognize gender by first name (advanced) Recognizes the gender of a given first name considering country specific peculiarities.
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">First name to recognize gender.</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>ApiResponse of GenderExtendedGetResponse</returns>
        public ApiResponse< GenderExtendedGetResponse > GetGenderExtendedWithHttpInfo (string firstname, string countrycode)
        {
            // verify the required parameter 'firstname' is set
            if (firstname == null)
                throw new ApiException(400, "Missing required parameter 'firstname' when calling DataMillApi->GetGenderExtended");
            // verify the required parameter 'countrycode' is set
            if (countrycode == null)
                throw new ApiException(400, "Missing required parameter 'countrycode' when calling DataMillApi->GetGenderExtended");

            var localVarPath = "/gender/extended/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (firstname != null) localVarFormParams.Add("firstname", Configuration.ApiClient.ParameterToString(firstname)); // form parameter
            if (countrycode != null) localVarFormParams.Add("countrycode", Configuration.ApiClient.ParameterToString(countrycode)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGenderExtended", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenderExtendedGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenderExtendedGetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenderExtendedGetResponse)));
            
        }

        /// <summary>
        /// Recognize gender by first name (advanced) Recognizes the gender of a given first name considering country specific peculiarities.
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">First name to recognize gender.</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>Task of GenderExtendedGetResponse</returns>
        public async System.Threading.Tasks.Task<GenderExtendedGetResponse> GetGenderExtendedAsync (string firstname, string countrycode)
        {
             ApiResponse<GenderExtendedGetResponse> localVarResponse = await GetGenderExtendedAsyncWithHttpInfo(firstname, countrycode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recognize gender by first name (advanced) Recognizes the gender of a given first name considering country specific peculiarities.
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstname">First name to recognize gender.</param>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>Task of ApiResponse (GenderExtendedGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenderExtendedGetResponse>> GetGenderExtendedAsyncWithHttpInfo (string firstname, string countrycode)
        {
            // verify the required parameter 'firstname' is set
            if (firstname == null)
                throw new ApiException(400, "Missing required parameter 'firstname' when calling DataMillApi->GetGenderExtended");
            // verify the required parameter 'countrycode' is set
            if (countrycode == null)
                throw new ApiException(400, "Missing required parameter 'countrycode' when calling DataMillApi->GetGenderExtended");

            var localVarPath = "/gender/extended/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (firstname != null) localVarFormParams.Add("firstname", Configuration.ApiClient.ParameterToString(firstname)); // form parameter
            if (countrycode != null) localVarFormParams.Add("countrycode", Configuration.ApiClient.ParameterToString(countrycode)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGenderExtended", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenderExtendedGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenderExtendedGetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenderExtendedGetResponse)));
            
        }

        /// <summary>
        /// International and national dial prefix Resolves the national and international dial prefix for a country specified by the given ISO country code.
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>PhoneCountryCodeGetResponse</returns>
        public PhoneCountryCodeGetResponse GetPhoneCountryCode (string countrycode)
        {
             ApiResponse<PhoneCountryCodeGetResponse> localVarResponse = GetPhoneCountryCodeWithHttpInfo(countrycode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// International and national dial prefix Resolves the national and international dial prefix for a country specified by the given ISO country code.
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>ApiResponse of PhoneCountryCodeGetResponse</returns>
        public ApiResponse< PhoneCountryCodeGetResponse > GetPhoneCountryCodeWithHttpInfo (string countrycode)
        {
            // verify the required parameter 'countrycode' is set
            if (countrycode == null)
                throw new ApiException(400, "Missing required parameter 'countrycode' when calling DataMillApi->GetPhoneCountryCode");

            var localVarPath = "/phone/countrycode/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (countrycode != null) localVarFormParams.Add("countrycode", Configuration.ApiClient.ParameterToString(countrycode)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPhoneCountryCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoneCountryCodeGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PhoneCountryCodeGetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoneCountryCodeGetResponse)));
            
        }

        /// <summary>
        /// International and national dial prefix Resolves the national and international dial prefix for a country specified by the given ISO country code.
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>Task of PhoneCountryCodeGetResponse</returns>
        public async System.Threading.Tasks.Task<PhoneCountryCodeGetResponse> GetPhoneCountryCodeAsync (string countrycode)
        {
             ApiResponse<PhoneCountryCodeGetResponse> localVarResponse = await GetPhoneCountryCodeAsyncWithHttpInfo(countrycode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// International and national dial prefix Resolves the national and international dial prefix for a country specified by the given ISO country code.
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countrycode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <returns>Task of ApiResponse (PhoneCountryCodeGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PhoneCountryCodeGetResponse>> GetPhoneCountryCodeAsyncWithHttpInfo (string countrycode)
        {
            // verify the required parameter 'countrycode' is set
            if (countrycode == null)
                throw new ApiException(400, "Missing required parameter 'countrycode' when calling DataMillApi->GetPhoneCountryCode");

            var localVarPath = "/phone/countrycode/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (countrycode != null) localVarFormParams.Add("countrycode", Configuration.ApiClient.ParameterToString(countrycode)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPhoneCountryCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoneCountryCodeGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PhoneCountryCodeGetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoneCountryCodeGetResponse)));
            
        }

        /// <summary>
        /// Calculate phonetic codes of a given text Get the phonetic code of a given text. Currently three phonetic algorithms are available:  * **Soundex** (algorithm code 1)  * **Colcogne Phonetic** (algorithm code 2)  * **Metaphon** (algorithm code 3) 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text which should be converted. Each word will be converted separatly and generate a single entry in the result. </param>
        /// <param name="phoneticAlgorithm">The phonetic algorithm which should be applied. If no algorithm code will be provided **Soundex** will be used. Codes:  * 1 &#x3D; Soundex  * 2 &#x3D; Colcogne Phonetic  * 3 &#x3D; Metaphon  (optional)</param>
        /// <returns>PhoneticCodeGetResponse</returns>
        public PhoneticCodeGetResponse GetPhoneticCode (string text, int? phoneticAlgorithm = null)
        {
             ApiResponse<PhoneticCodeGetResponse> localVarResponse = GetPhoneticCodeWithHttpInfo(text, phoneticAlgorithm);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate phonetic codes of a given text Get the phonetic code of a given text. Currently three phonetic algorithms are available:  * **Soundex** (algorithm code 1)  * **Colcogne Phonetic** (algorithm code 2)  * **Metaphon** (algorithm code 3) 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text which should be converted. Each word will be converted separatly and generate a single entry in the result. </param>
        /// <param name="phoneticAlgorithm">The phonetic algorithm which should be applied. If no algorithm code will be provided **Soundex** will be used. Codes:  * 1 &#x3D; Soundex  * 2 &#x3D; Colcogne Phonetic  * 3 &#x3D; Metaphon  (optional)</param>
        /// <returns>ApiResponse of PhoneticCodeGetResponse</returns>
        public ApiResponse< PhoneticCodeGetResponse > GetPhoneticCodeWithHttpInfo (string text, int? phoneticAlgorithm = null)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling DataMillApi->GetPhoneticCode");

            var localVarPath = "/phonetic/code/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarFormParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // form parameter
            if (phoneticAlgorithm != null) localVarFormParams.Add("phonetic_algorithm", Configuration.ApiClient.ParameterToString(phoneticAlgorithm)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPhoneticCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoneticCodeGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PhoneticCodeGetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoneticCodeGetResponse)));
            
        }

        /// <summary>
        /// Calculate phonetic codes of a given text Get the phonetic code of a given text. Currently three phonetic algorithms are available:  * **Soundex** (algorithm code 1)  * **Colcogne Phonetic** (algorithm code 2)  * **Metaphon** (algorithm code 3) 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text which should be converted. Each word will be converted separatly and generate a single entry in the result. </param>
        /// <param name="phoneticAlgorithm">The phonetic algorithm which should be applied. If no algorithm code will be provided **Soundex** will be used. Codes:  * 1 &#x3D; Soundex  * 2 &#x3D; Colcogne Phonetic  * 3 &#x3D; Metaphon  (optional)</param>
        /// <returns>Task of PhoneticCodeGetResponse</returns>
        public async System.Threading.Tasks.Task<PhoneticCodeGetResponse> GetPhoneticCodeAsync (string text, int? phoneticAlgorithm = null)
        {
             ApiResponse<PhoneticCodeGetResponse> localVarResponse = await GetPhoneticCodeAsyncWithHttpInfo(text, phoneticAlgorithm);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculate phonetic codes of a given text Get the phonetic code of a given text. Currently three phonetic algorithms are available:  * **Soundex** (algorithm code 1)  * **Colcogne Phonetic** (algorithm code 2)  * **Metaphon** (algorithm code 3) 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text which should be converted. Each word will be converted separatly and generate a single entry in the result. </param>
        /// <param name="phoneticAlgorithm">The phonetic algorithm which should be applied. If no algorithm code will be provided **Soundex** will be used. Codes:  * 1 &#x3D; Soundex  * 2 &#x3D; Colcogne Phonetic  * 3 &#x3D; Metaphon  (optional)</param>
        /// <returns>Task of ApiResponse (PhoneticCodeGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PhoneticCodeGetResponse>> GetPhoneticCodeAsyncWithHttpInfo (string text, int? phoneticAlgorithm = null)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling DataMillApi->GetPhoneticCode");

            var localVarPath = "/phonetic/code/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (text != null) localVarFormParams.Add("text", Configuration.ApiClient.ParameterToString(text)); // form parameter
            if (phoneticAlgorithm != null) localVarFormParams.Add("phonetic_algorithm", Configuration.ApiClient.ParameterToString(phoneticAlgorithm)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPhoneticCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PhoneticCodeGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PhoneticCodeGetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PhoneticCodeGetResponse)));
            
        }

        /// <summary>
        /// Retrieve social media data by email address Get the number of followers and account information of multiple social media platforms from individual email addresses. If the social media information for a specific email address aren&#39;t fetched yet the request will be queued and the data will be available within the next 12 hours. Please consider that the response of a social media platform may be empty because of restricted access (privacy setting of the person being checked). The following social media platforms are currently checked:  * **LinkedIn**  * **XING**  * **Facebook**  * **Twitter**  * **Pinterest**  * **Instagram**  * **Youtube**  * **Google Plus**  * **Klout** 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The person&#39;s email address being checked on mentioned social media plattforms</param>
        /// <returns>SocialMediaActivitiesGetResponse</returns>
        public SocialMediaActivitiesGetResponse GetSocialMediaActivities (string email)
        {
             ApiResponse<SocialMediaActivitiesGetResponse> localVarResponse = GetSocialMediaActivitiesWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve social media data by email address Get the number of followers and account information of multiple social media platforms from individual email addresses. If the social media information for a specific email address aren&#39;t fetched yet the request will be queued and the data will be available within the next 12 hours. Please consider that the response of a social media platform may be empty because of restricted access (privacy setting of the person being checked). The following social media platforms are currently checked:  * **LinkedIn**  * **XING**  * **Facebook**  * **Twitter**  * **Pinterest**  * **Instagram**  * **Youtube**  * **Google Plus**  * **Klout** 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The person&#39;s email address being checked on mentioned social media plattforms</param>
        /// <returns>ApiResponse of SocialMediaActivitiesGetResponse</returns>
        public ApiResponse< SocialMediaActivitiesGetResponse > GetSocialMediaActivitiesWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling DataMillApi->GetSocialMediaActivities");

            var localVarPath = "/social-media/activities/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSocialMediaActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SocialMediaActivitiesGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SocialMediaActivitiesGetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SocialMediaActivitiesGetResponse)));
            
        }

        /// <summary>
        /// Retrieve social media data by email address Get the number of followers and account information of multiple social media platforms from individual email addresses. If the social media information for a specific email address aren&#39;t fetched yet the request will be queued and the data will be available within the next 12 hours. Please consider that the response of a social media platform may be empty because of restricted access (privacy setting of the person being checked). The following social media platforms are currently checked:  * **LinkedIn**  * **XING**  * **Facebook**  * **Twitter**  * **Pinterest**  * **Instagram**  * **Youtube**  * **Google Plus**  * **Klout** 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The person&#39;s email address being checked on mentioned social media plattforms</param>
        /// <returns>Task of SocialMediaActivitiesGetResponse</returns>
        public async System.Threading.Tasks.Task<SocialMediaActivitiesGetResponse> GetSocialMediaActivitiesAsync (string email)
        {
             ApiResponse<SocialMediaActivitiesGetResponse> localVarResponse = await GetSocialMediaActivitiesAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve social media data by email address Get the number of followers and account information of multiple social media platforms from individual email addresses. If the social media information for a specific email address aren&#39;t fetched yet the request will be queued and the data will be available within the next 12 hours. Please consider that the response of a social media platform may be empty because of restricted access (privacy setting of the person being checked). The following social media platforms are currently checked:  * **LinkedIn**  * **XING**  * **Facebook**  * **Twitter**  * **Pinterest**  * **Instagram**  * **Youtube**  * **Google Plus**  * **Klout** 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The person&#39;s email address being checked on mentioned social media plattforms</param>
        /// <returns>Task of ApiResponse (SocialMediaActivitiesGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SocialMediaActivitiesGetResponse>> GetSocialMediaActivitiesAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling DataMillApi->GetSocialMediaActivities");

            var localVarPath = "/social-media/activities/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSocialMediaActivities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SocialMediaActivitiesGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SocialMediaActivitiesGetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SocialMediaActivitiesGetResponse)));
            
        }

        /// <summary>
        /// Reverse address lookup Resolve an address corresponding to a given geo-coordinate. The result is a single record which matches the given latitude and longitude. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude of the address (use a dot as decimal point)</param>
        /// <param name="longitude">Longitude of the address (use a dot as decimal point)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>AddressSearchResponse</returns>
        public AddressSearchResponse LocateAddress (string latitude, string longitude, string locale = null)
        {
             ApiResponse<AddressSearchResponse> localVarResponse = LocateAddressWithHttpInfo(latitude, longitude, locale);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reverse address lookup Resolve an address corresponding to a given geo-coordinate. The result is a single record which matches the given latitude and longitude. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude of the address (use a dot as decimal point)</param>
        /// <param name="longitude">Longitude of the address (use a dot as decimal point)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>ApiResponse of AddressSearchResponse</returns>
        public ApiResponse< AddressSearchResponse > LocateAddressWithHttpInfo (string latitude, string longitude, string locale = null)
        {
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling DataMillApi->LocateAddress");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling DataMillApi->LocateAddress");

            var localVarPath = "/address/locate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (latitude != null) localVarFormParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // form parameter
            if (longitude != null) localVarFormParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // form parameter
            if (locale != null) localVarFormParams.Add("locale", Configuration.ApiClient.ParameterToString(locale)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LocateAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressSearchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressSearchResponse)));
            
        }

        /// <summary>
        /// Reverse address lookup Resolve an address corresponding to a given geo-coordinate. The result is a single record which matches the given latitude and longitude. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude of the address (use a dot as decimal point)</param>
        /// <param name="longitude">Longitude of the address (use a dot as decimal point)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>Task of AddressSearchResponse</returns>
        public async System.Threading.Tasks.Task<AddressSearchResponse> LocateAddressAsync (string latitude, string longitude, string locale = null)
        {
             ApiResponse<AddressSearchResponse> localVarResponse = await LocateAddressAsyncWithHttpInfo(latitude, longitude, locale);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reverse address lookup Resolve an address corresponding to a given geo-coordinate. The result is a single record which matches the given latitude and longitude. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="latitude">Latitude of the address (use a dot as decimal point)</param>
        /// <param name="longitude">Longitude of the address (use a dot as decimal point)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>Task of ApiResponse (AddressSearchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressSearchResponse>> LocateAddressAsyncWithHttpInfo (string latitude, string longitude, string locale = null)
        {
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling DataMillApi->LocateAddress");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling DataMillApi->LocateAddress");

            var localVarPath = "/address/locate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (latitude != null) localVarFormParams.Add("latitude", Configuration.ApiClient.ParameterToString(latitude)); // form parameter
            if (longitude != null) localVarFormParams.Add("longitude", Configuration.ApiClient.ParameterToString(longitude)); // form parameter
            if (locale != null) localVarFormParams.Add("locale", Configuration.ApiClient.ParameterToString(locale)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LocateAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressSearchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressSearchResponse)));
            
        }

        /// <summary>
        /// Resolve company information by DUNS number Resolves company information (official name, postal address, annual turnover, number of employees, ...) based on  the company&#39;s D-U-N-S number. In order to get the company information each request requires a reason. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>BusinessDataDunsResolveResponse</returns>
        public BusinessDataDunsResolveResponse ResolveDUNS (string dunsNumber, string reasonCode)
        {
             ApiResponse<BusinessDataDunsResolveResponse> localVarResponse = ResolveDUNSWithHttpInfo(dunsNumber, reasonCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resolve company information by DUNS number Resolves company information (official name, postal address, annual turnover, number of employees, ...) based on  the company&#39;s D-U-N-S number. In order to get the company information each request requires a reason. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>ApiResponse of BusinessDataDunsResolveResponse</returns>
        public ApiResponse< BusinessDataDunsResolveResponse > ResolveDUNSWithHttpInfo (string dunsNumber, string reasonCode)
        {
            // verify the required parameter 'dunsNumber' is set
            if (dunsNumber == null)
                throw new ApiException(400, "Missing required parameter 'dunsNumber' when calling DataMillApi->ResolveDUNS");
            // verify the required parameter 'reasonCode' is set
            if (reasonCode == null)
                throw new ApiException(400, "Missing required parameter 'reasonCode' when calling DataMillApi->ResolveDUNS");

            var localVarPath = "/business-data/duns/resolve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dunsNumber != null) localVarFormParams.Add("duns_number", Configuration.ApiClient.ParameterToString(dunsNumber)); // form parameter
            if (reasonCode != null) localVarFormParams.Add("reason_code", Configuration.ApiClient.ParameterToString(reasonCode)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResolveDUNS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessDataDunsResolveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessDataDunsResolveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessDataDunsResolveResponse)));
            
        }

        /// <summary>
        /// Resolve company information by DUNS number Resolves company information (official name, postal address, annual turnover, number of employees, ...) based on  the company&#39;s D-U-N-S number. In order to get the company information each request requires a reason. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>Task of BusinessDataDunsResolveResponse</returns>
        public async System.Threading.Tasks.Task<BusinessDataDunsResolveResponse> ResolveDUNSAsync (string dunsNumber, string reasonCode)
        {
             ApiResponse<BusinessDataDunsResolveResponse> localVarResponse = await ResolveDUNSAsyncWithHttpInfo(dunsNumber, reasonCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resolve company information by DUNS number Resolves company information (official name, postal address, annual turnover, number of employees, ...) based on  the company&#39;s D-U-N-S number. In order to get the company information each request requires a reason. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>Task of ApiResponse (BusinessDataDunsResolveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessDataDunsResolveResponse>> ResolveDUNSAsyncWithHttpInfo (string dunsNumber, string reasonCode)
        {
            // verify the required parameter 'dunsNumber' is set
            if (dunsNumber == null)
                throw new ApiException(400, "Missing required parameter 'dunsNumber' when calling DataMillApi->ResolveDUNS");
            // verify the required parameter 'reasonCode' is set
            if (reasonCode == null)
                throw new ApiException(400, "Missing required parameter 'reasonCode' when calling DataMillApi->ResolveDUNS");

            var localVarPath = "/business-data/duns/resolve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dunsNumber != null) localVarFormParams.Add("duns_number", Configuration.ApiClient.ParameterToString(dunsNumber)); // form parameter
            if (reasonCode != null) localVarFormParams.Add("reason_code", Configuration.ApiClient.ParameterToString(reasonCode)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResolveDUNS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessDataDunsResolveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessDataDunsResolveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessDataDunsResolveResponse)));
            
        }

        /// <summary>
        /// Try to resolve VAT number to company information Resolves company information (company name and postal address) based on the company&#39;s VAT (Value Added Tax) identification number. Only VAT numbers of companies within the European Union can be verified and resolved. Some countries have access restrictions and may not deliver the full company information. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>VatResolveResponse</returns>
        public VatResolveResponse ResolveVAT (string vatnumber, string locale = null)
        {
             ApiResponse<VatResolveResponse> localVarResponse = ResolveVATWithHttpInfo(vatnumber, locale);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Try to resolve VAT number to company information Resolves company information (company name and postal address) based on the company&#39;s VAT (Value Added Tax) identification number. Only VAT numbers of companies within the European Union can be verified and resolved. Some countries have access restrictions and may not deliver the full company information. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>ApiResponse of VatResolveResponse</returns>
        public ApiResponse< VatResolveResponse > ResolveVATWithHttpInfo (string vatnumber, string locale = null)
        {
            // verify the required parameter 'vatnumber' is set
            if (vatnumber == null)
                throw new ApiException(400, "Missing required parameter 'vatnumber' when calling DataMillApi->ResolveVAT");

            var localVarPath = "/vat/resolve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (vatnumber != null) localVarFormParams.Add("vatnumber", Configuration.ApiClient.ParameterToString(vatnumber)); // form parameter
            if (locale != null) localVarFormParams.Add("locale", Configuration.ApiClient.ParameterToString(locale)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResolveVAT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VatResolveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VatResolveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VatResolveResponse)));
            
        }

        /// <summary>
        /// Try to resolve VAT number to company information Resolves company information (company name and postal address) based on the company&#39;s VAT (Value Added Tax) identification number. Only VAT numbers of companies within the European Union can be verified and resolved. Some countries have access restrictions and may not deliver the full company information. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>Task of VatResolveResponse</returns>
        public async System.Threading.Tasks.Task<VatResolveResponse> ResolveVATAsync (string vatnumber, string locale = null)
        {
             ApiResponse<VatResolveResponse> localVarResponse = await ResolveVATAsyncWithHttpInfo(vatnumber, locale);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Try to resolve VAT number to company information Resolves company information (company name and postal address) based on the company&#39;s VAT (Value Added Tax) identification number. Only VAT numbers of companies within the European Union can be verified and resolved. Some countries have access restrictions and may not deliver the full company information. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vatnumber">The VAT number of a company within the European Union</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>Task of ApiResponse (VatResolveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VatResolveResponse>> ResolveVATAsyncWithHttpInfo (string vatnumber, string locale = null)
        {
            // verify the required parameter 'vatnumber' is set
            if (vatnumber == null)
                throw new ApiException(400, "Missing required parameter 'vatnumber' when calling DataMillApi->ResolveVAT");

            var localVarPath = "/vat/resolve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (vatnumber != null) localVarFormParams.Add("vatnumber", Configuration.ApiClient.ParameterToString(vatnumber)); // form parameter
            if (locale != null) localVarFormParams.Add("locale", Configuration.ApiClient.ParameterToString(locale)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResolveVAT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VatResolveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VatResolveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VatResolveResponse)));
            
        }

        /// <summary>
        /// Lookup physical postal address Find geo-location based on unstructured (single-line entry, un-qualified) or based on structured (qualified) address information. The result is a single record which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typos the response keys may be empty.  The unstructured query determines each address part by its own and afterwards finds the closest geo-location. It should only be used if you do not know which address information fits in which query parameter. The structured query provides an additional logic for specific countries to improve the result of the determined geo-location. Please consider that if you do not provide a country name/code the result may end in a different country because the same city + street combination may exist in multiple countries. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Unstructured query parameter. Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. You can specify the &#39;address&#39; parameter by itself or you can specify it with other parameters to narrow your search.  (optional)</param>
        /// <param name="country">Specify the country using the country code (ISO 3166-1 alpha-3) or the country name. (optional)</param>
        /// <param name="state">First subdivision level below the country. Specify the state using full or abbreviated notation. (optional)</param>
        /// <param name="county">Second subdivision level below the country. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="city">The city name. (optional)</param>
        /// <param name="zip">Postal code defined by the government of the country. (optional)</param>
        /// <param name="district">Subdivision level below the city. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="street">The street name. (optional)</param>
        /// <param name="housenumber">The house number or building name. (optional)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>AddressSearchResponse</returns>
        public AddressSearchResponse SearchAddress (string address = null, string country = null, string state = null, string county = null, string city = null, string zip = null, string district = null, string street = null, string housenumber = null, string locale = null)
        {
             ApiResponse<AddressSearchResponse> localVarResponse = SearchAddressWithHttpInfo(address, country, state, county, city, zip, district, street, housenumber, locale);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lookup physical postal address Find geo-location based on unstructured (single-line entry, un-qualified) or based on structured (qualified) address information. The result is a single record which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typos the response keys may be empty.  The unstructured query determines each address part by its own and afterwards finds the closest geo-location. It should only be used if you do not know which address information fits in which query parameter. The structured query provides an additional logic for specific countries to improve the result of the determined geo-location. Please consider that if you do not provide a country name/code the result may end in a different country because the same city + street combination may exist in multiple countries. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Unstructured query parameter. Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. You can specify the &#39;address&#39; parameter by itself or you can specify it with other parameters to narrow your search.  (optional)</param>
        /// <param name="country">Specify the country using the country code (ISO 3166-1 alpha-3) or the country name. (optional)</param>
        /// <param name="state">First subdivision level below the country. Specify the state using full or abbreviated notation. (optional)</param>
        /// <param name="county">Second subdivision level below the country. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="city">The city name. (optional)</param>
        /// <param name="zip">Postal code defined by the government of the country. (optional)</param>
        /// <param name="district">Subdivision level below the city. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="street">The street name. (optional)</param>
        /// <param name="housenumber">The house number or building name. (optional)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>ApiResponse of AddressSearchResponse</returns>
        public ApiResponse< AddressSearchResponse > SearchAddressWithHttpInfo (string address = null, string country = null, string state = null, string county = null, string city = null, string zip = null, string district = null, string street = null, string housenumber = null, string locale = null)
        {

            var localVarPath = "/address/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarFormParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (country != null) localVarFormParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // form parameter
            if (state != null) localVarFormParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (county != null) localVarFormParams.Add("county", Configuration.ApiClient.ParameterToString(county)); // form parameter
            if (city != null) localVarFormParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // form parameter
            if (zip != null) localVarFormParams.Add("zip", Configuration.ApiClient.ParameterToString(zip)); // form parameter
            if (district != null) localVarFormParams.Add("district", Configuration.ApiClient.ParameterToString(district)); // form parameter
            if (street != null) localVarFormParams.Add("street", Configuration.ApiClient.ParameterToString(street)); // form parameter
            if (housenumber != null) localVarFormParams.Add("housenumber", Configuration.ApiClient.ParameterToString(housenumber)); // form parameter
            if (locale != null) localVarFormParams.Add("locale", Configuration.ApiClient.ParameterToString(locale)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressSearchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressSearchResponse)));
            
        }

        /// <summary>
        /// Lookup physical postal address Find geo-location based on unstructured (single-line entry, un-qualified) or based on structured (qualified) address information. The result is a single record which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typos the response keys may be empty.  The unstructured query determines each address part by its own and afterwards finds the closest geo-location. It should only be used if you do not know which address information fits in which query parameter. The structured query provides an additional logic for specific countries to improve the result of the determined geo-location. Please consider that if you do not provide a country name/code the result may end in a different country because the same city + street combination may exist in multiple countries. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Unstructured query parameter. Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. You can specify the &#39;address&#39; parameter by itself or you can specify it with other parameters to narrow your search.  (optional)</param>
        /// <param name="country">Specify the country using the country code (ISO 3166-1 alpha-3) or the country name. (optional)</param>
        /// <param name="state">First subdivision level below the country. Specify the state using full or abbreviated notation. (optional)</param>
        /// <param name="county">Second subdivision level below the country. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="city">The city name. (optional)</param>
        /// <param name="zip">Postal code defined by the government of the country. (optional)</param>
        /// <param name="district">Subdivision level below the city. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="street">The street name. (optional)</param>
        /// <param name="housenumber">The house number or building name. (optional)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>Task of AddressSearchResponse</returns>
        public async System.Threading.Tasks.Task<AddressSearchResponse> SearchAddressAsync (string address = null, string country = null, string state = null, string county = null, string city = null, string zip = null, string district = null, string street = null, string housenumber = null, string locale = null)
        {
             ApiResponse<AddressSearchResponse> localVarResponse = await SearchAddressAsyncWithHttpInfo(address, country, state, county, city, zip, district, street, housenumber, locale);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lookup physical postal address Find geo-location based on unstructured (single-line entry, un-qualified) or based on structured (qualified) address information. The result is a single record which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typos the response keys may be empty.  The unstructured query determines each address part by its own and afterwards finds the closest geo-location. It should only be used if you do not know which address information fits in which query parameter. The structured query provides an additional logic for specific countries to improve the result of the determined geo-location. Please consider that if you do not provide a country name/code the result may end in a different country because the same city + street combination may exist in multiple countries. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Unstructured query parameter. Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter. You can specify the &#39;address&#39; parameter by itself or you can specify it with other parameters to narrow your search.  (optional)</param>
        /// <param name="country">Specify the country using the country code (ISO 3166-1 alpha-3) or the country name. (optional)</param>
        /// <param name="state">First subdivision level below the country. Specify the state using full or abbreviated notation. (optional)</param>
        /// <param name="county">Second subdivision level below the country. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="city">The city name. (optional)</param>
        /// <param name="zip">Postal code defined by the government of the country. (optional)</param>
        /// <param name="district">Subdivision level below the city. Depending on the admin hierarchy in a country this level might not be applicable. (optional)</param>
        /// <param name="street">The street name. (optional)</param>
        /// <param name="housenumber">The house number or building name. (optional)</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>Task of ApiResponse (AddressSearchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressSearchResponse>> SearchAddressAsyncWithHttpInfo (string address = null, string country = null, string state = null, string county = null, string city = null, string zip = null, string district = null, string street = null, string housenumber = null, string locale = null)
        {

            var localVarPath = "/address/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarFormParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (country != null) localVarFormParams.Add("country", Configuration.ApiClient.ParameterToString(country)); // form parameter
            if (state != null) localVarFormParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (county != null) localVarFormParams.Add("county", Configuration.ApiClient.ParameterToString(county)); // form parameter
            if (city != null) localVarFormParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // form parameter
            if (zip != null) localVarFormParams.Add("zip", Configuration.ApiClient.ParameterToString(zip)); // form parameter
            if (district != null) localVarFormParams.Add("district", Configuration.ApiClient.ParameterToString(district)); // form parameter
            if (street != null) localVarFormParams.Add("street", Configuration.ApiClient.ParameterToString(street)); // form parameter
            if (housenumber != null) localVarFormParams.Add("housenumber", Configuration.ApiClient.ParameterToString(housenumber)); // form parameter
            if (locale != null) localVarFormParams.Add("locale", Configuration.ApiClient.ParameterToString(locale)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressSearchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressSearchResponse)));
            
        }

        /// <summary>
        /// Address lookup with multiple possible results Find multiple geo-locations based on unstructured (single-line entry, un-qualified) address information. The result is a set of records which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typo errors the response keys may be empty. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter.</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>AddressSearchMultipleResponse</returns>
        public AddressSearchMultipleResponse SearchAddressMultiple (string address, string locale = null)
        {
             ApiResponse<AddressSearchMultipleResponse> localVarResponse = SearchAddressMultipleWithHttpInfo(address, locale);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Address lookup with multiple possible results Find multiple geo-locations based on unstructured (single-line entry, un-qualified) address information. The result is a set of records which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typo errors the response keys may be empty. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter.</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>ApiResponse of AddressSearchMultipleResponse</returns>
        public ApiResponse< AddressSearchMultipleResponse > SearchAddressMultipleWithHttpInfo (string address, string locale = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DataMillApi->SearchAddressMultiple");

            var localVarPath = "/address/search/multiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarFormParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (locale != null) localVarFormParams.Add("locale", Configuration.ApiClient.ParameterToString(locale)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchAddressMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressSearchMultipleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressSearchMultipleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressSearchMultipleResponse)));
            
        }

        /// <summary>
        /// Address lookup with multiple possible results Find multiple geo-locations based on unstructured (single-line entry, un-qualified) address information. The result is a set of records which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typo errors the response keys may be empty. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter.</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>Task of AddressSearchMultipleResponse</returns>
        public async System.Threading.Tasks.Task<AddressSearchMultipleResponse> SearchAddressMultipleAsync (string address, string locale = null)
        {
             ApiResponse<AddressSearchMultipleResponse> localVarResponse = await SearchAddressMultipleAsyncWithHttpInfo(address, locale);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Address lookup with multiple possible results Find multiple geo-locations based on unstructured (single-line entry, un-qualified) address information. The result is a set of records which matches the given geo-location. The response depends on the data quality of the request. If the request contains too many typo errors the response keys may be empty. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Free-form text containing address elements (e.g. city, postal code, street, house number). Each element is separated using a whitespace. The order of the elements does not matter.</param>
        /// <param name="locale">The preferred language of address elements in the result. The locale must be provided according to RFC 4647 standard (language code). (optional)</param>
        /// <returns>Task of ApiResponse (AddressSearchMultipleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressSearchMultipleResponse>> SearchAddressMultipleAsyncWithHttpInfo (string address, string locale = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling DataMillApi->SearchAddressMultiple");

            var localVarPath = "/address/search/multiple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (address != null) localVarFormParams.Add("address", Configuration.ApiClient.ParameterToString(address)); // form parameter
            if (locale != null) localVarFormParams.Add("locale", Configuration.ApiClient.ParameterToString(locale)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchAddressMultiple", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressSearchMultipleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressSearchMultipleResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressSearchMultipleResponse)));
            
        }

        /// <summary>
        /// Find DUNS number and company information by name Finds the D-U-N-S number and additional company information by the company&#39;s name. Optionally a filter for the headquarters location can be added to get a more accurate response. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="companyName">The company name you are looking for or relevant parts of it (may be empty if the duns_number is set) (optional)</param>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information (may be empty if the company_name and country_code are set) (optional)</param>
        /// <param name="state">Filter to get only companies which matches the specified state (required for United States) (optional)</param>
        /// <param name="city">Filter to get only companies which matches the specified city (optional)</param>
        /// <param name="zip">Filter to get only companies which matches the specified postal code (optional)</param>
        /// <param name="street">Filter to get only companies which matches the specified street (optional)</param>
        /// <returns>BusinessDataDunsSearchResponse</returns>
        public BusinessDataDunsSearchResponse SearchDUNS (string countryCode, string companyName = null, string dunsNumber = null, string state = null, string city = null, string zip = null, string street = null)
        {
             ApiResponse<BusinessDataDunsSearchResponse> localVarResponse = SearchDUNSWithHttpInfo(countryCode, companyName, dunsNumber, state, city, zip, street);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find DUNS number and company information by name Finds the D-U-N-S number and additional company information by the company&#39;s name. Optionally a filter for the headquarters location can be added to get a more accurate response. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="companyName">The company name you are looking for or relevant parts of it (may be empty if the duns_number is set) (optional)</param>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information (may be empty if the company_name and country_code are set) (optional)</param>
        /// <param name="state">Filter to get only companies which matches the specified state (required for United States) (optional)</param>
        /// <param name="city">Filter to get only companies which matches the specified city (optional)</param>
        /// <param name="zip">Filter to get only companies which matches the specified postal code (optional)</param>
        /// <param name="street">Filter to get only companies which matches the specified street (optional)</param>
        /// <returns>ApiResponse of BusinessDataDunsSearchResponse</returns>
        public ApiResponse< BusinessDataDunsSearchResponse > SearchDUNSWithHttpInfo (string countryCode, string companyName = null, string dunsNumber = null, string state = null, string city = null, string zip = null, string street = null)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400, "Missing required parameter 'countryCode' when calling DataMillApi->SearchDUNS");

            var localVarPath = "/business-data/duns/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyName != null) localVarFormParams.Add("company_name", Configuration.ApiClient.ParameterToString(companyName)); // form parameter
            if (countryCode != null) localVarFormParams.Add("country_code", Configuration.ApiClient.ParameterToString(countryCode)); // form parameter
            if (dunsNumber != null) localVarFormParams.Add("duns_number", Configuration.ApiClient.ParameterToString(dunsNumber)); // form parameter
            if (state != null) localVarFormParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (city != null) localVarFormParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // form parameter
            if (zip != null) localVarFormParams.Add("zip", Configuration.ApiClient.ParameterToString(zip)); // form parameter
            if (street != null) localVarFormParams.Add("street", Configuration.ApiClient.ParameterToString(street)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchDUNS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessDataDunsSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessDataDunsSearchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessDataDunsSearchResponse)));
            
        }

        /// <summary>
        /// Find DUNS number and company information by name Finds the D-U-N-S number and additional company information by the company&#39;s name. Optionally a filter for the headquarters location can be added to get a more accurate response. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="companyName">The company name you are looking for or relevant parts of it (may be empty if the duns_number is set) (optional)</param>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information (may be empty if the company_name and country_code are set) (optional)</param>
        /// <param name="state">Filter to get only companies which matches the specified state (required for United States) (optional)</param>
        /// <param name="city">Filter to get only companies which matches the specified city (optional)</param>
        /// <param name="zip">Filter to get only companies which matches the specified postal code (optional)</param>
        /// <param name="street">Filter to get only companies which matches the specified street (optional)</param>
        /// <returns>Task of BusinessDataDunsSearchResponse</returns>
        public async System.Threading.Tasks.Task<BusinessDataDunsSearchResponse> SearchDUNSAsync (string countryCode, string companyName = null, string dunsNumber = null, string state = null, string city = null, string zip = null, string street = null)
        {
             ApiResponse<BusinessDataDunsSearchResponse> localVarResponse = await SearchDUNSAsyncWithHttpInfo(countryCode, companyName, dunsNumber, state, city, zip, street);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find DUNS number and company information by name Finds the D-U-N-S number and additional company information by the company&#39;s name. Optionally a filter for the headquarters location can be added to get a more accurate response. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="companyName">The company name you are looking for or relevant parts of it (may be empty if the duns_number is set) (optional)</param>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information (may be empty if the company_name and country_code are set) (optional)</param>
        /// <param name="state">Filter to get only companies which matches the specified state (required for United States) (optional)</param>
        /// <param name="city">Filter to get only companies which matches the specified city (optional)</param>
        /// <param name="zip">Filter to get only companies which matches the specified postal code (optional)</param>
        /// <param name="street">Filter to get only companies which matches the specified street (optional)</param>
        /// <returns>Task of ApiResponse (BusinessDataDunsSearchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessDataDunsSearchResponse>> SearchDUNSAsyncWithHttpInfo (string countryCode, string companyName = null, string dunsNumber = null, string state = null, string city = null, string zip = null, string street = null)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400, "Missing required parameter 'countryCode' when calling DataMillApi->SearchDUNS");

            var localVarPath = "/business-data/duns/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyName != null) localVarFormParams.Add("company_name", Configuration.ApiClient.ParameterToString(companyName)); // form parameter
            if (countryCode != null) localVarFormParams.Add("country_code", Configuration.ApiClient.ParameterToString(countryCode)); // form parameter
            if (dunsNumber != null) localVarFormParams.Add("duns_number", Configuration.ApiClient.ParameterToString(dunsNumber)); // form parameter
            if (state != null) localVarFormParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (city != null) localVarFormParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // form parameter
            if (zip != null) localVarFormParams.Add("zip", Configuration.ApiClient.ParameterToString(zip)); // form parameter
            if (street != null) localVarFormParams.Add("street", Configuration.ApiClient.ParameterToString(street)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchDUNS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessDataDunsSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessDataDunsSearchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessDataDunsSearchResponse)));
            
        }

        /// <summary>
        /// Find moved and deceased contacts Checks if the postal address of a person identified by its full name is invalid (moved to a new address or deceased). This function does NOT verify/check if a known postal address is still valid, instead it only checks if the person is moved to another address or is deceased and therefore a mail will result in an undeliverable state. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">The person&#39;s first name</param>
        /// <param name="lastName">The person&#39;s last name</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="zip">Last known postal code the person lives in</param>
        /// <param name="street">Last known street name the person lives in</param>
        /// <param name="reason">Free-form text written in english why you submit the query.</param>
        /// <returns>BusinessDataUndeliverableContactsResponse</returns>
        public BusinessDataUndeliverableContactsResponse SearchUndeliverableContact (string firstName, string lastName, string countryCode, string zip, string street, string reason)
        {
             ApiResponse<BusinessDataUndeliverableContactsResponse> localVarResponse = SearchUndeliverableContactWithHttpInfo(firstName, lastName, countryCode, zip, street, reason);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find moved and deceased contacts Checks if the postal address of a person identified by its full name is invalid (moved to a new address or deceased). This function does NOT verify/check if a known postal address is still valid, instead it only checks if the person is moved to another address or is deceased and therefore a mail will result in an undeliverable state. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">The person&#39;s first name</param>
        /// <param name="lastName">The person&#39;s last name</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="zip">Last known postal code the person lives in</param>
        /// <param name="street">Last known street name the person lives in</param>
        /// <param name="reason">Free-form text written in english why you submit the query.</param>
        /// <returns>ApiResponse of BusinessDataUndeliverableContactsResponse</returns>
        public ApiResponse< BusinessDataUndeliverableContactsResponse > SearchUndeliverableContactWithHttpInfo (string firstName, string lastName, string countryCode, string zip, string street, string reason)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling DataMillApi->SearchUndeliverableContact");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling DataMillApi->SearchUndeliverableContact");
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400, "Missing required parameter 'countryCode' when calling DataMillApi->SearchUndeliverableContact");
            // verify the required parameter 'zip' is set
            if (zip == null)
                throw new ApiException(400, "Missing required parameter 'zip' when calling DataMillApi->SearchUndeliverableContact");
            // verify the required parameter 'street' is set
            if (street == null)
                throw new ApiException(400, "Missing required parameter 'street' when calling DataMillApi->SearchUndeliverableContact");
            // verify the required parameter 'reason' is set
            if (reason == null)
                throw new ApiException(400, "Missing required parameter 'reason' when calling DataMillApi->SearchUndeliverableContact");

            var localVarPath = "/business-data/undeliverable-contacts/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (firstName != null) localVarFormParams.Add("first_name", Configuration.ApiClient.ParameterToString(firstName)); // form parameter
            if (lastName != null) localVarFormParams.Add("last_name", Configuration.ApiClient.ParameterToString(lastName)); // form parameter
            if (countryCode != null) localVarFormParams.Add("country_code", Configuration.ApiClient.ParameterToString(countryCode)); // form parameter
            if (zip != null) localVarFormParams.Add("zip", Configuration.ApiClient.ParameterToString(zip)); // form parameter
            if (street != null) localVarFormParams.Add("street", Configuration.ApiClient.ParameterToString(street)); // form parameter
            if (reason != null) localVarFormParams.Add("reason", Configuration.ApiClient.ParameterToString(reason)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchUndeliverableContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessDataUndeliverableContactsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessDataUndeliverableContactsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessDataUndeliverableContactsResponse)));
            
        }

        /// <summary>
        /// Find moved and deceased contacts Checks if the postal address of a person identified by its full name is invalid (moved to a new address or deceased). This function does NOT verify/check if a known postal address is still valid, instead it only checks if the person is moved to another address or is deceased and therefore a mail will result in an undeliverable state. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">The person&#39;s first name</param>
        /// <param name="lastName">The person&#39;s last name</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="zip">Last known postal code the person lives in</param>
        /// <param name="street">Last known street name the person lives in</param>
        /// <param name="reason">Free-form text written in english why you submit the query.</param>
        /// <returns>Task of BusinessDataUndeliverableContactsResponse</returns>
        public async System.Threading.Tasks.Task<BusinessDataUndeliverableContactsResponse> SearchUndeliverableContactAsync (string firstName, string lastName, string countryCode, string zip, string street, string reason)
        {
             ApiResponse<BusinessDataUndeliverableContactsResponse> localVarResponse = await SearchUndeliverableContactAsyncWithHttpInfo(firstName, lastName, countryCode, zip, street, reason);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find moved and deceased contacts Checks if the postal address of a person identified by its full name is invalid (moved to a new address or deceased). This function does NOT verify/check if a known postal address is still valid, instead it only checks if the person is moved to another address or is deceased and therefore a mail will result in an undeliverable state. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="firstName">The person&#39;s first name</param>
        /// <param name="lastName">The person&#39;s last name</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="zip">Last known postal code the person lives in</param>
        /// <param name="street">Last known street name the person lives in</param>
        /// <param name="reason">Free-form text written in english why you submit the query.</param>
        /// <returns>Task of ApiResponse (BusinessDataUndeliverableContactsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessDataUndeliverableContactsResponse>> SearchUndeliverableContactAsyncWithHttpInfo (string firstName, string lastName, string countryCode, string zip, string street, string reason)
        {
            // verify the required parameter 'firstName' is set
            if (firstName == null)
                throw new ApiException(400, "Missing required parameter 'firstName' when calling DataMillApi->SearchUndeliverableContact");
            // verify the required parameter 'lastName' is set
            if (lastName == null)
                throw new ApiException(400, "Missing required parameter 'lastName' when calling DataMillApi->SearchUndeliverableContact");
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400, "Missing required parameter 'countryCode' when calling DataMillApi->SearchUndeliverableContact");
            // verify the required parameter 'zip' is set
            if (zip == null)
                throw new ApiException(400, "Missing required parameter 'zip' when calling DataMillApi->SearchUndeliverableContact");
            // verify the required parameter 'street' is set
            if (street == null)
                throw new ApiException(400, "Missing required parameter 'street' when calling DataMillApi->SearchUndeliverableContact");
            // verify the required parameter 'reason' is set
            if (reason == null)
                throw new ApiException(400, "Missing required parameter 'reason' when calling DataMillApi->SearchUndeliverableContact");

            var localVarPath = "/business-data/undeliverable-contacts/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (firstName != null) localVarFormParams.Add("first_name", Configuration.ApiClient.ParameterToString(firstName)); // form parameter
            if (lastName != null) localVarFormParams.Add("last_name", Configuration.ApiClient.ParameterToString(lastName)); // form parameter
            if (countryCode != null) localVarFormParams.Add("country_code", Configuration.ApiClient.ParameterToString(countryCode)); // form parameter
            if (zip != null) localVarFormParams.Add("zip", Configuration.ApiClient.ParameterToString(zip)); // form parameter
            if (street != null) localVarFormParams.Add("street", Configuration.ApiClient.ParameterToString(street)); // form parameter
            if (reason != null) localVarFormParams.Add("reason", Configuration.ApiClient.ParameterToString(reason)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchUndeliverableContact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessDataUndeliverableContactsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessDataUndeliverableContactsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessDataUndeliverableContactsResponse)));
            
        }

        /// <summary>
        /// Find VAT number and company information by name Finds the VAT number and additional company information by the company&#39;s name and headquarters location. The function returns multiple results if similar companies are found in the same city. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company">The name of an company. You may enter the fully qualified name or only partial information.</param>
        /// <param name="city">The city where the company&#39;s headquarters is located. (optional)</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI**  (optional)</param>
        /// <param name="limit">The maximum amount of results returned if multiple companies are found. Default value is **10**.  (optional, default to 10)</param>
        /// <param name="minScore">Threshold to set the minimum score rate of results being returned. Default: **0.8**  (optional, default to 0.8)</param>
        /// <returns>VatSearchResponse</returns>
        public VatSearchResponse SearchVAT (string company, string city = null, string countryCode = null, string limit = null, string minScore = null)
        {
             ApiResponse<VatSearchResponse> localVarResponse = SearchVATWithHttpInfo(company, city, countryCode, limit, minScore);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find VAT number and company information by name Finds the VAT number and additional company information by the company&#39;s name and headquarters location. The function returns multiple results if similar companies are found in the same city. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company">The name of an company. You may enter the fully qualified name or only partial information.</param>
        /// <param name="city">The city where the company&#39;s headquarters is located. (optional)</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI**  (optional)</param>
        /// <param name="limit">The maximum amount of results returned if multiple companies are found. Default value is **10**.  (optional, default to 10)</param>
        /// <param name="minScore">Threshold to set the minimum score rate of results being returned. Default: **0.8**  (optional, default to 0.8)</param>
        /// <returns>ApiResponse of VatSearchResponse</returns>
        public ApiResponse< VatSearchResponse > SearchVATWithHttpInfo (string company, string city = null, string countryCode = null, string limit = null, string minScore = null)
        {
            // verify the required parameter 'company' is set
            if (company == null)
                throw new ApiException(400, "Missing required parameter 'company' when calling DataMillApi->SearchVAT");

            var localVarPath = "/vat/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (company != null) localVarFormParams.Add("company", Configuration.ApiClient.ParameterToString(company)); // form parameter
            if (city != null) localVarFormParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // form parameter
            if (countryCode != null) localVarFormParams.Add("country_code", Configuration.ApiClient.ParameterToString(countryCode)); // form parameter
            if (limit != null) localVarFormParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // form parameter
            if (minScore != null) localVarFormParams.Add("min_score", Configuration.ApiClient.ParameterToString(minScore)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchVAT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VatSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VatSearchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VatSearchResponse)));
            
        }

        /// <summary>
        /// Find VAT number and company information by name Finds the VAT number and additional company information by the company&#39;s name and headquarters location. The function returns multiple results if similar companies are found in the same city. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company">The name of an company. You may enter the fully qualified name or only partial information.</param>
        /// <param name="city">The city where the company&#39;s headquarters is located. (optional)</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI**  (optional)</param>
        /// <param name="limit">The maximum amount of results returned if multiple companies are found. Default value is **10**.  (optional, default to 10)</param>
        /// <param name="minScore">Threshold to set the minimum score rate of results being returned. Default: **0.8**  (optional, default to 0.8)</param>
        /// <returns>Task of VatSearchResponse</returns>
        public async System.Threading.Tasks.Task<VatSearchResponse> SearchVATAsync (string company, string city = null, string countryCode = null, string limit = null, string minScore = null)
        {
             ApiResponse<VatSearchResponse> localVarResponse = await SearchVATAsyncWithHttpInfo(company, city, countryCode, limit, minScore);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find VAT number and company information by name Finds the VAT number and additional company information by the company&#39;s name and headquarters location. The function returns multiple results if similar companies are found in the same city. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company">The name of an company. You may enter the fully qualified name or only partial information.</param>
        /// <param name="city">The city where the company&#39;s headquarters is located. (optional)</param>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code to specify in which country to look for. Possible countries are: **AT, BE, CZ, DK, FI, GB, GR, HU, IT, LU, MT, SI**  (optional)</param>
        /// <param name="limit">The maximum amount of results returned if multiple companies are found. Default value is **10**.  (optional, default to 10)</param>
        /// <param name="minScore">Threshold to set the minimum score rate of results being returned. Default: **0.8**  (optional, default to 0.8)</param>
        /// <returns>Task of ApiResponse (VatSearchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VatSearchResponse>> SearchVATAsyncWithHttpInfo (string company, string city = null, string countryCode = null, string limit = null, string minScore = null)
        {
            // verify the required parameter 'company' is set
            if (company == null)
                throw new ApiException(400, "Missing required parameter 'company' when calling DataMillApi->SearchVAT");

            var localVarPath = "/vat/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (company != null) localVarFormParams.Add("company", Configuration.ApiClient.ParameterToString(company)); // form parameter
            if (city != null) localVarFormParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // form parameter
            if (countryCode != null) localVarFormParams.Add("country_code", Configuration.ApiClient.ParameterToString(countryCode)); // form parameter
            if (limit != null) localVarFormParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // form parameter
            if (minScore != null) localVarFormParams.Add("min_score", Configuration.ApiClient.ParameterToString(minScore)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchVAT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VatSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VatSearchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(VatSearchResponse)));
            
        }

    }
}
