/* 
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market.  GitHub for SDKs: https://github.com/datamill-solutions 
 *
 * OpenAPI spec version: 1.6.5
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using DataMill.Client;
using DataMill.Model;

namespace DataMill.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check email syntax and mail server domain
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. In addition if the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>EmailDomainCheckResponse</returns>
        EmailDomainCheckResponse CheckEmailDomain (string email);

        /// <summary>
        /// Check email syntax and mail server domain
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. In addition if the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>ApiResponse of EmailDomainCheckResponse</returns>
        ApiResponse<EmailDomainCheckResponse> CheckEmailDomainWithHttpInfo (string email);
        /// <summary>
        /// Check email syntax, mail server domain and mailbox itself
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. If the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. Additionally the mail server will be checked if an email for the given mailbox can be received. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>EmailExtendedCheckResponse</returns>
        EmailExtendedCheckResponse CheckEmailMailbox (string email);

        /// <summary>
        /// Check email syntax, mail server domain and mailbox itself
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. If the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. Additionally the mail server will be checked if an email for the given mailbox can be received. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>ApiResponse of EmailExtendedCheckResponse</returns>
        ApiResponse<EmailExtendedCheckResponse> CheckEmailMailboxWithHttpInfo (string email);
        /// <summary>
        /// Check email syntax
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>EmailSyntaxCheckResponse</returns>
        EmailSyntaxCheckResponse CheckEmailSyntax (string email);

        /// <summary>
        /// Check email syntax
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>ApiResponse of EmailSyntaxCheckResponse</returns>
        ApiResponse<EmailSyntaxCheckResponse> CheckEmailSyntaxWithHttpInfo (string email);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Check email syntax and mail server domain
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. In addition if the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of EmailDomainCheckResponse</returns>
        System.Threading.Tasks.Task<EmailDomainCheckResponse> CheckEmailDomainAsync (string email);

        /// <summary>
        /// Check email syntax and mail server domain
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. In addition if the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of ApiResponse (EmailDomainCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailDomainCheckResponse>> CheckEmailDomainAsyncWithHttpInfo (string email);
        /// <summary>
        /// Check email syntax, mail server domain and mailbox itself
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. If the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. Additionally the mail server will be checked if an email for the given mailbox can be received. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of EmailExtendedCheckResponse</returns>
        System.Threading.Tasks.Task<EmailExtendedCheckResponse> CheckEmailMailboxAsync (string email);

        /// <summary>
        /// Check email syntax, mail server domain and mailbox itself
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. If the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. Additionally the mail server will be checked if an email for the given mailbox can be received. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of ApiResponse (EmailExtendedCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailExtendedCheckResponse>> CheckEmailMailboxAsyncWithHttpInfo (string email);
        /// <summary>
        /// Check email syntax
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of EmailSyntaxCheckResponse</returns>
        System.Threading.Tasks.Task<EmailSyntaxCheckResponse> CheckEmailSyntaxAsync (string email);

        /// <summary>
        /// Check email syntax
        /// </summary>
        /// <remarks>
        /// Checks the spelling of an email address to detect typos and spelling errors. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of ApiResponse (EmailSyntaxCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailSyntaxCheckResponse>> CheckEmailSyntaxAsyncWithHttpInfo (string email);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmailApi : IEmailApi
    {
        private DataMill.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = DataMill.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmailApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = DataMill.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DataMill.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Check email syntax and mail server domain Checks the spelling of an email address to detect typos and spelling errors. In addition if the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>EmailDomainCheckResponse</returns>
        public EmailDomainCheckResponse CheckEmailDomain (string email)
        {
             ApiResponse<EmailDomainCheckResponse> localVarResponse = CheckEmailDomainWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check email syntax and mail server domain Checks the spelling of an email address to detect typos and spelling errors. In addition if the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>ApiResponse of EmailDomainCheckResponse</returns>
        public ApiResponse< EmailDomainCheckResponse > CheckEmailDomainWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->CheckEmailDomain");

            var localVarPath = "/email/domain/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckEmailDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDomainCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDomainCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDomainCheckResponse)));
            
        }

        /// <summary>
        /// Check email syntax and mail server domain Checks the spelling of an email address to detect typos and spelling errors. In addition if the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of EmailDomainCheckResponse</returns>
        public async System.Threading.Tasks.Task<EmailDomainCheckResponse> CheckEmailDomainAsync (string email)
        {
             ApiResponse<EmailDomainCheckResponse> localVarResponse = await CheckEmailDomainAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check email syntax and mail server domain Checks the spelling of an email address to detect typos and spelling errors. In addition if the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of ApiResponse (EmailDomainCheckResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailDomainCheckResponse>> CheckEmailDomainAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->CheckEmailDomain");

            var localVarPath = "/email/domain/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckEmailDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailDomainCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailDomainCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailDomainCheckResponse)));
            
        }

        /// <summary>
        /// Check email syntax, mail server domain and mailbox itself Checks the spelling of an email address to detect typos and spelling errors. If the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. Additionally the mail server will be checked if an email for the given mailbox can be received. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>EmailExtendedCheckResponse</returns>
        public EmailExtendedCheckResponse CheckEmailMailbox (string email)
        {
             ApiResponse<EmailExtendedCheckResponse> localVarResponse = CheckEmailMailboxWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check email syntax, mail server domain and mailbox itself Checks the spelling of an email address to detect typos and spelling errors. If the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. Additionally the mail server will be checked if an email for the given mailbox can be received. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>ApiResponse of EmailExtendedCheckResponse</returns>
        public ApiResponse< EmailExtendedCheckResponse > CheckEmailMailboxWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->CheckEmailMailbox");

            var localVarPath = "/email/extended/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckEmailMailbox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailExtendedCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailExtendedCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailExtendedCheckResponse)));
            
        }

        /// <summary>
        /// Check email syntax, mail server domain and mailbox itself Checks the spelling of an email address to detect typos and spelling errors. If the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. Additionally the mail server will be checked if an email for the given mailbox can be received. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of EmailExtendedCheckResponse</returns>
        public async System.Threading.Tasks.Task<EmailExtendedCheckResponse> CheckEmailMailboxAsync (string email)
        {
             ApiResponse<EmailExtendedCheckResponse> localVarResponse = await CheckEmailMailboxAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check email syntax, mail server domain and mailbox itself Checks the spelling of an email address to detect typos and spelling errors. If the email address has a valid syntax its mail server is determined and checked for existence. The mail server itself will be compared with a list of disposable providers to detect addresses with a short lifetime. Additionally the mail server will be checked if an email for the given mailbox can be received. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of ApiResponse (EmailExtendedCheckResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailExtendedCheckResponse>> CheckEmailMailboxAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->CheckEmailMailbox");

            var localVarPath = "/email/extended/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckEmailMailbox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailExtendedCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailExtendedCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailExtendedCheckResponse)));
            
        }

        /// <summary>
        /// Check email syntax Checks the spelling of an email address to detect typos and spelling errors. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>EmailSyntaxCheckResponse</returns>
        public EmailSyntaxCheckResponse CheckEmailSyntax (string email)
        {
             ApiResponse<EmailSyntaxCheckResponse> localVarResponse = CheckEmailSyntaxWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check email syntax Checks the spelling of an email address to detect typos and spelling errors. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>ApiResponse of EmailSyntaxCheckResponse</returns>
        public ApiResponse< EmailSyntaxCheckResponse > CheckEmailSyntaxWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->CheckEmailSyntax");

            var localVarPath = "/email/syntax/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckEmailSyntax", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSyntaxCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSyntaxCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSyntaxCheckResponse)));
            
        }

        /// <summary>
        /// Check email syntax Checks the spelling of an email address to detect typos and spelling errors. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of EmailSyntaxCheckResponse</returns>
        public async System.Threading.Tasks.Task<EmailSyntaxCheckResponse> CheckEmailSyntaxAsync (string email)
        {
             ApiResponse<EmailSyntaxCheckResponse> localVarResponse = await CheckEmailSyntaxAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check email syntax Checks the spelling of an email address to detect typos and spelling errors. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">The email address to be checked</param>
        /// <returns>Task of ApiResponse (EmailSyntaxCheckResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EmailSyntaxCheckResponse>> CheckEmailSyntaxAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling EmailApi->CheckEmailSyntax");

            var localVarPath = "/email/syntax/check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (email != null) localVarFormParams.Add("email", Configuration.ApiClient.ParameterToString(email)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckEmailSyntax", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EmailSyntaxCheckResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EmailSyntaxCheckResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmailSyntaxCheckResponse)));
            
        }

    }
}
