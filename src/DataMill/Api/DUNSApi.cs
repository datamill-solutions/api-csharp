/* 
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market.  GitHub for SDKs: https://github.com/datamill-solutions 
 *
 * OpenAPI spec version: 1.6.5
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using DataMill.Client;
using DataMill.Model;

namespace DataMill.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDUNSApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get marketing information by DUNS number
        /// </summary>
        /// <remarks>
        /// Get marketing information about a company (credit rating, PAYDEX score, demographic information, ...) based on the company&#39;s D-U-N-S number. In order to get the marketing information each request requires a reason. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>BusinessDataDunsRatingResponse</returns>
        BusinessDataDunsRatingResponse GetDUNSRating (string dunsNumber, string reasonCode);

        /// <summary>
        /// Get marketing information by DUNS number
        /// </summary>
        /// <remarks>
        /// Get marketing information about a company (credit rating, PAYDEX score, demographic information, ...) based on the company&#39;s D-U-N-S number. In order to get the marketing information each request requires a reason. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>ApiResponse of BusinessDataDunsRatingResponse</returns>
        ApiResponse<BusinessDataDunsRatingResponse> GetDUNSRatingWithHttpInfo (string dunsNumber, string reasonCode);
        /// <summary>
        /// Resolve company information by DUNS number
        /// </summary>
        /// <remarks>
        /// Resolves company information (official name, postal address, annual turnover, number of employees, ...) based on  the company&#39;s D-U-N-S number. In order to get the company information each request requires a reason. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>BusinessDataDunsResolveResponse</returns>
        BusinessDataDunsResolveResponse ResolveDUNS (string dunsNumber, string reasonCode);

        /// <summary>
        /// Resolve company information by DUNS number
        /// </summary>
        /// <remarks>
        /// Resolves company information (official name, postal address, annual turnover, number of employees, ...) based on  the company&#39;s D-U-N-S number. In order to get the company information each request requires a reason. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>ApiResponse of BusinessDataDunsResolveResponse</returns>
        ApiResponse<BusinessDataDunsResolveResponse> ResolveDUNSWithHttpInfo (string dunsNumber, string reasonCode);
        /// <summary>
        /// Find DUNS number and company information by name
        /// </summary>
        /// <remarks>
        /// Finds the D-U-N-S number and additional company information by the company&#39;s name. Optionally a filter for the headquarters location can be added to get a more accurate response. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="companyName">The company name you are looking for or relevant parts of it (may be empty if the duns_number is set) (optional)</param>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information (may be empty if the company_name and country_code are set) (optional)</param>
        /// <param name="state">Filter to get only companies which matches the specified state (required for United States) (optional)</param>
        /// <param name="city">Filter to get only companies which matches the specified city (optional)</param>
        /// <param name="zip">Filter to get only companies which matches the specified postal code (optional)</param>
        /// <param name="street">Filter to get only companies which matches the specified street (optional)</param>
        /// <returns>BusinessDataDunsSearchResponse</returns>
        BusinessDataDunsSearchResponse SearchDUNS (string countryCode, string companyName = null, string dunsNumber = null, string state = null, string city = null, string zip = null, string street = null);

        /// <summary>
        /// Find DUNS number and company information by name
        /// </summary>
        /// <remarks>
        /// Finds the D-U-N-S number and additional company information by the company&#39;s name. Optionally a filter for the headquarters location can be added to get a more accurate response. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="companyName">The company name you are looking for or relevant parts of it (may be empty if the duns_number is set) (optional)</param>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information (may be empty if the company_name and country_code are set) (optional)</param>
        /// <param name="state">Filter to get only companies which matches the specified state (required for United States) (optional)</param>
        /// <param name="city">Filter to get only companies which matches the specified city (optional)</param>
        /// <param name="zip">Filter to get only companies which matches the specified postal code (optional)</param>
        /// <param name="street">Filter to get only companies which matches the specified street (optional)</param>
        /// <returns>ApiResponse of BusinessDataDunsSearchResponse</returns>
        ApiResponse<BusinessDataDunsSearchResponse> SearchDUNSWithHttpInfo (string countryCode, string companyName = null, string dunsNumber = null, string state = null, string city = null, string zip = null, string street = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get marketing information by DUNS number
        /// </summary>
        /// <remarks>
        /// Get marketing information about a company (credit rating, PAYDEX score, demographic information, ...) based on the company&#39;s D-U-N-S number. In order to get the marketing information each request requires a reason. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>Task of BusinessDataDunsRatingResponse</returns>
        System.Threading.Tasks.Task<BusinessDataDunsRatingResponse> GetDUNSRatingAsync (string dunsNumber, string reasonCode);

        /// <summary>
        /// Get marketing information by DUNS number
        /// </summary>
        /// <remarks>
        /// Get marketing information about a company (credit rating, PAYDEX score, demographic information, ...) based on the company&#39;s D-U-N-S number. In order to get the marketing information each request requires a reason. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>Task of ApiResponse (BusinessDataDunsRatingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessDataDunsRatingResponse>> GetDUNSRatingAsyncWithHttpInfo (string dunsNumber, string reasonCode);
        /// <summary>
        /// Resolve company information by DUNS number
        /// </summary>
        /// <remarks>
        /// Resolves company information (official name, postal address, annual turnover, number of employees, ...) based on  the company&#39;s D-U-N-S number. In order to get the company information each request requires a reason. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>Task of BusinessDataDunsResolveResponse</returns>
        System.Threading.Tasks.Task<BusinessDataDunsResolveResponse> ResolveDUNSAsync (string dunsNumber, string reasonCode);

        /// <summary>
        /// Resolve company information by DUNS number
        /// </summary>
        /// <remarks>
        /// Resolves company information (official name, postal address, annual turnover, number of employees, ...) based on  the company&#39;s D-U-N-S number. In order to get the company information each request requires a reason. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>Task of ApiResponse (BusinessDataDunsResolveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessDataDunsResolveResponse>> ResolveDUNSAsyncWithHttpInfo (string dunsNumber, string reasonCode);
        /// <summary>
        /// Find DUNS number and company information by name
        /// </summary>
        /// <remarks>
        /// Finds the D-U-N-S number and additional company information by the company&#39;s name. Optionally a filter for the headquarters location can be added to get a more accurate response. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="companyName">The company name you are looking for or relevant parts of it (may be empty if the duns_number is set) (optional)</param>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information (may be empty if the company_name and country_code are set) (optional)</param>
        /// <param name="state">Filter to get only companies which matches the specified state (required for United States) (optional)</param>
        /// <param name="city">Filter to get only companies which matches the specified city (optional)</param>
        /// <param name="zip">Filter to get only companies which matches the specified postal code (optional)</param>
        /// <param name="street">Filter to get only companies which matches the specified street (optional)</param>
        /// <returns>Task of BusinessDataDunsSearchResponse</returns>
        System.Threading.Tasks.Task<BusinessDataDunsSearchResponse> SearchDUNSAsync (string countryCode, string companyName = null, string dunsNumber = null, string state = null, string city = null, string zip = null, string street = null);

        /// <summary>
        /// Find DUNS number and company information by name
        /// </summary>
        /// <remarks>
        /// Finds the D-U-N-S number and additional company information by the company&#39;s name. Optionally a filter for the headquarters location can be added to get a more accurate response. 
        /// </remarks>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="companyName">The company name you are looking for or relevant parts of it (may be empty if the duns_number is set) (optional)</param>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information (may be empty if the company_name and country_code are set) (optional)</param>
        /// <param name="state">Filter to get only companies which matches the specified state (required for United States) (optional)</param>
        /// <param name="city">Filter to get only companies which matches the specified city (optional)</param>
        /// <param name="zip">Filter to get only companies which matches the specified postal code (optional)</param>
        /// <param name="street">Filter to get only companies which matches the specified street (optional)</param>
        /// <returns>Task of ApiResponse (BusinessDataDunsSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessDataDunsSearchResponse>> SearchDUNSAsyncWithHttpInfo (string countryCode, string companyName = null, string dunsNumber = null, string state = null, string city = null, string zip = null, string street = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DUNSApi : IDUNSApi
    {
        private DataMill.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DUNSApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DUNSApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = DataMill.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DUNSApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DUNSApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = DataMill.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DataMill.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get marketing information by DUNS number Get marketing information about a company (credit rating, PAYDEX score, demographic information, ...) based on the company&#39;s D-U-N-S number. In order to get the marketing information each request requires a reason. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>BusinessDataDunsRatingResponse</returns>
        public BusinessDataDunsRatingResponse GetDUNSRating (string dunsNumber, string reasonCode)
        {
             ApiResponse<BusinessDataDunsRatingResponse> localVarResponse = GetDUNSRatingWithHttpInfo(dunsNumber, reasonCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get marketing information by DUNS number Get marketing information about a company (credit rating, PAYDEX score, demographic information, ...) based on the company&#39;s D-U-N-S number. In order to get the marketing information each request requires a reason. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>ApiResponse of BusinessDataDunsRatingResponse</returns>
        public ApiResponse< BusinessDataDunsRatingResponse > GetDUNSRatingWithHttpInfo (string dunsNumber, string reasonCode)
        {
            // verify the required parameter 'dunsNumber' is set
            if (dunsNumber == null)
                throw new ApiException(400, "Missing required parameter 'dunsNumber' when calling DUNSApi->GetDUNSRating");
            // verify the required parameter 'reasonCode' is set
            if (reasonCode == null)
                throw new ApiException(400, "Missing required parameter 'reasonCode' when calling DUNSApi->GetDUNSRating");

            var localVarPath = "/business-data/duns/rating";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dunsNumber != null) localVarFormParams.Add("duns_number", Configuration.ApiClient.ParameterToString(dunsNumber)); // form parameter
            if (reasonCode != null) localVarFormParams.Add("reason_code", Configuration.ApiClient.ParameterToString(reasonCode)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDUNSRating", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessDataDunsRatingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessDataDunsRatingResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessDataDunsRatingResponse)));
            
        }

        /// <summary>
        /// Get marketing information by DUNS number Get marketing information about a company (credit rating, PAYDEX score, demographic information, ...) based on the company&#39;s D-U-N-S number. In order to get the marketing information each request requires a reason. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>Task of BusinessDataDunsRatingResponse</returns>
        public async System.Threading.Tasks.Task<BusinessDataDunsRatingResponse> GetDUNSRatingAsync (string dunsNumber, string reasonCode)
        {
             ApiResponse<BusinessDataDunsRatingResponse> localVarResponse = await GetDUNSRatingAsyncWithHttpInfo(dunsNumber, reasonCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get marketing information by DUNS number Get marketing information about a company (credit rating, PAYDEX score, demographic information, ...) based on the company&#39;s D-U-N-S number. In order to get the marketing information each request requires a reason. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>Task of ApiResponse (BusinessDataDunsRatingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessDataDunsRatingResponse>> GetDUNSRatingAsyncWithHttpInfo (string dunsNumber, string reasonCode)
        {
            // verify the required parameter 'dunsNumber' is set
            if (dunsNumber == null)
                throw new ApiException(400, "Missing required parameter 'dunsNumber' when calling DUNSApi->GetDUNSRating");
            // verify the required parameter 'reasonCode' is set
            if (reasonCode == null)
                throw new ApiException(400, "Missing required parameter 'reasonCode' when calling DUNSApi->GetDUNSRating");

            var localVarPath = "/business-data/duns/rating";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dunsNumber != null) localVarFormParams.Add("duns_number", Configuration.ApiClient.ParameterToString(dunsNumber)); // form parameter
            if (reasonCode != null) localVarFormParams.Add("reason_code", Configuration.ApiClient.ParameterToString(reasonCode)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDUNSRating", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessDataDunsRatingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessDataDunsRatingResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessDataDunsRatingResponse)));
            
        }

        /// <summary>
        /// Resolve company information by DUNS number Resolves company information (official name, postal address, annual turnover, number of employees, ...) based on  the company&#39;s D-U-N-S number. In order to get the company information each request requires a reason. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>BusinessDataDunsResolveResponse</returns>
        public BusinessDataDunsResolveResponse ResolveDUNS (string dunsNumber, string reasonCode)
        {
             ApiResponse<BusinessDataDunsResolveResponse> localVarResponse = ResolveDUNSWithHttpInfo(dunsNumber, reasonCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resolve company information by DUNS number Resolves company information (official name, postal address, annual turnover, number of employees, ...) based on  the company&#39;s D-U-N-S number. In order to get the company information each request requires a reason. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>ApiResponse of BusinessDataDunsResolveResponse</returns>
        public ApiResponse< BusinessDataDunsResolveResponse > ResolveDUNSWithHttpInfo (string dunsNumber, string reasonCode)
        {
            // verify the required parameter 'dunsNumber' is set
            if (dunsNumber == null)
                throw new ApiException(400, "Missing required parameter 'dunsNumber' when calling DUNSApi->ResolveDUNS");
            // verify the required parameter 'reasonCode' is set
            if (reasonCode == null)
                throw new ApiException(400, "Missing required parameter 'reasonCode' when calling DUNSApi->ResolveDUNS");

            var localVarPath = "/business-data/duns/resolve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dunsNumber != null) localVarFormParams.Add("duns_number", Configuration.ApiClient.ParameterToString(dunsNumber)); // form parameter
            if (reasonCode != null) localVarFormParams.Add("reason_code", Configuration.ApiClient.ParameterToString(reasonCode)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResolveDUNS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessDataDunsResolveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessDataDunsResolveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessDataDunsResolveResponse)));
            
        }

        /// <summary>
        /// Resolve company information by DUNS number Resolves company information (official name, postal address, annual turnover, number of employees, ...) based on  the company&#39;s D-U-N-S number. In order to get the company information each request requires a reason. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>Task of BusinessDataDunsResolveResponse</returns>
        public async System.Threading.Tasks.Task<BusinessDataDunsResolveResponse> ResolveDUNSAsync (string dunsNumber, string reasonCode)
        {
             ApiResponse<BusinessDataDunsResolveResponse> localVarResponse = await ResolveDUNSAsyncWithHttpInfo(dunsNumber, reasonCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resolve company information by DUNS number Resolves company information (official name, postal address, annual turnover, number of employees, ...) based on  the company&#39;s D-U-N-S number. In order to get the company information each request requires a reason. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information</param>
        /// <param name="reasonCode">Unique code describing the reason why you like to get detailed information about the specified company. Possible codes are:  * **1**: Credit decisions  * **2**: Credit check (intended business connection)  * **3**: Credit check (ongoing business connection)  * **4**: Debt collections  * **5**: Commercial credit insurance  * **6**: Insurance contract  * **7**: Leasing agreement  * **8**: Rental agreement </param>
        /// <returns>Task of ApiResponse (BusinessDataDunsResolveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessDataDunsResolveResponse>> ResolveDUNSAsyncWithHttpInfo (string dunsNumber, string reasonCode)
        {
            // verify the required parameter 'dunsNumber' is set
            if (dunsNumber == null)
                throw new ApiException(400, "Missing required parameter 'dunsNumber' when calling DUNSApi->ResolveDUNS");
            // verify the required parameter 'reasonCode' is set
            if (reasonCode == null)
                throw new ApiException(400, "Missing required parameter 'reasonCode' when calling DUNSApi->ResolveDUNS");

            var localVarPath = "/business-data/duns/resolve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dunsNumber != null) localVarFormParams.Add("duns_number", Configuration.ApiClient.ParameterToString(dunsNumber)); // form parameter
            if (reasonCode != null) localVarFormParams.Add("reason_code", Configuration.ApiClient.ParameterToString(reasonCode)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResolveDUNS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessDataDunsResolveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessDataDunsResolveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessDataDunsResolveResponse)));
            
        }

        /// <summary>
        /// Find DUNS number and company information by name Finds the D-U-N-S number and additional company information by the company&#39;s name. Optionally a filter for the headquarters location can be added to get a more accurate response. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="companyName">The company name you are looking for or relevant parts of it (may be empty if the duns_number is set) (optional)</param>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information (may be empty if the company_name and country_code are set) (optional)</param>
        /// <param name="state">Filter to get only companies which matches the specified state (required for United States) (optional)</param>
        /// <param name="city">Filter to get only companies which matches the specified city (optional)</param>
        /// <param name="zip">Filter to get only companies which matches the specified postal code (optional)</param>
        /// <param name="street">Filter to get only companies which matches the specified street (optional)</param>
        /// <returns>BusinessDataDunsSearchResponse</returns>
        public BusinessDataDunsSearchResponse SearchDUNS (string countryCode, string companyName = null, string dunsNumber = null, string state = null, string city = null, string zip = null, string street = null)
        {
             ApiResponse<BusinessDataDunsSearchResponse> localVarResponse = SearchDUNSWithHttpInfo(countryCode, companyName, dunsNumber, state, city, zip, street);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find DUNS number and company information by name Finds the D-U-N-S number and additional company information by the company&#39;s name. Optionally a filter for the headquarters location can be added to get a more accurate response. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="companyName">The company name you are looking for or relevant parts of it (may be empty if the duns_number is set) (optional)</param>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information (may be empty if the company_name and country_code are set) (optional)</param>
        /// <param name="state">Filter to get only companies which matches the specified state (required for United States) (optional)</param>
        /// <param name="city">Filter to get only companies which matches the specified city (optional)</param>
        /// <param name="zip">Filter to get only companies which matches the specified postal code (optional)</param>
        /// <param name="street">Filter to get only companies which matches the specified street (optional)</param>
        /// <returns>ApiResponse of BusinessDataDunsSearchResponse</returns>
        public ApiResponse< BusinessDataDunsSearchResponse > SearchDUNSWithHttpInfo (string countryCode, string companyName = null, string dunsNumber = null, string state = null, string city = null, string zip = null, string street = null)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400, "Missing required parameter 'countryCode' when calling DUNSApi->SearchDUNS");

            var localVarPath = "/business-data/duns/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyName != null) localVarFormParams.Add("company_name", Configuration.ApiClient.ParameterToString(companyName)); // form parameter
            if (countryCode != null) localVarFormParams.Add("country_code", Configuration.ApiClient.ParameterToString(countryCode)); // form parameter
            if (dunsNumber != null) localVarFormParams.Add("duns_number", Configuration.ApiClient.ParameterToString(dunsNumber)); // form parameter
            if (state != null) localVarFormParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (city != null) localVarFormParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // form parameter
            if (zip != null) localVarFormParams.Add("zip", Configuration.ApiClient.ParameterToString(zip)); // form parameter
            if (street != null) localVarFormParams.Add("street", Configuration.ApiClient.ParameterToString(street)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchDUNS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessDataDunsSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessDataDunsSearchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessDataDunsSearchResponse)));
            
        }

        /// <summary>
        /// Find DUNS number and company information by name Finds the D-U-N-S number and additional company information by the company&#39;s name. Optionally a filter for the headquarters location can be added to get a more accurate response. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="companyName">The company name you are looking for or relevant parts of it (may be empty if the duns_number is set) (optional)</param>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information (may be empty if the company_name and country_code are set) (optional)</param>
        /// <param name="state">Filter to get only companies which matches the specified state (required for United States) (optional)</param>
        /// <param name="city">Filter to get only companies which matches the specified city (optional)</param>
        /// <param name="zip">Filter to get only companies which matches the specified postal code (optional)</param>
        /// <param name="street">Filter to get only companies which matches the specified street (optional)</param>
        /// <returns>Task of BusinessDataDunsSearchResponse</returns>
        public async System.Threading.Tasks.Task<BusinessDataDunsSearchResponse> SearchDUNSAsync (string countryCode, string companyName = null, string dunsNumber = null, string state = null, string city = null, string zip = null, string street = null)
        {
             ApiResponse<BusinessDataDunsSearchResponse> localVarResponse = await SearchDUNSAsyncWithHttpInfo(countryCode, companyName, dunsNumber, state, city, zip, street);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find DUNS number and company information by name Finds the D-U-N-S number and additional company information by the company&#39;s name. Optionally a filter for the headquarters location can be added to get a more accurate response. 
        /// </summary>
        /// <exception cref="DataMill.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">ISO 3166-1 alpha-2 country code e.g. &#39;US&#39;. Please see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 for further information.</param>
        /// <param name="companyName">The company name you are looking for or relevant parts of it (may be empty if the duns_number is set) (optional)</param>
        /// <param name="dunsNumber">The D-U-N-S number you are looking for detailed information (may be empty if the company_name and country_code are set) (optional)</param>
        /// <param name="state">Filter to get only companies which matches the specified state (required for United States) (optional)</param>
        /// <param name="city">Filter to get only companies which matches the specified city (optional)</param>
        /// <param name="zip">Filter to get only companies which matches the specified postal code (optional)</param>
        /// <param name="street">Filter to get only companies which matches the specified street (optional)</param>
        /// <returns>Task of ApiResponse (BusinessDataDunsSearchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessDataDunsSearchResponse>> SearchDUNSAsyncWithHttpInfo (string countryCode, string companyName = null, string dunsNumber = null, string state = null, string city = null, string zip = null, string street = null)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
                throw new ApiException(400, "Missing required parameter 'countryCode' when calling DUNSApi->SearchDUNS");

            var localVarPath = "/business-data/duns/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (companyName != null) localVarFormParams.Add("company_name", Configuration.ApiClient.ParameterToString(companyName)); // form parameter
            if (countryCode != null) localVarFormParams.Add("country_code", Configuration.ApiClient.ParameterToString(countryCode)); // form parameter
            if (dunsNumber != null) localVarFormParams.Add("duns_number", Configuration.ApiClient.ParameterToString(dunsNumber)); // form parameter
            if (state != null) localVarFormParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (city != null) localVarFormParams.Add("city", Configuration.ApiClient.ParameterToString(city)); // form parameter
            if (zip != null) localVarFormParams.Add("zip", Configuration.ApiClient.ParameterToString(zip)); // form parameter
            if (street != null) localVarFormParams.Add("street", Configuration.ApiClient.ParameterToString(street)); // form parameter

            // authentication (APISecurity) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchDUNS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessDataDunsSearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BusinessDataDunsSearchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessDataDunsSearchResponse)));
            
        }

    }
}
