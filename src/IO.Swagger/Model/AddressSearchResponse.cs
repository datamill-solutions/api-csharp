/* 
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market. 
 *
 * OpenAPI spec version: 1.6.4
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Response of successful transformation request for /address/_*
    /// </summary>
    [DataContract]
    public partial class AddressSearchResponse :  IEquatable<AddressSearchResponse>, IValidatableObject
    {
        /// <summary>
        /// The most detailed address field that matches the geo-coding query. **housenumber**: the whole geo-location including the house number / building name was found. **street**: the whole geo-location excluding the house number / building name was found. Please consider if you do not provide a house number or building name in the request the most detailed address field possible will always be the street. **general**: our service could only resolve a few address parts above the street level (e.g. only country or country + city, ...). 
        /// </summary>
        /// <value>The most detailed address field that matches the geo-coding query. **housenumber**: the whole geo-location including the house number / building name was found. **street**: the whole geo-location excluding the house number / building name was found. Please consider if you do not provide a house number or building name in the request the most detailed address field possible will always be the street. **general**: our service could only resolve a few address parts above the street level (e.g. only country or country + city, ...). </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MatchlevelEnum
        {
            
            /// <summary>
            /// Enum Housenumber for "housenumber"
            /// </summary>
            [EnumMember(Value = "housenumber")]
            Housenumber,
            
            /// <summary>
            /// Enum Street for "street"
            /// </summary>
            [EnumMember(Value = "street")]
            Street,
            
            /// <summary>
            /// Enum General for "general"
            /// </summary>
            [EnumMember(Value = "general")]
            General,
            
            /// <summary>
            /// Enum  for ""
            /// </summary>
            [EnumMember(Value = "")]
            
        }

        /// <summary>
        /// The most detailed address field that matches the geo-coding query. **housenumber**: the whole geo-location including the house number / building name was found. **street**: the whole geo-location excluding the house number / building name was found. Please consider if you do not provide a house number or building name in the request the most detailed address field possible will always be the street. **general**: our service could only resolve a few address parts above the street level (e.g. only country or country + city, ...). 
        /// </summary>
        /// <value>The most detailed address field that matches the geo-coding query. **housenumber**: the whole geo-location including the house number / building name was found. **street**: the whole geo-location excluding the house number / building name was found. Please consider if you do not provide a house number or building name in the request the most detailed address field possible will always be the street. **general**: our service could only resolve a few address parts above the street level (e.g. only country or country + city, ...). </value>
        [DataMember(Name="matchlevel", EmitDefaultValue=false)]
        public MatchlevelEnum? Matchlevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressSearchResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddressSearchResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressSearchResponse" /> class.
        /// </summary>
        /// <param name="CountryIso2">ISO 3166-1 alpha-2 country code (required).</param>
        /// <param name="CountryIso3">ISO 3166-1 alpha-3 country code (required).</param>
        /// <param name="Country">Country name together with the language information (required).</param>
        /// <param name="State">State name/code together with the language information (required).</param>
        /// <param name="StateName">State name together with the language information (required).</param>
        /// <param name="StateCode">ISO 3166-2 state code (if available) (required).</param>
        /// <param name="County">County name together with the language information (if available) (required).</param>
        /// <param name="District">District name together with the language information (if available) (required).</param>
        /// <param name="Zip">Postal code (required).</param>
        /// <param name="City">City name together with the language information (required).</param>
        /// <param name="Street">Street name together with the language information (required).</param>
        /// <param name="Housenumber">House number or building name together with the language information (if available) (required).</param>
        /// <param name="AdditionalData">Additional house number information (e.g. floor, apartment, top) (required).</param>
        /// <param name="Relevance">Indicates the relevance of the result found. The higher the score the more relevant the alternative. The score is a normalized value between 0 and 100. Every typo or mismatch between the request and response data (e.g. incorrect data, abbreviation, ..) will reduce the relevance.  (required).</param>
        /// <param name="Latitude">Latitude to place a marker indicating the given location on a map (uses a dot as decimal point) (required).</param>
        /// <param name="Longitude">Longitude to place a marker indicating the given location on a map (uses a dot as decimal point) (required).</param>
        /// <param name="NavigationLatitude">Latitude of a potential route waypoint (uses a dot as decimal point) (required).</param>
        /// <param name="NavigationLongitude">Longitude of a potential route waypoint (uses a dot as decimal point) (required).</param>
        /// <param name="Matchlevel">The most detailed address field that matches the geo-coding query. **housenumber**: the whole geo-location including the house number / building name was found. **street**: the whole geo-location excluding the house number / building name was found. Please consider if you do not provide a house number or building name in the request the most detailed address field possible will always be the street. **general**: our service could only resolve a few address parts above the street level (e.g. only country or country + city, ...).  (required).</param>
        public AddressSearchResponse(string CountryIso2 = null, string CountryIso3 = null, string Country = null, string State = null, string StateName = null, string StateCode = null, string County = null, string District = null, string Zip = null, string City = null, string Street = null, string Housenumber = null, string AdditionalData = null, string Relevance = null, string Latitude = null, string Longitude = null, string NavigationLatitude = null, string NavigationLongitude = null, MatchlevelEnum? Matchlevel = null)
        {
            // to ensure "CountryIso2" is required (not null)
            if (CountryIso2 == null)
            {
                throw new InvalidDataException("CountryIso2 is a required property for AddressSearchResponse and cannot be null");
            }
            else
            {
                this.CountryIso2 = CountryIso2;
            }
            // to ensure "CountryIso3" is required (not null)
            if (CountryIso3 == null)
            {
                throw new InvalidDataException("CountryIso3 is a required property for AddressSearchResponse and cannot be null");
            }
            else
            {
                this.CountryIso3 = CountryIso3;
            }
            // to ensure "Country" is required (not null)
            if (Country == null)
            {
                throw new InvalidDataException("Country is a required property for AddressSearchResponse and cannot be null");
            }
            else
            {
                this.Country = Country;
            }
            // to ensure "State" is required (not null)
            if (State == null)
            {
                throw new InvalidDataException("State is a required property for AddressSearchResponse and cannot be null");
            }
            else
            {
                this.State = State;
            }
            // to ensure "StateName" is required (not null)
            if (StateName == null)
            {
                throw new InvalidDataException("StateName is a required property for AddressSearchResponse and cannot be null");
            }
            else
            {
                this.StateName = StateName;
            }
            // to ensure "StateCode" is required (not null)
            if (StateCode == null)
            {
                throw new InvalidDataException("StateCode is a required property for AddressSearchResponse and cannot be null");
            }
            else
            {
                this.StateCode = StateCode;
            }
            // to ensure "County" is required (not null)
            if (County == null)
            {
                throw new InvalidDataException("County is a required property for AddressSearchResponse and cannot be null");
            }
            else
            {
                this.County = County;
            }
            // to ensure "District" is required (not null)
            if (District == null)
            {
                throw new InvalidDataException("District is a required property for AddressSearchResponse and cannot be null");
            }
            else
            {
                this.District = District;
            }
            // to ensure "Zip" is required (not null)
            if (Zip == null)
            {
                throw new InvalidDataException("Zip is a required property for AddressSearchResponse and cannot be null");
            }
            else
            {
                this.Zip = Zip;
            }
            // to ensure "City" is required (not null)
            if (City == null)
            {
                throw new InvalidDataException("City is a required property for AddressSearchResponse and cannot be null");
            }
            else
            {
                this.City = City;
            }
            // to ensure "Street" is required (not null)
            if (Street == null)
            {
                throw new InvalidDataException("Street is a required property for AddressSearchResponse and cannot be null");
            }
            else
            {
                this.Street = Street;
            }
            // to ensure "Housenumber" is required (not null)
            if (Housenumber == null)
            {
                throw new InvalidDataException("Housenumber is a required property for AddressSearchResponse and cannot be null");
            }
            else
            {
                this.Housenumber = Housenumber;
            }
            // to ensure "AdditionalData" is required (not null)
            if (AdditionalData == null)
            {
                throw new InvalidDataException("AdditionalData is a required property for AddressSearchResponse and cannot be null");
            }
            else
            {
                this.AdditionalData = AdditionalData;
            }
            // to ensure "Relevance" is required (not null)
            if (Relevance == null)
            {
                throw new InvalidDataException("Relevance is a required property for AddressSearchResponse and cannot be null");
            }
            else
            {
                this.Relevance = Relevance;
            }
            // to ensure "Latitude" is required (not null)
            if (Latitude == null)
            {
                throw new InvalidDataException("Latitude is a required property for AddressSearchResponse and cannot be null");
            }
            else
            {
                this.Latitude = Latitude;
            }
            // to ensure "Longitude" is required (not null)
            if (Longitude == null)
            {
                throw new InvalidDataException("Longitude is a required property for AddressSearchResponse and cannot be null");
            }
            else
            {
                this.Longitude = Longitude;
            }
            // to ensure "NavigationLatitude" is required (not null)
            if (NavigationLatitude == null)
            {
                throw new InvalidDataException("NavigationLatitude is a required property for AddressSearchResponse and cannot be null");
            }
            else
            {
                this.NavigationLatitude = NavigationLatitude;
            }
            // to ensure "NavigationLongitude" is required (not null)
            if (NavigationLongitude == null)
            {
                throw new InvalidDataException("NavigationLongitude is a required property for AddressSearchResponse and cannot be null");
            }
            else
            {
                this.NavigationLongitude = NavigationLongitude;
            }
            // to ensure "Matchlevel" is required (not null)
            if (Matchlevel == null)
            {
                throw new InvalidDataException("Matchlevel is a required property for AddressSearchResponse and cannot be null");
            }
            else
            {
                this.Matchlevel = Matchlevel;
            }
        }
        
        /// <summary>
        /// ISO 3166-1 alpha-2 country code
        /// </summary>
        /// <value>ISO 3166-1 alpha-2 country code</value>
        [DataMember(Name="country_iso_2", EmitDefaultValue=false)]
        public string CountryIso2 { get; set; }
        /// <summary>
        /// ISO 3166-1 alpha-3 country code
        /// </summary>
        /// <value>ISO 3166-1 alpha-3 country code</value>
        [DataMember(Name="country_iso_3", EmitDefaultValue=false)]
        public string CountryIso3 { get; set; }
        /// <summary>
        /// Country name together with the language information
        /// </summary>
        /// <value>Country name together with the language information</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// State name/code together with the language information
        /// </summary>
        /// <value>State name/code together with the language information</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }
        /// <summary>
        /// State name together with the language information
        /// </summary>
        /// <value>State name together with the language information</value>
        [DataMember(Name="state_name", EmitDefaultValue=false)]
        public string StateName { get; set; }
        /// <summary>
        /// ISO 3166-2 state code (if available)
        /// </summary>
        /// <value>ISO 3166-2 state code (if available)</value>
        [DataMember(Name="state_code", EmitDefaultValue=false)]
        public string StateCode { get; set; }
        /// <summary>
        /// County name together with the language information (if available)
        /// </summary>
        /// <value>County name together with the language information (if available)</value>
        [DataMember(Name="county", EmitDefaultValue=false)]
        public string County { get; set; }
        /// <summary>
        /// District name together with the language information (if available)
        /// </summary>
        /// <value>District name together with the language information (if available)</value>
        [DataMember(Name="district", EmitDefaultValue=false)]
        public string District { get; set; }
        /// <summary>
        /// Postal code
        /// </summary>
        /// <value>Postal code</value>
        [DataMember(Name="zip", EmitDefaultValue=false)]
        public string Zip { get; set; }
        /// <summary>
        /// City name together with the language information
        /// </summary>
        /// <value>City name together with the language information</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }
        /// <summary>
        /// Street name together with the language information
        /// </summary>
        /// <value>Street name together with the language information</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }
        /// <summary>
        /// House number or building name together with the language information (if available)
        /// </summary>
        /// <value>House number or building name together with the language information (if available)</value>
        [DataMember(Name="housenumber", EmitDefaultValue=false)]
        public string Housenumber { get; set; }
        /// <summary>
        /// Additional house number information (e.g. floor, apartment, top)
        /// </summary>
        /// <value>Additional house number information (e.g. floor, apartment, top)</value>
        [DataMember(Name="additional_data", EmitDefaultValue=false)]
        public string AdditionalData { get; set; }
        /// <summary>
        /// Indicates the relevance of the result found. The higher the score the more relevant the alternative. The score is a normalized value between 0 and 100. Every typo or mismatch between the request and response data (e.g. incorrect data, abbreviation, ..) will reduce the relevance. 
        /// </summary>
        /// <value>Indicates the relevance of the result found. The higher the score the more relevant the alternative. The score is a normalized value between 0 and 100. Every typo or mismatch between the request and response data (e.g. incorrect data, abbreviation, ..) will reduce the relevance. </value>
        [DataMember(Name="relevance", EmitDefaultValue=false)]
        public string Relevance { get; set; }
        /// <summary>
        /// Latitude to place a marker indicating the given location on a map (uses a dot as decimal point)
        /// </summary>
        /// <value>Latitude to place a marker indicating the given location on a map (uses a dot as decimal point)</value>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public string Latitude { get; set; }
        /// <summary>
        /// Longitude to place a marker indicating the given location on a map (uses a dot as decimal point)
        /// </summary>
        /// <value>Longitude to place a marker indicating the given location on a map (uses a dot as decimal point)</value>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public string Longitude { get; set; }
        /// <summary>
        /// Latitude of a potential route waypoint (uses a dot as decimal point)
        /// </summary>
        /// <value>Latitude of a potential route waypoint (uses a dot as decimal point)</value>
        [DataMember(Name="navigation_latitude", EmitDefaultValue=false)]
        public string NavigationLatitude { get; set; }
        /// <summary>
        /// Longitude of a potential route waypoint (uses a dot as decimal point)
        /// </summary>
        /// <value>Longitude of a potential route waypoint (uses a dot as decimal point)</value>
        [DataMember(Name="navigation_longitude", EmitDefaultValue=false)]
        public string NavigationLongitude { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressSearchResponse {\n");
            sb.Append("  CountryIso2: ").Append(CountryIso2).Append("\n");
            sb.Append("  CountryIso3: ").Append(CountryIso3).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StateName: ").Append(StateName).Append("\n");
            sb.Append("  StateCode: ").Append(StateCode).Append("\n");
            sb.Append("  County: ").Append(County).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Housenumber: ").Append(Housenumber).Append("\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  Relevance: ").Append(Relevance).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  NavigationLatitude: ").Append(NavigationLatitude).Append("\n");
            sb.Append("  NavigationLongitude: ").Append(NavigationLongitude).Append("\n");
            sb.Append("  Matchlevel: ").Append(Matchlevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AddressSearchResponse);
        }

        /// <summary>
        /// Returns true if AddressSearchResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of AddressSearchResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressSearchResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CountryIso2 == other.CountryIso2 ||
                    this.CountryIso2 != null &&
                    this.CountryIso2.Equals(other.CountryIso2)
                ) && 
                (
                    this.CountryIso3 == other.CountryIso3 ||
                    this.CountryIso3 != null &&
                    this.CountryIso3.Equals(other.CountryIso3)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.StateName == other.StateName ||
                    this.StateName != null &&
                    this.StateName.Equals(other.StateName)
                ) && 
                (
                    this.StateCode == other.StateCode ||
                    this.StateCode != null &&
                    this.StateCode.Equals(other.StateCode)
                ) && 
                (
                    this.County == other.County ||
                    this.County != null &&
                    this.County.Equals(other.County)
                ) && 
                (
                    this.District == other.District ||
                    this.District != null &&
                    this.District.Equals(other.District)
                ) && 
                (
                    this.Zip == other.Zip ||
                    this.Zip != null &&
                    this.Zip.Equals(other.Zip)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.Street == other.Street ||
                    this.Street != null &&
                    this.Street.Equals(other.Street)
                ) && 
                (
                    this.Housenumber == other.Housenumber ||
                    this.Housenumber != null &&
                    this.Housenumber.Equals(other.Housenumber)
                ) && 
                (
                    this.AdditionalData == other.AdditionalData ||
                    this.AdditionalData != null &&
                    this.AdditionalData.Equals(other.AdditionalData)
                ) && 
                (
                    this.Relevance == other.Relevance ||
                    this.Relevance != null &&
                    this.Relevance.Equals(other.Relevance)
                ) && 
                (
                    this.Latitude == other.Latitude ||
                    this.Latitude != null &&
                    this.Latitude.Equals(other.Latitude)
                ) && 
                (
                    this.Longitude == other.Longitude ||
                    this.Longitude != null &&
                    this.Longitude.Equals(other.Longitude)
                ) && 
                (
                    this.NavigationLatitude == other.NavigationLatitude ||
                    this.NavigationLatitude != null &&
                    this.NavigationLatitude.Equals(other.NavigationLatitude)
                ) && 
                (
                    this.NavigationLongitude == other.NavigationLongitude ||
                    this.NavigationLongitude != null &&
                    this.NavigationLongitude.Equals(other.NavigationLongitude)
                ) && 
                (
                    this.Matchlevel == other.Matchlevel ||
                    this.Matchlevel != null &&
                    this.Matchlevel.Equals(other.Matchlevel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CountryIso2 != null)
                    hash = hash * 59 + this.CountryIso2.GetHashCode();
                if (this.CountryIso3 != null)
                    hash = hash * 59 + this.CountryIso3.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.StateName != null)
                    hash = hash * 59 + this.StateName.GetHashCode();
                if (this.StateCode != null)
                    hash = hash * 59 + this.StateCode.GetHashCode();
                if (this.County != null)
                    hash = hash * 59 + this.County.GetHashCode();
                if (this.District != null)
                    hash = hash * 59 + this.District.GetHashCode();
                if (this.Zip != null)
                    hash = hash * 59 + this.Zip.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.Street != null)
                    hash = hash * 59 + this.Street.GetHashCode();
                if (this.Housenumber != null)
                    hash = hash * 59 + this.Housenumber.GetHashCode();
                if (this.AdditionalData != null)
                    hash = hash * 59 + this.AdditionalData.GetHashCode();
                if (this.Relevance != null)
                    hash = hash * 59 + this.Relevance.GetHashCode();
                if (this.Latitude != null)
                    hash = hash * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hash = hash * 59 + this.Longitude.GetHashCode();
                if (this.NavigationLatitude != null)
                    hash = hash * 59 + this.NavigationLatitude.GetHashCode();
                if (this.NavigationLongitude != null)
                    hash = hash * 59 + this.NavigationLongitude.GetHashCode();
                if (this.Matchlevel != null)
                    hash = hash * 59 + this.Matchlevel.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
