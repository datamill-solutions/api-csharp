/* 
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market. 
 *
 * OpenAPI spec version: 1.6.4
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Response of successful transformation request for /phone/mobile/check
    /// </summary>
    [DataContract]
    public partial class PhoneMobileCheckResponse :  IEquatable<PhoneMobileCheckResponse>, IValidatableObject
    {
        /// <summary>
        /// Flag if the mobile phone number is either valid and active, valid but disabled (out of network coverage), has an invalid syntax /is unreachable, or not a mobile phone number type: **valid**: the mobile phone number is valid, **inactive**: the mobile phone number is valid but out of network coverage or is turned off, **invalid**: the mobile phone number is invalid or unreachable, **no mobile number**: the phone number is not a mobile phone number, **unknown**: the phone number could not be verified 
        /// </summary>
        /// <value>Flag if the mobile phone number is either valid and active, valid but disabled (out of network coverage), has an invalid syntax /is unreachable, or not a mobile phone number type: **valid**: the mobile phone number is valid, **inactive**: the mobile phone number is valid but out of network coverage or is turned off, **invalid**: the mobile phone number is invalid or unreachable, **no mobile number**: the phone number is not a mobile phone number, **unknown**: the phone number could not be verified </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Valid for "valid"
            /// </summary>
            [EnumMember(Value = "valid")]
            Valid,
            
            /// <summary>
            /// Enum Invalid for "invalid"
            /// </summary>
            [EnumMember(Value = "invalid")]
            Invalid,
            
            /// <summary>
            /// Enum Unknown for "unknown"
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown,
            
            /// <summary>
            /// Enum Nomobilenumber for "no mobile number"
            /// </summary>
            [EnumMember(Value = "no mobile number")]
            Nomobilenumber
        }

        /// <summary>
        /// Flag if the mobile phone number is either valid and active, valid but disabled (out of network coverage), has an invalid syntax /is unreachable, or not a mobile phone number type: **valid**: the mobile phone number is valid, **inactive**: the mobile phone number is valid but out of network coverage or is turned off, **invalid**: the mobile phone number is invalid or unreachable, **no mobile number**: the phone number is not a mobile phone number, **unknown**: the phone number could not be verified 
        /// </summary>
        /// <value>Flag if the mobile phone number is either valid and active, valid but disabled (out of network coverage), has an invalid syntax /is unreachable, or not a mobile phone number type: **valid**: the mobile phone number is valid, **inactive**: the mobile phone number is valid but out of network coverage or is turned off, **invalid**: the mobile phone number is invalid or unreachable, **no mobile number**: the phone number is not a mobile phone number, **unknown**: the phone number could not be verified </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneMobileCheckResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PhoneMobileCheckResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneMobileCheckResponse" /> class.
        /// </summary>
        /// <param name="Phonenumber">Phone number formatted to the canonical form if valid (required).</param>
        /// <param name="Status">Flag if the mobile phone number is either valid and active, valid but disabled (out of network coverage), has an invalid syntax /is unreachable, or not a mobile phone number type: **valid**: the mobile phone number is valid, **inactive**: the mobile phone number is valid but out of network coverage or is turned off, **invalid**: the mobile phone number is invalid or unreachable, **no mobile number**: the phone number is not a mobile phone number, **unknown**: the phone number could not be verified  (required).</param>
        public PhoneMobileCheckResponse(string Phonenumber = null, StatusEnum? Status = null)
        {
            // to ensure "Phonenumber" is required (not null)
            if (Phonenumber == null)
            {
                throw new InvalidDataException("Phonenumber is a required property for PhoneMobileCheckResponse and cannot be null");
            }
            else
            {
                this.Phonenumber = Phonenumber;
            }
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for PhoneMobileCheckResponse and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
        }
        
        /// <summary>
        /// Phone number formatted to the canonical form if valid
        /// </summary>
        /// <value>Phone number formatted to the canonical form if valid</value>
        [DataMember(Name="phonenumber", EmitDefaultValue=false)]
        public string Phonenumber { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhoneMobileCheckResponse {\n");
            sb.Append("  Phonenumber: ").Append(Phonenumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PhoneMobileCheckResponse);
        }

        /// <summary>
        /// Returns true if PhoneMobileCheckResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of PhoneMobileCheckResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhoneMobileCheckResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Phonenumber == other.Phonenumber ||
                    this.Phonenumber != null &&
                    this.Phonenumber.Equals(other.Phonenumber)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Phonenumber != null)
                    hash = hash * 59 + this.Phonenumber.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
