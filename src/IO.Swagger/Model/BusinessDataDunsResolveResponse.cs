/* 
 * /data.mill for applications
 *
 * **&#47;data.mill for applications** is the most versatile and powerful API for all aspects of data quality in your business application.  Use **&#47;data.mill** to check, correct and enrich personal data and business information. The internationally applicable functions can be integrated easily into existing applications, whether desktop, online or mobile and thus enable you to professionally improve your customer or supplier database, directly in your system. Due to **&#47;data.mill**'s pay-per-use credit model there are no setup fees or fixed monthly subscription fees.  **&#47;data.mill** is constantly evolving and upgraded with the latest technology and data services available on the market. 
 *
 * OpenAPI spec version: 1.6.4
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Response of successful transformation request for /business-data/duns/resolve
    /// </summary>
    [DataContract]
    public partial class BusinessDataDunsResolveResponse :  IEquatable<BusinessDataDunsResolveResponse>, IValidatableObject
    {
        /// <summary>
        /// Flag if a company was found by its D-U-N-S number or not [**0*, **1**]
        /// </summary>
        /// <value>Flag if a company was found by its D-U-N-S number or not [**0*, **1**]</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum _0 for "0"
            /// </summary>
            [EnumMember(Value = "0")]
            _0,
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1
        }

        /// <summary>
        /// Describes if a company was found or if the specified D-U-N-S number could not be resolved. Possible values are: **company not found**, **company found**, **invalid duns number** 
        /// </summary>
        /// <value>Describes if a company was found or if the specified D-U-N-S number could not be resolved. Possible values are: **company not found**, **company found**, **invalid duns number** </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusDescriptionEnum
        {
            
            /// <summary>
            /// Enum Companyfound for "company found"
            /// </summary>
            [EnumMember(Value = "company found")]
            Companyfound,
            
            /// <summary>
            /// Enum Companynotfound for "company not found"
            /// </summary>
            [EnumMember(Value = "company not found")]
            Companynotfound,
            
            /// <summary>
            /// Enum Invaliddunsnumber for "invalid duns number"
            /// </summary>
            [EnumMember(Value = "invalid duns number")]
            Invaliddunsnumber
        }

        /// <summary>
        /// Indicator if the annual turnover is an approximated or exact value: **<empty value>**: not available, **0**: exact value, **1**: low end of range, **2**: approximated, **3**: modeled value 
        /// </summary>
        /// <value>Indicator if the annual turnover is an approximated or exact value: **<empty value>**: not available, **0**: exact value, **1**: low end of range, **2**: approximated, **3**: modeled value </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AnnualTurnoverIndicatorCodeEnum
        {
            
            /// <summary>
            /// Enum  for ""
            /// </summary>
            [EnumMember(Value = "")]
            ,
            
            /// <summary>
            /// Enum _0 for "0"
            /// </summary>
            [EnumMember(Value = "0")]
            _0,
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1,
            
            /// <summary>
            /// Enum _2 for "2"
            /// </summary>
            [EnumMember(Value = "2")]
            _2,
            
            /// <summary>
            /// Enum _3 for "3"
            /// </summary>
            [EnumMember(Value = "3")]
            _3
        }

        /// <summary>
        /// Indicator if the company / branch can be used for marketing purposes: **1**: not marketable, but listed, **2**: not marketable and not listed, **3**: marketable and listed 
        /// </summary>
        /// <value>Indicator if the company / branch can be used for marketing purposes: **1**: not marketable, but listed, **2**: not marketable and not listed, **3**: marketable and listed </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MarketabilityCodeEnum
        {
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1,
            
            /// <summary>
            /// Enum _2 for "2"
            /// </summary>
            [EnumMember(Value = "2")]
            _2,
            
            /// <summary>
            /// Enum _3 for "3"
            /// </summary>
            [EnumMember(Value = "3")]
            _3
        }

        /// <summary>
        /// Indicator if the total number of employees is an approximated or exact value: **0**: exact value, **1**: low end of range, **2**: approximated 
        /// </summary>
        /// <value>Indicator if the total number of employees is an approximated or exact value: **0**: exact value, **1**: low end of range, **2**: approximated </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TotalEmployeesIndicatorEnum
        {
            
            /// <summary>
            /// Enum _0 for "0"
            /// </summary>
            [EnumMember(Value = "0")]
            _0,
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1,
            
            /// <summary>
            /// Enum _2 for "2"
            /// </summary>
            [EnumMember(Value = "2")]
            _2
        }

        /// <summary>
        /// Indicator if the total number of employees (working at the company's headquarters) is an approximated or exact value: **<empty value>**: not available, **0**: exact value, **1**: low end of range, **2**: approximated or not available if the number of employees at this location is zero, **3**: modeled value 
        /// </summary>
        /// <value>Indicator if the total number of employees (working at the company's headquarters) is an approximated or exact value: **<empty value>**: not available, **0**: exact value, **1**: low end of range, **2**: approximated or not available if the number of employees at this location is zero, **3**: modeled value </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TotalEmployeesPhysicalAddressIndicatorEnum
        {
            
            /// <summary>
            /// Enum _0 for "0"
            /// </summary>
            [EnumMember(Value = "0")]
            _0,
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1,
            
            /// <summary>
            /// Enum _2 for "2"
            /// </summary>
            [EnumMember(Value = "2")]
            _2,
            
            /// <summary>
            /// Enum _3 for "3"
            /// </summary>
            [EnumMember(Value = "3")]
            _3,
            
            /// <summary>
            /// Enum  for ""
            /// </summary>
            [EnumMember(Value = "")]
            
        }

        /// <summary>
        /// Indicator if the company has an import and/or export trade: **<empty value>**: not available, **A**: import / export / agent, **B**: imports and exports, **C**: imports, **D**: imports and agents, **E**: exports and agents, **F**: agents, keeps no inventory, does not take title goods, **G**: not available or none, **H**: exports 
        /// </summary>
        /// <value>Indicator if the company has an import and/or export trade: **<empty value>**: not available, **A**: import / export / agent, **B**: imports and exports, **C**: imports, **D**: imports and agents, **E**: exports and agents, **F**: agents, keeps no inventory, does not take title goods, **G**: not available or none, **H**: exports </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ImportExportIndicatorEnum
        {
            
            /// <summary>
            /// Enum  for ""
            /// </summary>
            [EnumMember(Value = "")]
            ,
            
            /// <summary>
            /// Enum A for "A"
            /// </summary>
            [EnumMember(Value = "A")]
            A,
            
            /// <summary>
            /// Enum B for "B"
            /// </summary>
            [EnumMember(Value = "B")]
            B,
            
            /// <summary>
            /// Enum C for "C"
            /// </summary>
            [EnumMember(Value = "C")]
            C,
            
            /// <summary>
            /// Enum D for "D"
            /// </summary>
            [EnumMember(Value = "D")]
            D,
            
            /// <summary>
            /// Enum E for "E"
            /// </summary>
            [EnumMember(Value = "E")]
            E,
            
            /// <summary>
            /// Enum F for "F"
            /// </summary>
            [EnumMember(Value = "F")]
            F,
            
            /// <summary>
            /// Enum G for "G"
            /// </summary>
            [EnumMember(Value = "G")]
            G,
            
            /// <summary>
            /// Enum H for "H"
            /// </summary>
            [EnumMember(Value = "H")]
            H
        }

        /// <summary>
        /// Code of the company's business structure: **<empty value>**: not available, **0**: single location, **1**: headquarter, **2**: branch, **4**: division, 
        /// </summary>
        /// <value>Code of the company's business structure: **<empty value>**: not available, **0**: single location, **1**: headquarter, **2**: branch, **4**: division, </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BusinessStructureCodeEnum
        {
            
            /// <summary>
            /// Enum  for ""
            /// </summary>
            [EnumMember(Value = "")]
            ,
            
            /// <summary>
            /// Enum _0 for "0"
            /// </summary>
            [EnumMember(Value = "0")]
            _0,
            
            /// <summary>
            /// Enum _1 for "1"
            /// </summary>
            [EnumMember(Value = "1")]
            _1,
            
            /// <summary>
            /// Enum _2 for "2"
            /// </summary>
            [EnumMember(Value = "2")]
            _2,
            
            /// <summary>
            /// Enum _4 for "4"
            /// </summary>
            [EnumMember(Value = "4")]
            _4
        }

        /// <summary>
        /// Indicator if any of the company's information are undeliverable: **B**: both addresses are undeliverable, **M**: mail address is undeliverable, **N**: no nixie indication, **P**: physical address undeliverable, **Y**: one of the addresses is undeliverable 
        /// </summary>
        /// <value>Indicator if any of the company's information are undeliverable: **B**: both addresses are undeliverable, **M**: mail address is undeliverable, **N**: no nixie indication, **P**: physical address undeliverable, **Y**: one of the addresses is undeliverable </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UndeliverableIndicatorEnum
        {
            
            /// <summary>
            /// Enum B for "B"
            /// </summary>
            [EnumMember(Value = "B")]
            B,
            
            /// <summary>
            /// Enum M for "M"
            /// </summary>
            [EnumMember(Value = "M")]
            M,
            
            /// <summary>
            /// Enum N for "N"
            /// </summary>
            [EnumMember(Value = "N")]
            N,
            
            /// <summary>
            /// Enum P for "P"
            /// </summary>
            [EnumMember(Value = "P")]
            P,
            
            /// <summary>
            /// Enum Y for "Y"
            /// </summary>
            [EnumMember(Value = "Y")]
            Y
        }

        /// <summary>
        /// Flag if a company was found by its D-U-N-S number or not [**0*, **1**]
        /// </summary>
        /// <value>Flag if a company was found by its D-U-N-S number or not [**0*, **1**]</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Describes if a company was found or if the specified D-U-N-S number could not be resolved. Possible values are: **company not found**, **company found**, **invalid duns number** 
        /// </summary>
        /// <value>Describes if a company was found or if the specified D-U-N-S number could not be resolved. Possible values are: **company not found**, **company found**, **invalid duns number** </value>
        [DataMember(Name="status_description", EmitDefaultValue=false)]
        public StatusDescriptionEnum? StatusDescription { get; set; }
        /// <summary>
        /// Indicator if the annual turnover is an approximated or exact value: **<empty value>**: not available, **0**: exact value, **1**: low end of range, **2**: approximated, **3**: modeled value 
        /// </summary>
        /// <value>Indicator if the annual turnover is an approximated or exact value: **<empty value>**: not available, **0**: exact value, **1**: low end of range, **2**: approximated, **3**: modeled value </value>
        [DataMember(Name="annual_turnover_indicator_code", EmitDefaultValue=false)]
        public AnnualTurnoverIndicatorCodeEnum? AnnualTurnoverIndicatorCode { get; set; }
        /// <summary>
        /// Indicator if the company / branch can be used for marketing purposes: **1**: not marketable, but listed, **2**: not marketable and not listed, **3**: marketable and listed 
        /// </summary>
        /// <value>Indicator if the company / branch can be used for marketing purposes: **1**: not marketable, but listed, **2**: not marketable and not listed, **3**: marketable and listed </value>
        [DataMember(Name="marketability_code", EmitDefaultValue=false)]
        public MarketabilityCodeEnum? MarketabilityCode { get; set; }
        /// <summary>
        /// Indicator if the total number of employees is an approximated or exact value: **0**: exact value, **1**: low end of range, **2**: approximated 
        /// </summary>
        /// <value>Indicator if the total number of employees is an approximated or exact value: **0**: exact value, **1**: low end of range, **2**: approximated </value>
        [DataMember(Name="total_employees_indicator", EmitDefaultValue=false)]
        public TotalEmployeesIndicatorEnum? TotalEmployeesIndicator { get; set; }
        /// <summary>
        /// Indicator if the total number of employees (working at the company's headquarters) is an approximated or exact value: **<empty value>**: not available, **0**: exact value, **1**: low end of range, **2**: approximated or not available if the number of employees at this location is zero, **3**: modeled value 
        /// </summary>
        /// <value>Indicator if the total number of employees (working at the company's headquarters) is an approximated or exact value: **<empty value>**: not available, **0**: exact value, **1**: low end of range, **2**: approximated or not available if the number of employees at this location is zero, **3**: modeled value </value>
        [DataMember(Name="total_employees_physical_address_indicator", EmitDefaultValue=false)]
        public TotalEmployeesPhysicalAddressIndicatorEnum? TotalEmployeesPhysicalAddressIndicator { get; set; }
        /// <summary>
        /// Indicator if the company has an import and/or export trade: **<empty value>**: not available, **A**: import / export / agent, **B**: imports and exports, **C**: imports, **D**: imports and agents, **E**: exports and agents, **F**: agents, keeps no inventory, does not take title goods, **G**: not available or none, **H**: exports 
        /// </summary>
        /// <value>Indicator if the company has an import and/or export trade: **<empty value>**: not available, **A**: import / export / agent, **B**: imports and exports, **C**: imports, **D**: imports and agents, **E**: exports and agents, **F**: agents, keeps no inventory, does not take title goods, **G**: not available or none, **H**: exports </value>
        [DataMember(Name="import_export_indicator", EmitDefaultValue=false)]
        public ImportExportIndicatorEnum? ImportExportIndicator { get; set; }
        /// <summary>
        /// Code of the company's business structure: **<empty value>**: not available, **0**: single location, **1**: headquarter, **2**: branch, **4**: division, 
        /// </summary>
        /// <value>Code of the company's business structure: **<empty value>**: not available, **0**: single location, **1**: headquarter, **2**: branch, **4**: division, </value>
        [DataMember(Name="business_structure_code", EmitDefaultValue=false)]
        public BusinessStructureCodeEnum? BusinessStructureCode { get; set; }
        /// <summary>
        /// Indicator if any of the company's information are undeliverable: **B**: both addresses are undeliverable, **M**: mail address is undeliverable, **N**: no nixie indication, **P**: physical address undeliverable, **Y**: one of the addresses is undeliverable 
        /// </summary>
        /// <value>Indicator if any of the company's information are undeliverable: **B**: both addresses are undeliverable, **M**: mail address is undeliverable, **N**: no nixie indication, **P**: physical address undeliverable, **Y**: one of the addresses is undeliverable </value>
        [DataMember(Name="undeliverable_indicator", EmitDefaultValue=false)]
        public UndeliverableIndicatorEnum? UndeliverableIndicator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessDataDunsResolveResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BusinessDataDunsResolveResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessDataDunsResolveResponse" /> class.
        /// </summary>
        /// <param name="Status">Flag if a company was found by its D-U-N-S number or not [**0*, **1**] (required).</param>
        /// <param name="StatusDescription">Describes if a company was found or if the specified D-U-N-S number could not be resolved. Possible values are: **company not found**, **company found**, **invalid duns number**  (required).</param>
        /// <param name="CompanyName">The company&#39;s official name.</param>
        /// <param name="CompanyName2">The company&#39;s second name or \&quot;doing business as\&quot;.</param>
        /// <param name="ContinentName">Continent name of the company&#39;s headquarters.</param>
        /// <param name="CountryCode">ISO 3166-1 alpha-2 country code of the company&#39;s headquarters.</param>
        /// <param name="CountryCode3">ISO 3166-1 alpha-3 country code of the company&#39;s headquarters.</param>
        /// <param name="Zip">Postal code of the company&#39;s headquarters.</param>
        /// <param name="City">City of the company&#39;s headquarters.</param>
        /// <param name="Street">Street name of the company&#39;s headquarters.</param>
        /// <param name="HouseNumber">House number of the company&#39;s headquarters.</param>
        /// <param name="PhoneNumber">Phone number of the company&#39;s headquarters.</param>
        /// <param name="FaxNumber">Fax number of the company&#39;s headquarters.</param>
        /// <param name="StateName">State name of the company&#39;s headquarters.</param>
        /// <param name="StateCode">ISO 3166-2 state code of the company&#39;s headquarters.</param>
        /// <param name="CeoName">Name of the company&#39;s CEO (Chief Executive Officer).</param>
        /// <param name="CeoTitle">Position / Business title of the company&#39;s CEO.</param>
        /// <param name="CeoSecondary">Collection of names of further CEOs.</param>
        /// <param name="SicCode">The company&#39;s international SIC (Standard Industrial Classification) code.</param>
        /// <param name="SicDescription">Description of the SIC code.</param>
        /// <param name="YearStarted">Year of establishment.</param>
        /// <param name="AnnualTurnoverLocalCurrency">The company&#39;s annual turnover in its local currency (may be NULL if unset).</param>
        /// <param name="AnnualTurnoverIndicatorCode">Indicator if the annual turnover is an approximated or exact value: **&lt;empty value&gt;**: not available, **0**: exact value, **1**: low end of range, **2**: approximated, **3**: modeled value .</param>
        /// <param name="AnnualTurnoverIndicatorDescription">Description of the annual turnover indicator.</param>
        /// <param name="AnnualTurnoverUsd">The company&#39;s annual turnover in US Dollar (may be NULL if unset).</param>
        /// <param name="NetIncome">The company&#39;s net income in its local currency (may be NULL if unset).</param>
        /// <param name="NetIncomeUsd">The company&#39;s net income in US Dollar (may be NULL if unset).</param>
        /// <param name="NetWorth">The company&#39;s net worth (net value) in its local currency (may be NULL if unset).</param>
        /// <param name="NetWorthUsd">The company&#39;s net worth (net value) in US Dollar (may be NULL if unset).</param>
        /// <param name="CurrencyCode">The local currency code of the company&#39;s headquarters country (3-letter ISO 4217 currency code).</param>
        /// <param name="CurrencyName">The local currency name of the company&#39;s headquarters country.</param>
        /// <param name="MarketabilityCode">Indicator if the company / branch can be used for marketing purposes: **1**: not marketable, but listed, **2**: not marketable and not listed, **3**: marketable and listed .</param>
        /// <param name="MarketabilityDescription">Description of the marketable indicator value.</param>
        /// <param name="TotalEmployees">The total number of employees (may be NULL if unset).</param>
        /// <param name="TotalEmployeesIndicator">Indicator if the total number of employees is an approximated or exact value: **0**: exact value, **1**: low end of range, **2**: approximated .</param>
        /// <param name="TotalEmployeesIndicatorDescription">Description of the total number of employees indicator.</param>
        /// <param name="TotalEmployeesPhysicalAddress">The total number of employees working at the company&#39;s headquarters (may be NULL if unset).</param>
        /// <param name="TotalEmployeesPhysicalAddressIndicator">Indicator if the total number of employees (working at the company&#39;s headquarters) is an approximated or exact value: **&lt;empty value&gt;**: not available, **0**: exact value, **1**: low end of range, **2**: approximated or not available if the number of employees at this location is zero, **3**: modeled value .</param>
        /// <param name="ImportExportIndicator">Indicator if the company has an import and/or export trade: **&lt;empty value&gt;**: not available, **A**: import / export / agent, **B**: imports and exports, **C**: imports, **D**: imports and agents, **E**: exports and agents, **F**: agents, keeps no inventory, does not take title goods, **G**: not available or none, **H**: exports .</param>
        /// <param name="ImportExportIndicatorDescription">Description of the import/export indicator.</param>
        /// <param name="LegalFormCode">Code of the company&#39;s legal form (may be NULL if unset).</param>
        /// <param name="LegalFormDescription">Description of the legal form code.</param>
        /// <param name="BusinessStructureCode">Code of the company&#39;s business structure: **&lt;empty value&gt;**: not available, **0**: single location, **1**: headquarter, **2**: branch, **4**: division, .</param>
        /// <param name="BusinessStructureDescription">Description of the business structure code.</param>
        /// <param name="BusinessRegistrationNumberCode">Unique code describing the national registration id.</param>
        /// <param name="BusinessRegistrationNumberCodeDescription">Friendly name of the business registration number code.</param>
        /// <param name="UndeliverableIndicator">Indicator if any of the company&#39;s information are undeliverable: **B**: both addresses are undeliverable, **M**: mail address is undeliverable, **N**: no nixie indication, **P**: physical address undeliverable, **Y**: one of the addresses is undeliverable .</param>
        /// <param name="UndeliverableDescription">Description of the undeliverable indicator.</param>
        /// <param name="FinancialStatementDate">Timestamp when the financial information were updated the last time (may be full year only or full date with day, month and year).</param>
        /// <param name="ReportDate">Timestamp when the company&#39;s information were updated the last time (may be full year only or full date with day, month and year).</param>
        /// <param name="IsOnlyAvailableAddress">Flag if this postal address is the only address available for the company.</param>
        /// <param name="IsSubsidiary">Flag if this postal address is a subsidiary of the company.</param>
        /// <param name="TotalEmployeesIncludingPrincipalsIndicator">Flag if the total number of employees includes principals.</param>
        /// <param name="IsOutOfBusiness">Flag if the company is already out of business.</param>
        public BusinessDataDunsResolveResponse(StatusEnum? Status = null, StatusDescriptionEnum? StatusDescription = null, string CompanyName = null, string CompanyName2 = null, string ContinentName = null, string CountryCode = null, string CountryCode3 = null, string Zip = null, string City = null, string Street = null, string HouseNumber = null, string PhoneNumber = null, string FaxNumber = null, string StateName = null, string StateCode = null, string CeoName = null, string CeoTitle = null, List<string> CeoSecondary = null, string SicCode = null, string SicDescription = null, string YearStarted = null, long? AnnualTurnoverLocalCurrency = null, AnnualTurnoverIndicatorCodeEnum? AnnualTurnoverIndicatorCode = null, string AnnualTurnoverIndicatorDescription = null, long? AnnualTurnoverUsd = null, long? NetIncome = null, long? NetIncomeUsd = null, long? NetWorth = null, long? NetWorthUsd = null, string CurrencyCode = null, string CurrencyName = null, MarketabilityCodeEnum? MarketabilityCode = null, string MarketabilityDescription = null, long? TotalEmployees = null, TotalEmployeesIndicatorEnum? TotalEmployeesIndicator = null, string TotalEmployeesIndicatorDescription = null, long? TotalEmployeesPhysicalAddress = null, TotalEmployeesPhysicalAddressIndicatorEnum? TotalEmployeesPhysicalAddressIndicator = null, ImportExportIndicatorEnum? ImportExportIndicator = null, string ImportExportIndicatorDescription = null, long? LegalFormCode = null, string LegalFormDescription = null, BusinessStructureCodeEnum? BusinessStructureCode = null, string BusinessStructureDescription = null, string BusinessRegistrationNumberCode = null, string BusinessRegistrationNumberCodeDescription = null, UndeliverableIndicatorEnum? UndeliverableIndicator = null, string UndeliverableDescription = null, DateTime? FinancialStatementDate = null, DateTime? ReportDate = null, bool? IsOnlyAvailableAddress = null, bool? IsSubsidiary = null, bool? TotalEmployeesIncludingPrincipalsIndicator = null, bool? IsOutOfBusiness = null)
        {
            // to ensure "Status" is required (not null)
            if (Status == null)
            {
                throw new InvalidDataException("Status is a required property for BusinessDataDunsResolveResponse and cannot be null");
            }
            else
            {
                this.Status = Status;
            }
            // to ensure "StatusDescription" is required (not null)
            if (StatusDescription == null)
            {
                throw new InvalidDataException("StatusDescription is a required property for BusinessDataDunsResolveResponse and cannot be null");
            }
            else
            {
                this.StatusDescription = StatusDescription;
            }
            this.CompanyName = CompanyName;
            this.CompanyName2 = CompanyName2;
            this.ContinentName = ContinentName;
            this.CountryCode = CountryCode;
            this.CountryCode3 = CountryCode3;
            this.Zip = Zip;
            this.City = City;
            this.Street = Street;
            this.HouseNumber = HouseNumber;
            this.PhoneNumber = PhoneNumber;
            this.FaxNumber = FaxNumber;
            this.StateName = StateName;
            this.StateCode = StateCode;
            this.CeoName = CeoName;
            this.CeoTitle = CeoTitle;
            this.CeoSecondary = CeoSecondary;
            this.SicCode = SicCode;
            this.SicDescription = SicDescription;
            this.YearStarted = YearStarted;
            this.AnnualTurnoverLocalCurrency = AnnualTurnoverLocalCurrency;
            this.AnnualTurnoverIndicatorCode = AnnualTurnoverIndicatorCode;
            this.AnnualTurnoverIndicatorDescription = AnnualTurnoverIndicatorDescription;
            this.AnnualTurnoverUsd = AnnualTurnoverUsd;
            this.NetIncome = NetIncome;
            this.NetIncomeUsd = NetIncomeUsd;
            this.NetWorth = NetWorth;
            this.NetWorthUsd = NetWorthUsd;
            this.CurrencyCode = CurrencyCode;
            this.CurrencyName = CurrencyName;
            this.MarketabilityCode = MarketabilityCode;
            this.MarketabilityDescription = MarketabilityDescription;
            this.TotalEmployees = TotalEmployees;
            this.TotalEmployeesIndicator = TotalEmployeesIndicator;
            this.TotalEmployeesIndicatorDescription = TotalEmployeesIndicatorDescription;
            this.TotalEmployeesPhysicalAddress = TotalEmployeesPhysicalAddress;
            this.TotalEmployeesPhysicalAddressIndicator = TotalEmployeesPhysicalAddressIndicator;
            this.ImportExportIndicator = ImportExportIndicator;
            this.ImportExportIndicatorDescription = ImportExportIndicatorDescription;
            this.LegalFormCode = LegalFormCode;
            this.LegalFormDescription = LegalFormDescription;
            this.BusinessStructureCode = BusinessStructureCode;
            this.BusinessStructureDescription = BusinessStructureDescription;
            this.BusinessRegistrationNumberCode = BusinessRegistrationNumberCode;
            this.BusinessRegistrationNumberCodeDescription = BusinessRegistrationNumberCodeDescription;
            this.UndeliverableIndicator = UndeliverableIndicator;
            this.UndeliverableDescription = UndeliverableDescription;
            this.FinancialStatementDate = FinancialStatementDate;
            this.ReportDate = ReportDate;
            this.IsOnlyAvailableAddress = IsOnlyAvailableAddress;
            this.IsSubsidiary = IsSubsidiary;
            this.TotalEmployeesIncludingPrincipalsIndicator = TotalEmployeesIncludingPrincipalsIndicator;
            this.IsOutOfBusiness = IsOutOfBusiness;
        }
        
        /// <summary>
        /// The company&#39;s official name
        /// </summary>
        /// <value>The company&#39;s official name</value>
        [DataMember(Name="company_name", EmitDefaultValue=false)]
        public string CompanyName { get; set; }
        /// <summary>
        /// The company&#39;s second name or \&quot;doing business as\&quot;
        /// </summary>
        /// <value>The company&#39;s second name or \&quot;doing business as\&quot;</value>
        [DataMember(Name="company_name_2", EmitDefaultValue=false)]
        public string CompanyName2 { get; set; }
        /// <summary>
        /// Continent name of the company&#39;s headquarters
        /// </summary>
        /// <value>Continent name of the company&#39;s headquarters</value>
        [DataMember(Name="continent_name", EmitDefaultValue=false)]
        public string ContinentName { get; set; }
        /// <summary>
        /// ISO 3166-1 alpha-2 country code of the company&#39;s headquarters
        /// </summary>
        /// <value>ISO 3166-1 alpha-2 country code of the company&#39;s headquarters</value>
        [DataMember(Name="country_code", EmitDefaultValue=false)]
        public string CountryCode { get; set; }
        /// <summary>
        /// ISO 3166-1 alpha-3 country code of the company&#39;s headquarters
        /// </summary>
        /// <value>ISO 3166-1 alpha-3 country code of the company&#39;s headquarters</value>
        [DataMember(Name="country_code_3", EmitDefaultValue=false)]
        public string CountryCode3 { get; set; }
        /// <summary>
        /// Postal code of the company&#39;s headquarters
        /// </summary>
        /// <value>Postal code of the company&#39;s headquarters</value>
        [DataMember(Name="zip", EmitDefaultValue=false)]
        public string Zip { get; set; }
        /// <summary>
        /// City of the company&#39;s headquarters
        /// </summary>
        /// <value>City of the company&#39;s headquarters</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }
        /// <summary>
        /// Street name of the company&#39;s headquarters
        /// </summary>
        /// <value>Street name of the company&#39;s headquarters</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }
        /// <summary>
        /// House number of the company&#39;s headquarters
        /// </summary>
        /// <value>House number of the company&#39;s headquarters</value>
        [DataMember(Name="house_number", EmitDefaultValue=false)]
        public string HouseNumber { get; set; }
        /// <summary>
        /// Phone number of the company&#39;s headquarters
        /// </summary>
        /// <value>Phone number of the company&#39;s headquarters</value>
        [DataMember(Name="phone_number", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }
        /// <summary>
        /// Fax number of the company&#39;s headquarters
        /// </summary>
        /// <value>Fax number of the company&#39;s headquarters</value>
        [DataMember(Name="fax_number", EmitDefaultValue=false)]
        public string FaxNumber { get; set; }
        /// <summary>
        /// State name of the company&#39;s headquarters
        /// </summary>
        /// <value>State name of the company&#39;s headquarters</value>
        [DataMember(Name="state_name", EmitDefaultValue=false)]
        public string StateName { get; set; }
        /// <summary>
        /// ISO 3166-2 state code of the company&#39;s headquarters
        /// </summary>
        /// <value>ISO 3166-2 state code of the company&#39;s headquarters</value>
        [DataMember(Name="state_code", EmitDefaultValue=false)]
        public string StateCode { get; set; }
        /// <summary>
        /// Name of the company&#39;s CEO (Chief Executive Officer)
        /// </summary>
        /// <value>Name of the company&#39;s CEO (Chief Executive Officer)</value>
        [DataMember(Name="ceo_name", EmitDefaultValue=false)]
        public string CeoName { get; set; }
        /// <summary>
        /// Position / Business title of the company&#39;s CEO
        /// </summary>
        /// <value>Position / Business title of the company&#39;s CEO</value>
        [DataMember(Name="ceo_title", EmitDefaultValue=false)]
        public string CeoTitle { get; set; }
        /// <summary>
        /// Collection of names of further CEOs
        /// </summary>
        /// <value>Collection of names of further CEOs</value>
        [DataMember(Name="ceo_secondary", EmitDefaultValue=false)]
        public List<string> CeoSecondary { get; set; }
        /// <summary>
        /// The company&#39;s international SIC (Standard Industrial Classification) code
        /// </summary>
        /// <value>The company&#39;s international SIC (Standard Industrial Classification) code</value>
        [DataMember(Name="sic_code", EmitDefaultValue=false)]
        public string SicCode { get; set; }
        /// <summary>
        /// Description of the SIC code
        /// </summary>
        /// <value>Description of the SIC code</value>
        [DataMember(Name="sic_description", EmitDefaultValue=false)]
        public string SicDescription { get; set; }
        /// <summary>
        /// Year of establishment
        /// </summary>
        /// <value>Year of establishment</value>
        [DataMember(Name="year_started", EmitDefaultValue=false)]
        public string YearStarted { get; set; }
        /// <summary>
        /// The company&#39;s annual turnover in its local currency (may be NULL if unset)
        /// </summary>
        /// <value>The company&#39;s annual turnover in its local currency (may be NULL if unset)</value>
        [DataMember(Name="annual_turnover_local_currency", EmitDefaultValue=false)]
        public long? AnnualTurnoverLocalCurrency { get; set; }
        /// <summary>
        /// Description of the annual turnover indicator
        /// </summary>
        /// <value>Description of the annual turnover indicator</value>
        [DataMember(Name="annual_turnover_indicator_description", EmitDefaultValue=false)]
        public string AnnualTurnoverIndicatorDescription { get; set; }
        /// <summary>
        /// The company&#39;s annual turnover in US Dollar (may be NULL if unset)
        /// </summary>
        /// <value>The company&#39;s annual turnover in US Dollar (may be NULL if unset)</value>
        [DataMember(Name="annual_turnover_usd", EmitDefaultValue=false)]
        public long? AnnualTurnoverUsd { get; set; }
        /// <summary>
        /// The company&#39;s net income in its local currency (may be NULL if unset)
        /// </summary>
        /// <value>The company&#39;s net income in its local currency (may be NULL if unset)</value>
        [DataMember(Name="net_income", EmitDefaultValue=false)]
        public long? NetIncome { get; set; }
        /// <summary>
        /// The company&#39;s net income in US Dollar (may be NULL if unset)
        /// </summary>
        /// <value>The company&#39;s net income in US Dollar (may be NULL if unset)</value>
        [DataMember(Name="net_income_usd", EmitDefaultValue=false)]
        public long? NetIncomeUsd { get; set; }
        /// <summary>
        /// The company&#39;s net worth (net value) in its local currency (may be NULL if unset)
        /// </summary>
        /// <value>The company&#39;s net worth (net value) in its local currency (may be NULL if unset)</value>
        [DataMember(Name="net_worth", EmitDefaultValue=false)]
        public long? NetWorth { get; set; }
        /// <summary>
        /// The company&#39;s net worth (net value) in US Dollar (may be NULL if unset)
        /// </summary>
        /// <value>The company&#39;s net worth (net value) in US Dollar (may be NULL if unset)</value>
        [DataMember(Name="net_worth_usd", EmitDefaultValue=false)]
        public long? NetWorthUsd { get; set; }
        /// <summary>
        /// The local currency code of the company&#39;s headquarters country (3-letter ISO 4217 currency code)
        /// </summary>
        /// <value>The local currency code of the company&#39;s headquarters country (3-letter ISO 4217 currency code)</value>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }
        /// <summary>
        /// The local currency name of the company&#39;s headquarters country
        /// </summary>
        /// <value>The local currency name of the company&#39;s headquarters country</value>
        [DataMember(Name="currency_name", EmitDefaultValue=false)]
        public string CurrencyName { get; set; }
        /// <summary>
        /// Description of the marketable indicator value
        /// </summary>
        /// <value>Description of the marketable indicator value</value>
        [DataMember(Name="marketability_description", EmitDefaultValue=false)]
        public string MarketabilityDescription { get; set; }
        /// <summary>
        /// The total number of employees (may be NULL if unset)
        /// </summary>
        /// <value>The total number of employees (may be NULL if unset)</value>
        [DataMember(Name="total_employees", EmitDefaultValue=false)]
        public long? TotalEmployees { get; set; }
        /// <summary>
        /// Description of the total number of employees indicator
        /// </summary>
        /// <value>Description of the total number of employees indicator</value>
        [DataMember(Name="total_employees_indicator_description", EmitDefaultValue=false)]
        public string TotalEmployeesIndicatorDescription { get; set; }
        /// <summary>
        /// The total number of employees working at the company&#39;s headquarters (may be NULL if unset)
        /// </summary>
        /// <value>The total number of employees working at the company&#39;s headquarters (may be NULL if unset)</value>
        [DataMember(Name="total_employees_physical_address", EmitDefaultValue=false)]
        public long? TotalEmployeesPhysicalAddress { get; set; }
        /// <summary>
        /// Description of the import/export indicator
        /// </summary>
        /// <value>Description of the import/export indicator</value>
        [DataMember(Name="import_export_indicator_description", EmitDefaultValue=false)]
        public string ImportExportIndicatorDescription { get; set; }
        /// <summary>
        /// Code of the company&#39;s legal form (may be NULL if unset)
        /// </summary>
        /// <value>Code of the company&#39;s legal form (may be NULL if unset)</value>
        [DataMember(Name="legal_form_code", EmitDefaultValue=false)]
        public long? LegalFormCode { get; set; }
        /// <summary>
        /// Description of the legal form code
        /// </summary>
        /// <value>Description of the legal form code</value>
        [DataMember(Name="legal_form_description", EmitDefaultValue=false)]
        public string LegalFormDescription { get; set; }
        /// <summary>
        /// Description of the business structure code
        /// </summary>
        /// <value>Description of the business structure code</value>
        [DataMember(Name="business_structure_description", EmitDefaultValue=false)]
        public string BusinessStructureDescription { get; set; }
        /// <summary>
        /// Unique code describing the national registration id
        /// </summary>
        /// <value>Unique code describing the national registration id</value>
        [DataMember(Name="business_registration_number_code", EmitDefaultValue=false)]
        public string BusinessRegistrationNumberCode { get; set; }
        /// <summary>
        /// Friendly name of the business registration number code
        /// </summary>
        /// <value>Friendly name of the business registration number code</value>
        [DataMember(Name="business_registration_number_code_description", EmitDefaultValue=false)]
        public string BusinessRegistrationNumberCodeDescription { get; set; }
        /// <summary>
        /// Description of the undeliverable indicator
        /// </summary>
        /// <value>Description of the undeliverable indicator</value>
        [DataMember(Name="undeliverable_description", EmitDefaultValue=false)]
        public string UndeliverableDescription { get; set; }
        /// <summary>
        /// Timestamp when the financial information were updated the last time (may be full year only or full date with day, month and year)
        /// </summary>
        /// <value>Timestamp when the financial information were updated the last time (may be full year only or full date with day, month and year)</value>
        [DataMember(Name="financial_statement_date", EmitDefaultValue=false)]
        public DateTime? FinancialStatementDate { get; set; }
        /// <summary>
        /// Timestamp when the company&#39;s information were updated the last time (may be full year only or full date with day, month and year)
        /// </summary>
        /// <value>Timestamp when the company&#39;s information were updated the last time (may be full year only or full date with day, month and year)</value>
        [DataMember(Name="report_date", EmitDefaultValue=false)]
        public DateTime? ReportDate { get; set; }
        /// <summary>
        /// Flag if this postal address is the only address available for the company
        /// </summary>
        /// <value>Flag if this postal address is the only address available for the company</value>
        [DataMember(Name="is_only_available_address", EmitDefaultValue=false)]
        public bool? IsOnlyAvailableAddress { get; set; }
        /// <summary>
        /// Flag if this postal address is a subsidiary of the company
        /// </summary>
        /// <value>Flag if this postal address is a subsidiary of the company</value>
        [DataMember(Name="is_subsidiary", EmitDefaultValue=false)]
        public bool? IsSubsidiary { get; set; }
        /// <summary>
        /// Flag if the total number of employees includes principals
        /// </summary>
        /// <value>Flag if the total number of employees includes principals</value>
        [DataMember(Name="total_employees_including_principals_indicator", EmitDefaultValue=false)]
        public bool? TotalEmployeesIncludingPrincipalsIndicator { get; set; }
        /// <summary>
        /// Flag if the company is already out of business
        /// </summary>
        /// <value>Flag if the company is already out of business</value>
        [DataMember(Name="is_out_of_business", EmitDefaultValue=false)]
        public bool? IsOutOfBusiness { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BusinessDataDunsResolveResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  CompanyName2: ").Append(CompanyName2).Append("\n");
            sb.Append("  ContinentName: ").Append(ContinentName).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CountryCode3: ").Append(CountryCode3).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  HouseNumber: ").Append(HouseNumber).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  FaxNumber: ").Append(FaxNumber).Append("\n");
            sb.Append("  StateName: ").Append(StateName).Append("\n");
            sb.Append("  StateCode: ").Append(StateCode).Append("\n");
            sb.Append("  CeoName: ").Append(CeoName).Append("\n");
            sb.Append("  CeoTitle: ").Append(CeoTitle).Append("\n");
            sb.Append("  CeoSecondary: ").Append(CeoSecondary).Append("\n");
            sb.Append("  SicCode: ").Append(SicCode).Append("\n");
            sb.Append("  SicDescription: ").Append(SicDescription).Append("\n");
            sb.Append("  YearStarted: ").Append(YearStarted).Append("\n");
            sb.Append("  AnnualTurnoverLocalCurrency: ").Append(AnnualTurnoverLocalCurrency).Append("\n");
            sb.Append("  AnnualTurnoverIndicatorCode: ").Append(AnnualTurnoverIndicatorCode).Append("\n");
            sb.Append("  AnnualTurnoverIndicatorDescription: ").Append(AnnualTurnoverIndicatorDescription).Append("\n");
            sb.Append("  AnnualTurnoverUsd: ").Append(AnnualTurnoverUsd).Append("\n");
            sb.Append("  NetIncome: ").Append(NetIncome).Append("\n");
            sb.Append("  NetIncomeUsd: ").Append(NetIncomeUsd).Append("\n");
            sb.Append("  NetWorth: ").Append(NetWorth).Append("\n");
            sb.Append("  NetWorthUsd: ").Append(NetWorthUsd).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  MarketabilityCode: ").Append(MarketabilityCode).Append("\n");
            sb.Append("  MarketabilityDescription: ").Append(MarketabilityDescription).Append("\n");
            sb.Append("  TotalEmployees: ").Append(TotalEmployees).Append("\n");
            sb.Append("  TotalEmployeesIndicator: ").Append(TotalEmployeesIndicator).Append("\n");
            sb.Append("  TotalEmployeesIndicatorDescription: ").Append(TotalEmployeesIndicatorDescription).Append("\n");
            sb.Append("  TotalEmployeesPhysicalAddress: ").Append(TotalEmployeesPhysicalAddress).Append("\n");
            sb.Append("  TotalEmployeesPhysicalAddressIndicator: ").Append(TotalEmployeesPhysicalAddressIndicator).Append("\n");
            sb.Append("  ImportExportIndicator: ").Append(ImportExportIndicator).Append("\n");
            sb.Append("  ImportExportIndicatorDescription: ").Append(ImportExportIndicatorDescription).Append("\n");
            sb.Append("  LegalFormCode: ").Append(LegalFormCode).Append("\n");
            sb.Append("  LegalFormDescription: ").Append(LegalFormDescription).Append("\n");
            sb.Append("  BusinessStructureCode: ").Append(BusinessStructureCode).Append("\n");
            sb.Append("  BusinessStructureDescription: ").Append(BusinessStructureDescription).Append("\n");
            sb.Append("  BusinessRegistrationNumberCode: ").Append(BusinessRegistrationNumberCode).Append("\n");
            sb.Append("  BusinessRegistrationNumberCodeDescription: ").Append(BusinessRegistrationNumberCodeDescription).Append("\n");
            sb.Append("  UndeliverableIndicator: ").Append(UndeliverableIndicator).Append("\n");
            sb.Append("  UndeliverableDescription: ").Append(UndeliverableDescription).Append("\n");
            sb.Append("  FinancialStatementDate: ").Append(FinancialStatementDate).Append("\n");
            sb.Append("  ReportDate: ").Append(ReportDate).Append("\n");
            sb.Append("  IsOnlyAvailableAddress: ").Append(IsOnlyAvailableAddress).Append("\n");
            sb.Append("  IsSubsidiary: ").Append(IsSubsidiary).Append("\n");
            sb.Append("  TotalEmployeesIncludingPrincipalsIndicator: ").Append(TotalEmployeesIncludingPrincipalsIndicator).Append("\n");
            sb.Append("  IsOutOfBusiness: ").Append(IsOutOfBusiness).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BusinessDataDunsResolveResponse);
        }

        /// <summary>
        /// Returns true if BusinessDataDunsResolveResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of BusinessDataDunsResolveResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BusinessDataDunsResolveResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.StatusDescription == other.StatusDescription ||
                    this.StatusDescription != null &&
                    this.StatusDescription.Equals(other.StatusDescription)
                ) && 
                (
                    this.CompanyName == other.CompanyName ||
                    this.CompanyName != null &&
                    this.CompanyName.Equals(other.CompanyName)
                ) && 
                (
                    this.CompanyName2 == other.CompanyName2 ||
                    this.CompanyName2 != null &&
                    this.CompanyName2.Equals(other.CompanyName2)
                ) && 
                (
                    this.ContinentName == other.ContinentName ||
                    this.ContinentName != null &&
                    this.ContinentName.Equals(other.ContinentName)
                ) && 
                (
                    this.CountryCode == other.CountryCode ||
                    this.CountryCode != null &&
                    this.CountryCode.Equals(other.CountryCode)
                ) && 
                (
                    this.CountryCode3 == other.CountryCode3 ||
                    this.CountryCode3 != null &&
                    this.CountryCode3.Equals(other.CountryCode3)
                ) && 
                (
                    this.Zip == other.Zip ||
                    this.Zip != null &&
                    this.Zip.Equals(other.Zip)
                ) && 
                (
                    this.City == other.City ||
                    this.City != null &&
                    this.City.Equals(other.City)
                ) && 
                (
                    this.Street == other.Street ||
                    this.Street != null &&
                    this.Street.Equals(other.Street)
                ) && 
                (
                    this.HouseNumber == other.HouseNumber ||
                    this.HouseNumber != null &&
                    this.HouseNumber.Equals(other.HouseNumber)
                ) && 
                (
                    this.PhoneNumber == other.PhoneNumber ||
                    this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    this.FaxNumber == other.FaxNumber ||
                    this.FaxNumber != null &&
                    this.FaxNumber.Equals(other.FaxNumber)
                ) && 
                (
                    this.StateName == other.StateName ||
                    this.StateName != null &&
                    this.StateName.Equals(other.StateName)
                ) && 
                (
                    this.StateCode == other.StateCode ||
                    this.StateCode != null &&
                    this.StateCode.Equals(other.StateCode)
                ) && 
                (
                    this.CeoName == other.CeoName ||
                    this.CeoName != null &&
                    this.CeoName.Equals(other.CeoName)
                ) && 
                (
                    this.CeoTitle == other.CeoTitle ||
                    this.CeoTitle != null &&
                    this.CeoTitle.Equals(other.CeoTitle)
                ) && 
                (
                    this.CeoSecondary == other.CeoSecondary ||
                    this.CeoSecondary != null &&
                    this.CeoSecondary.SequenceEqual(other.CeoSecondary)
                ) && 
                (
                    this.SicCode == other.SicCode ||
                    this.SicCode != null &&
                    this.SicCode.Equals(other.SicCode)
                ) && 
                (
                    this.SicDescription == other.SicDescription ||
                    this.SicDescription != null &&
                    this.SicDescription.Equals(other.SicDescription)
                ) && 
                (
                    this.YearStarted == other.YearStarted ||
                    this.YearStarted != null &&
                    this.YearStarted.Equals(other.YearStarted)
                ) && 
                (
                    this.AnnualTurnoverLocalCurrency == other.AnnualTurnoverLocalCurrency ||
                    this.AnnualTurnoverLocalCurrency != null &&
                    this.AnnualTurnoverLocalCurrency.Equals(other.AnnualTurnoverLocalCurrency)
                ) && 
                (
                    this.AnnualTurnoverIndicatorCode == other.AnnualTurnoverIndicatorCode ||
                    this.AnnualTurnoverIndicatorCode != null &&
                    this.AnnualTurnoverIndicatorCode.Equals(other.AnnualTurnoverIndicatorCode)
                ) && 
                (
                    this.AnnualTurnoverIndicatorDescription == other.AnnualTurnoverIndicatorDescription ||
                    this.AnnualTurnoverIndicatorDescription != null &&
                    this.AnnualTurnoverIndicatorDescription.Equals(other.AnnualTurnoverIndicatorDescription)
                ) && 
                (
                    this.AnnualTurnoverUsd == other.AnnualTurnoverUsd ||
                    this.AnnualTurnoverUsd != null &&
                    this.AnnualTurnoverUsd.Equals(other.AnnualTurnoverUsd)
                ) && 
                (
                    this.NetIncome == other.NetIncome ||
                    this.NetIncome != null &&
                    this.NetIncome.Equals(other.NetIncome)
                ) && 
                (
                    this.NetIncomeUsd == other.NetIncomeUsd ||
                    this.NetIncomeUsd != null &&
                    this.NetIncomeUsd.Equals(other.NetIncomeUsd)
                ) && 
                (
                    this.NetWorth == other.NetWorth ||
                    this.NetWorth != null &&
                    this.NetWorth.Equals(other.NetWorth)
                ) && 
                (
                    this.NetWorthUsd == other.NetWorthUsd ||
                    this.NetWorthUsd != null &&
                    this.NetWorthUsd.Equals(other.NetWorthUsd)
                ) && 
                (
                    this.CurrencyCode == other.CurrencyCode ||
                    this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(other.CurrencyCode)
                ) && 
                (
                    this.CurrencyName == other.CurrencyName ||
                    this.CurrencyName != null &&
                    this.CurrencyName.Equals(other.CurrencyName)
                ) && 
                (
                    this.MarketabilityCode == other.MarketabilityCode ||
                    this.MarketabilityCode != null &&
                    this.MarketabilityCode.Equals(other.MarketabilityCode)
                ) && 
                (
                    this.MarketabilityDescription == other.MarketabilityDescription ||
                    this.MarketabilityDescription != null &&
                    this.MarketabilityDescription.Equals(other.MarketabilityDescription)
                ) && 
                (
                    this.TotalEmployees == other.TotalEmployees ||
                    this.TotalEmployees != null &&
                    this.TotalEmployees.Equals(other.TotalEmployees)
                ) && 
                (
                    this.TotalEmployeesIndicator == other.TotalEmployeesIndicator ||
                    this.TotalEmployeesIndicator != null &&
                    this.TotalEmployeesIndicator.Equals(other.TotalEmployeesIndicator)
                ) && 
                (
                    this.TotalEmployeesIndicatorDescription == other.TotalEmployeesIndicatorDescription ||
                    this.TotalEmployeesIndicatorDescription != null &&
                    this.TotalEmployeesIndicatorDescription.Equals(other.TotalEmployeesIndicatorDescription)
                ) && 
                (
                    this.TotalEmployeesPhysicalAddress == other.TotalEmployeesPhysicalAddress ||
                    this.TotalEmployeesPhysicalAddress != null &&
                    this.TotalEmployeesPhysicalAddress.Equals(other.TotalEmployeesPhysicalAddress)
                ) && 
                (
                    this.TotalEmployeesPhysicalAddressIndicator == other.TotalEmployeesPhysicalAddressIndicator ||
                    this.TotalEmployeesPhysicalAddressIndicator != null &&
                    this.TotalEmployeesPhysicalAddressIndicator.Equals(other.TotalEmployeesPhysicalAddressIndicator)
                ) && 
                (
                    this.ImportExportIndicator == other.ImportExportIndicator ||
                    this.ImportExportIndicator != null &&
                    this.ImportExportIndicator.Equals(other.ImportExportIndicator)
                ) && 
                (
                    this.ImportExportIndicatorDescription == other.ImportExportIndicatorDescription ||
                    this.ImportExportIndicatorDescription != null &&
                    this.ImportExportIndicatorDescription.Equals(other.ImportExportIndicatorDescription)
                ) && 
                (
                    this.LegalFormCode == other.LegalFormCode ||
                    this.LegalFormCode != null &&
                    this.LegalFormCode.Equals(other.LegalFormCode)
                ) && 
                (
                    this.LegalFormDescription == other.LegalFormDescription ||
                    this.LegalFormDescription != null &&
                    this.LegalFormDescription.Equals(other.LegalFormDescription)
                ) && 
                (
                    this.BusinessStructureCode == other.BusinessStructureCode ||
                    this.BusinessStructureCode != null &&
                    this.BusinessStructureCode.Equals(other.BusinessStructureCode)
                ) && 
                (
                    this.BusinessStructureDescription == other.BusinessStructureDescription ||
                    this.BusinessStructureDescription != null &&
                    this.BusinessStructureDescription.Equals(other.BusinessStructureDescription)
                ) && 
                (
                    this.BusinessRegistrationNumberCode == other.BusinessRegistrationNumberCode ||
                    this.BusinessRegistrationNumberCode != null &&
                    this.BusinessRegistrationNumberCode.Equals(other.BusinessRegistrationNumberCode)
                ) && 
                (
                    this.BusinessRegistrationNumberCodeDescription == other.BusinessRegistrationNumberCodeDescription ||
                    this.BusinessRegistrationNumberCodeDescription != null &&
                    this.BusinessRegistrationNumberCodeDescription.Equals(other.BusinessRegistrationNumberCodeDescription)
                ) && 
                (
                    this.UndeliverableIndicator == other.UndeliverableIndicator ||
                    this.UndeliverableIndicator != null &&
                    this.UndeliverableIndicator.Equals(other.UndeliverableIndicator)
                ) && 
                (
                    this.UndeliverableDescription == other.UndeliverableDescription ||
                    this.UndeliverableDescription != null &&
                    this.UndeliverableDescription.Equals(other.UndeliverableDescription)
                ) && 
                (
                    this.FinancialStatementDate == other.FinancialStatementDate ||
                    this.FinancialStatementDate != null &&
                    this.FinancialStatementDate.Equals(other.FinancialStatementDate)
                ) && 
                (
                    this.ReportDate == other.ReportDate ||
                    this.ReportDate != null &&
                    this.ReportDate.Equals(other.ReportDate)
                ) && 
                (
                    this.IsOnlyAvailableAddress == other.IsOnlyAvailableAddress ||
                    this.IsOnlyAvailableAddress != null &&
                    this.IsOnlyAvailableAddress.Equals(other.IsOnlyAvailableAddress)
                ) && 
                (
                    this.IsSubsidiary == other.IsSubsidiary ||
                    this.IsSubsidiary != null &&
                    this.IsSubsidiary.Equals(other.IsSubsidiary)
                ) && 
                (
                    this.TotalEmployeesIncludingPrincipalsIndicator == other.TotalEmployeesIncludingPrincipalsIndicator ||
                    this.TotalEmployeesIncludingPrincipalsIndicator != null &&
                    this.TotalEmployeesIncludingPrincipalsIndicator.Equals(other.TotalEmployeesIncludingPrincipalsIndicator)
                ) && 
                (
                    this.IsOutOfBusiness == other.IsOutOfBusiness ||
                    this.IsOutOfBusiness != null &&
                    this.IsOutOfBusiness.Equals(other.IsOutOfBusiness)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.StatusDescription != null)
                    hash = hash * 59 + this.StatusDescription.GetHashCode();
                if (this.CompanyName != null)
                    hash = hash * 59 + this.CompanyName.GetHashCode();
                if (this.CompanyName2 != null)
                    hash = hash * 59 + this.CompanyName2.GetHashCode();
                if (this.ContinentName != null)
                    hash = hash * 59 + this.ContinentName.GetHashCode();
                if (this.CountryCode != null)
                    hash = hash * 59 + this.CountryCode.GetHashCode();
                if (this.CountryCode3 != null)
                    hash = hash * 59 + this.CountryCode3.GetHashCode();
                if (this.Zip != null)
                    hash = hash * 59 + this.Zip.GetHashCode();
                if (this.City != null)
                    hash = hash * 59 + this.City.GetHashCode();
                if (this.Street != null)
                    hash = hash * 59 + this.Street.GetHashCode();
                if (this.HouseNumber != null)
                    hash = hash * 59 + this.HouseNumber.GetHashCode();
                if (this.PhoneNumber != null)
                    hash = hash * 59 + this.PhoneNumber.GetHashCode();
                if (this.FaxNumber != null)
                    hash = hash * 59 + this.FaxNumber.GetHashCode();
                if (this.StateName != null)
                    hash = hash * 59 + this.StateName.GetHashCode();
                if (this.StateCode != null)
                    hash = hash * 59 + this.StateCode.GetHashCode();
                if (this.CeoName != null)
                    hash = hash * 59 + this.CeoName.GetHashCode();
                if (this.CeoTitle != null)
                    hash = hash * 59 + this.CeoTitle.GetHashCode();
                if (this.CeoSecondary != null)
                    hash = hash * 59 + this.CeoSecondary.GetHashCode();
                if (this.SicCode != null)
                    hash = hash * 59 + this.SicCode.GetHashCode();
                if (this.SicDescription != null)
                    hash = hash * 59 + this.SicDescription.GetHashCode();
                if (this.YearStarted != null)
                    hash = hash * 59 + this.YearStarted.GetHashCode();
                if (this.AnnualTurnoverLocalCurrency != null)
                    hash = hash * 59 + this.AnnualTurnoverLocalCurrency.GetHashCode();
                if (this.AnnualTurnoverIndicatorCode != null)
                    hash = hash * 59 + this.AnnualTurnoverIndicatorCode.GetHashCode();
                if (this.AnnualTurnoverIndicatorDescription != null)
                    hash = hash * 59 + this.AnnualTurnoverIndicatorDescription.GetHashCode();
                if (this.AnnualTurnoverUsd != null)
                    hash = hash * 59 + this.AnnualTurnoverUsd.GetHashCode();
                if (this.NetIncome != null)
                    hash = hash * 59 + this.NetIncome.GetHashCode();
                if (this.NetIncomeUsd != null)
                    hash = hash * 59 + this.NetIncomeUsd.GetHashCode();
                if (this.NetWorth != null)
                    hash = hash * 59 + this.NetWorth.GetHashCode();
                if (this.NetWorthUsd != null)
                    hash = hash * 59 + this.NetWorthUsd.GetHashCode();
                if (this.CurrencyCode != null)
                    hash = hash * 59 + this.CurrencyCode.GetHashCode();
                if (this.CurrencyName != null)
                    hash = hash * 59 + this.CurrencyName.GetHashCode();
                if (this.MarketabilityCode != null)
                    hash = hash * 59 + this.MarketabilityCode.GetHashCode();
                if (this.MarketabilityDescription != null)
                    hash = hash * 59 + this.MarketabilityDescription.GetHashCode();
                if (this.TotalEmployees != null)
                    hash = hash * 59 + this.TotalEmployees.GetHashCode();
                if (this.TotalEmployeesIndicator != null)
                    hash = hash * 59 + this.TotalEmployeesIndicator.GetHashCode();
                if (this.TotalEmployeesIndicatorDescription != null)
                    hash = hash * 59 + this.TotalEmployeesIndicatorDescription.GetHashCode();
                if (this.TotalEmployeesPhysicalAddress != null)
                    hash = hash * 59 + this.TotalEmployeesPhysicalAddress.GetHashCode();
                if (this.TotalEmployeesPhysicalAddressIndicator != null)
                    hash = hash * 59 + this.TotalEmployeesPhysicalAddressIndicator.GetHashCode();
                if (this.ImportExportIndicator != null)
                    hash = hash * 59 + this.ImportExportIndicator.GetHashCode();
                if (this.ImportExportIndicatorDescription != null)
                    hash = hash * 59 + this.ImportExportIndicatorDescription.GetHashCode();
                if (this.LegalFormCode != null)
                    hash = hash * 59 + this.LegalFormCode.GetHashCode();
                if (this.LegalFormDescription != null)
                    hash = hash * 59 + this.LegalFormDescription.GetHashCode();
                if (this.BusinessStructureCode != null)
                    hash = hash * 59 + this.BusinessStructureCode.GetHashCode();
                if (this.BusinessStructureDescription != null)
                    hash = hash * 59 + this.BusinessStructureDescription.GetHashCode();
                if (this.BusinessRegistrationNumberCode != null)
                    hash = hash * 59 + this.BusinessRegistrationNumberCode.GetHashCode();
                if (this.BusinessRegistrationNumberCodeDescription != null)
                    hash = hash * 59 + this.BusinessRegistrationNumberCodeDescription.GetHashCode();
                if (this.UndeliverableIndicator != null)
                    hash = hash * 59 + this.UndeliverableIndicator.GetHashCode();
                if (this.UndeliverableDescription != null)
                    hash = hash * 59 + this.UndeliverableDescription.GetHashCode();
                if (this.FinancialStatementDate != null)
                    hash = hash * 59 + this.FinancialStatementDate.GetHashCode();
                if (this.ReportDate != null)
                    hash = hash * 59 + this.ReportDate.GetHashCode();
                if (this.IsOnlyAvailableAddress != null)
                    hash = hash * 59 + this.IsOnlyAvailableAddress.GetHashCode();
                if (this.IsSubsidiary != null)
                    hash = hash * 59 + this.IsSubsidiary.GetHashCode();
                if (this.TotalEmployeesIncludingPrincipalsIndicator != null)
                    hash = hash * 59 + this.TotalEmployeesIncludingPrincipalsIndicator.GetHashCode();
                if (this.IsOutOfBusiness != null)
                    hash = hash * 59 + this.IsOutOfBusiness.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
